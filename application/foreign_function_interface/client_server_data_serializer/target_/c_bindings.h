#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct Vec__c_uchar {
  unsigned char *pointer;
  size_t length;
} Vec__c_uchar;

typedef struct Result__Vec__c_uchar {
  struct Vec__c_uchar data;
  bool is_data;
} Result__Vec__c_uchar;

typedef struct String_ {
  char *pointer;
} String_;

typedef struct User_AuthorizeByFirstStep_Incoming_ {
  struct String_ user_device__id;
  struct String_ user__email___or___user__nickname;
  struct String_ user__password;
} User_AuthorizeByFirstStep_Incoming_;

typedef struct User_AuthorizeByFirstStep_Outcoming_ {
  long user__obfuscated_id;
  bool verification_message_sent;
  long user_authorization_token__can_be_resent_from;
  unsigned char user_authorization_token__wrong_enter_tries_quantity;
  unsigned char user_authorization_token__wrong_enter_tries_quantity_limit;
} User_AuthorizeByFirstStep_Outcoming_;

typedef struct Data__User_AuthorizeByFirstStep_Outcoming_ {
  struct User_AuthorizeByFirstStep_Outcoming_ filled;
  bool is_filled;
} Data__User_AuthorizeByFirstStep_Outcoming_;

typedef struct User_AuthorizeByFirstStep_Precedent_ {
  bool user___wrong_email_or_nickname_or_password;
  bool parallel_execution;
} User_AuthorizeByFirstStep_Precedent_;

typedef struct UnifiedReport__User_AuthorizeByFirstStep_Outcoming___User_AuthorizeByFirstStep_Precedent_ {
  struct Data__User_AuthorizeByFirstStep_Outcoming_ target;
  struct User_AuthorizeByFirstStep_Precedent_ precedent;
  bool is_target;
} UnifiedReport__User_AuthorizeByFirstStep_Outcoming___User_AuthorizeByFirstStep_Precedent_;

typedef struct Result__UnifiedReport__User_AuthorizeByFirstStep_Outcoming___User_AuthorizeByFirstStep_Precedent_ {
  struct UnifiedReport__User_AuthorizeByFirstStep_Outcoming___User_AuthorizeByFirstStep_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__User_AuthorizeByFirstStep_Outcoming___User_AuthorizeByFirstStep_Precedent_;

typedef struct Result__UnifiedReport__User_AuthorizeByFirstStep_Outcoming___User_AuthorizeByFirstStep_Precedent_ User_AuthorizeByFirstStep_Result;

typedef struct User_AuthorizeByLastStep_Incoming_ {
  long user__obfuscated_id;
  struct String_ user_device__id;
  struct String_ user_authorization_token__value;
} User_AuthorizeByLastStep_Incoming_;

typedef struct UserAccessTokenSigned_ {
  long user__id;
  struct String_ user_device__id;
  long user_access_token__obfuscation_value;
  long user_access_token__expires_at;
  struct Vec__c_uchar signature;
} UserAccessTokenSigned_;

typedef struct UserAccessRefreshTokenSigned_ {
  long user_access_refresh_token__expires_at;
  struct Vec__c_uchar signature;
} UserAccessRefreshTokenSigned_;

typedef struct User_AuthorizeByLastStep_Outcoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct UserAccessRefreshTokenSigned_ user_access_refresh_token_signed;
} User_AuthorizeByLastStep_Outcoming_;

typedef struct Data__User_AuthorizeByLastStep_Outcoming_ {
  struct User_AuthorizeByLastStep_Outcoming_ filled;
  bool is_filled;
} Data__User_AuthorizeByLastStep_Outcoming_;

typedef struct UserAuthorizationToken__WrongValue {
  bool is_exist;
  unsigned char user_authorization_token__wrong_enter_tries_quantity;
} UserAuthorizationToken__WrongValue;

typedef struct User_AuthorizeByLastStep_Precedent_ {
  bool user_authorization_token___not_found;
  bool user_authorization_token___already_expired;
  struct UserAuthorizationToken__WrongValue user_authorization_token___wrong_value;
  bool user___not_found;
  bool parallel_execution;
} User_AuthorizeByLastStep_Precedent_;

typedef struct UnifiedReport__User_AuthorizeByLastStep_Outcoming___User_AuthorizeByLastStep_Precedent_ {
  struct Data__User_AuthorizeByLastStep_Outcoming_ target;
  struct User_AuthorizeByLastStep_Precedent_ precedent;
  bool is_target;
} UnifiedReport__User_AuthorizeByLastStep_Outcoming___User_AuthorizeByLastStep_Precedent_;

typedef struct Result__UnifiedReport__User_AuthorizeByLastStep_Outcoming___User_AuthorizeByLastStep_Precedent_ {
  struct UnifiedReport__User_AuthorizeByLastStep_Outcoming___User_AuthorizeByLastStep_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__User_AuthorizeByLastStep_Outcoming___User_AuthorizeByLastStep_Precedent_;

typedef struct Result__UnifiedReport__User_AuthorizeByLastStep_Outcoming___User_AuthorizeByLastStep_Precedent_ User_AuthorizeByLastStep_Result;

typedef struct User_CheckEmailForExisting_Incoming_ {
  struct String_ user__email;
} User_CheckEmailForExisting_Incoming_;

typedef struct User_CheckEmailForExisting_Outcoming_ {
  bool result;
} User_CheckEmailForExisting_Outcoming_;

typedef struct Data__User_CheckEmailForExisting_Outcoming_ {
  struct User_CheckEmailForExisting_Outcoming_ filled;
  bool is_filled;
} Data__User_CheckEmailForExisting_Outcoming_;

typedef struct Void_ {
  bool _inner;
} Void_;

typedef struct UnifiedReport__User_CheckEmailForExisting_Outcoming___Void_ {
  struct Data__User_CheckEmailForExisting_Outcoming_ target;
  struct Void_ precedent;
  bool is_target;
} UnifiedReport__User_CheckEmailForExisting_Outcoming___Void_;

typedef struct Result__UnifiedReport__User_CheckEmailForExisting_Outcoming___Void_ {
  struct UnifiedReport__User_CheckEmailForExisting_Outcoming___Void_ data;
  bool is_data;
} Result__UnifiedReport__User_CheckEmailForExisting_Outcoming___Void_;

typedef struct Result__UnifiedReport__User_CheckEmailForExisting_Outcoming___Void_ User_CheckEmailForExisting_Result;

typedef struct User_CheckNicknameForExisting_Incoming_ {
  struct String_ user__nickname;
} User_CheckNicknameForExisting_Incoming_;

typedef struct User_CheckNicknameForExisting_Outcoming_ {
  bool result;
} User_CheckNicknameForExisting_Outcoming_;

typedef struct Data__User_CheckNicknameForExisting_Outcoming_ {
  struct User_CheckNicknameForExisting_Outcoming_ filled;
  bool is_filled;
} Data__User_CheckNicknameForExisting_Outcoming_;

typedef struct UnifiedReport__User_CheckNicknameForExisting_Outcoming___Void_ {
  struct Data__User_CheckNicknameForExisting_Outcoming_ target;
  struct Void_ precedent;
  bool is_target;
} UnifiedReport__User_CheckNicknameForExisting_Outcoming___Void_;

typedef struct Result__UnifiedReport__User_CheckNicknameForExisting_Outcoming___Void_ {
  struct UnifiedReport__User_CheckNicknameForExisting_Outcoming___Void_ data;
  bool is_data;
} Result__UnifiedReport__User_CheckNicknameForExisting_Outcoming___Void_;

typedef struct Result__UnifiedReport__User_CheckNicknameForExisting_Outcoming___Void_ User_CheckNicknameForExisting_Result;

typedef struct User_DeauthorizeFromAllDevices_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
} User_DeauthorizeFromAllDevices_Incoming_;

typedef struct Data__Void_ {
  struct Void_ filled;
  bool is_filled;
} Data__Void_;

typedef struct User_DeauthorizeFromAllDevices_Precedent_ {
  bool user_access_token___already_expired;
} User_DeauthorizeFromAllDevices_Precedent_;

typedef struct UnifiedReport__Void___User_DeauthorizeFromAllDevices_Precedent_ {
  struct Data__Void_ target;
  struct User_DeauthorizeFromAllDevices_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Void___User_DeauthorizeFromAllDevices_Precedent_;

typedef struct Result__UnifiedReport__Void___User_DeauthorizeFromAllDevices_Precedent_ {
  struct UnifiedReport__Void___User_DeauthorizeFromAllDevices_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Void___User_DeauthorizeFromAllDevices_Precedent_;

typedef struct Result__UnifiedReport__Void___User_DeauthorizeFromAllDevices_Precedent_ User_DeauthorizeFromAllDevices_Result;

typedef struct User_DeauthorizeFromOneDevice_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
} User_DeauthorizeFromOneDevice_Incoming_;

typedef struct User_DeauthorizeFromOneDevice_Precedent_ {
  bool user_access_token___already_expired;
} User_DeauthorizeFromOneDevice_Precedent_;

typedef struct UnifiedReport__Void___User_DeauthorizeFromOneDevice_Precedent_ {
  struct Data__Void_ target;
  struct User_DeauthorizeFromOneDevice_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Void___User_DeauthorizeFromOneDevice_Precedent_;

typedef struct Result__UnifiedReport__Void___User_DeauthorizeFromOneDevice_Precedent_ {
  struct UnifiedReport__Void___User_DeauthorizeFromOneDevice_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Void___User_DeauthorizeFromOneDevice_Precedent_;

typedef struct Result__UnifiedReport__Void___User_DeauthorizeFromOneDevice_Precedent_ User_DeauthorizeFromOneDevice_Result;

typedef struct User_RefreshAccessToken_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct UserAccessRefreshTokenSigned_ user_access_refresh_token_signed;
} User_RefreshAccessToken_Incoming_;

typedef struct User_RefreshAccessToken_Outcoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct UserAccessRefreshTokenSigned_ user_access_refresh_token_signed;
} User_RefreshAccessToken_Outcoming_;

typedef struct Data__User_RefreshAccessToken_Outcoming_ {
  struct User_RefreshAccessToken_Outcoming_ filled;
  bool is_filled;
} Data__User_RefreshAccessToken_Outcoming_;

typedef struct User_RefreshAccessToken_Precedent_ {
  bool user_access_token___not_ready_to_refresh;
  bool user_access_refresh_token___not_found;
  bool user_access_refresh_token___already_expired;
  bool parallel_execution;
} User_RefreshAccessToken_Precedent_;

typedef struct UnifiedReport__User_RefreshAccessToken_Outcoming___User_RefreshAccessToken_Precedent_ {
  struct Data__User_RefreshAccessToken_Outcoming_ target;
  struct User_RefreshAccessToken_Precedent_ precedent;
  bool is_target;
} UnifiedReport__User_RefreshAccessToken_Outcoming___User_RefreshAccessToken_Precedent_;

typedef struct Result__UnifiedReport__User_RefreshAccessToken_Outcoming___User_RefreshAccessToken_Precedent_ {
  struct UnifiedReport__User_RefreshAccessToken_Outcoming___User_RefreshAccessToken_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__User_RefreshAccessToken_Outcoming___User_RefreshAccessToken_Precedent_;

typedef struct Result__UnifiedReport__User_RefreshAccessToken_Outcoming___User_RefreshAccessToken_Precedent_ User_RefreshAccessToken_Result;

typedef struct User_RegisterByFirstStep_Incoming_ {
  struct String_ user__email;
  struct String_ user_device__id;
} User_RegisterByFirstStep_Incoming_;

typedef struct User_RegisterByFirstStep_Outcoming_ {
  bool verification_message_sent;
  long user_registration_token__can_be_resent_from;
  unsigned char user_registration_token__wrong_enter_tries_quantity;
  unsigned char user_registration_token__wrong_enter_tries_quantity_limit;
} User_RegisterByFirstStep_Outcoming_;

typedef struct Data__User_RegisterByFirstStep_Outcoming_ {
  struct User_RegisterByFirstStep_Outcoming_ filled;
  bool is_filled;
} Data__User_RegisterByFirstStep_Outcoming_;

typedef struct User_RegisterByFirstStep_Precedent_ {
  bool user___email_already_exist;
  bool parallel_execution;
} User_RegisterByFirstStep_Precedent_;

typedef struct UnifiedReport__User_RegisterByFirstStep_Outcoming___User_RegisterByFirstStep_Precedent_ {
  struct Data__User_RegisterByFirstStep_Outcoming_ target;
  struct User_RegisterByFirstStep_Precedent_ precedent;
  bool is_target;
} UnifiedReport__User_RegisterByFirstStep_Outcoming___User_RegisterByFirstStep_Precedent_;

typedef struct Result__UnifiedReport__User_RegisterByFirstStep_Outcoming___User_RegisterByFirstStep_Precedent_ {
  struct UnifiedReport__User_RegisterByFirstStep_Outcoming___User_RegisterByFirstStep_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__User_RegisterByFirstStep_Outcoming___User_RegisterByFirstStep_Precedent_;

typedef struct Result__UnifiedReport__User_RegisterByFirstStep_Outcoming___User_RegisterByFirstStep_Precedent_ User_RegisterByFirstStep_Result;

typedef struct User_RegisterBySecondStep_Incoming_ {
  struct String_ user__email;
  struct String_ user_device__id;
  struct String_ user_registration_token__value;
} User_RegisterBySecondStep_Incoming_;

typedef struct UserRegistrationToken__WrongValue {
  bool is_exist;
  unsigned char user_registration_token__wrong_enter_tries_quantity;
} UserRegistrationToken__WrongValue;

typedef struct User_RegisterBySecondStep_Precedent_ {
  bool user_registration_token___not_found;
  bool user_registration_token___already_expired;
  bool user_registration_token___already_approved;
  struct UserRegistrationToken__WrongValue user_registration_token___wrong_value;
  bool parallel_execution;
} User_RegisterBySecondStep_Precedent_;

typedef struct UnifiedReport__Void___User_RegisterBySecondStep_Precedent_ {
  struct Data__Void_ target;
  struct User_RegisterBySecondStep_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Void___User_RegisterBySecondStep_Precedent_;

typedef struct Result__UnifiedReport__Void___User_RegisterBySecondStep_Precedent_ {
  struct UnifiedReport__Void___User_RegisterBySecondStep_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Void___User_RegisterBySecondStep_Precedent_;

typedef struct Result__UnifiedReport__Void___User_RegisterBySecondStep_Precedent_ User_RegisterBySecondStep_Result;

typedef struct User_RegisterByLastStep_Incoming_ {
  struct String_ user_device__id;
  struct String_ user__nickname;
  struct String_ user__password;
  struct String_ user__email;
  struct String_ user_registration_token__value;
} User_RegisterByLastStep_Incoming_;

typedef struct User_RegisterByLastStep_Outcoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct UserAccessRefreshTokenSigned_ user_access_refresh_token_signed;
} User_RegisterByLastStep_Outcoming_;

typedef struct Data__User_RegisterByLastStep_Outcoming_ {
  struct User_RegisterByLastStep_Outcoming_ filled;
  bool is_filled;
} Data__User_RegisterByLastStep_Outcoming_;

typedef struct User_RegisterByLastStep_Precedent_ {
  bool user___nickname_already_exist;
  bool user___email_already_exist;
  bool user_registration_token___not_found;
  bool user_registration_token___already_expired;
  bool user_registration_token___is_not_approved;
  bool user_registration_token___wrong_value;
  bool parallel_execution;
} User_RegisterByLastStep_Precedent_;

typedef struct UnifiedReport__User_RegisterByLastStep_Outcoming___User_RegisterByLastStep_Precedent_ {
  struct Data__User_RegisterByLastStep_Outcoming_ target;
  struct User_RegisterByLastStep_Precedent_ precedent;
  bool is_target;
} UnifiedReport__User_RegisterByLastStep_Outcoming___User_RegisterByLastStep_Precedent_;

typedef struct Result__UnifiedReport__User_RegisterByLastStep_Outcoming___User_RegisterByLastStep_Precedent_ {
  struct UnifiedReport__User_RegisterByLastStep_Outcoming___User_RegisterByLastStep_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__User_RegisterByLastStep_Outcoming___User_RegisterByLastStep_Precedent_;

typedef struct Result__UnifiedReport__User_RegisterByLastStep_Outcoming___User_RegisterByLastStep_Precedent_ User_RegisterByLastStep_Result;

typedef struct User_ResetPasswordByFirstStep_Incoming_ {
  struct String_ user__email;
  struct String_ user_device__id;
} User_ResetPasswordByFirstStep_Incoming_;

typedef struct User_ResetPasswordByFirstStep_Outcoming_ {
  long user__obfuscated_id;
  bool verification_message_sent;
  long user_reset_password_token__can_be_resent_from;
  unsigned char user_reset_password_token__wrong_enter_tries_quantity;
  unsigned char user_reset_password_token__wrong_enter_tries_quantity_limit;
} User_ResetPasswordByFirstStep_Outcoming_;

typedef struct Data__User_ResetPasswordByFirstStep_Outcoming_ {
  struct User_ResetPasswordByFirstStep_Outcoming_ filled;
  bool is_filled;
} Data__User_ResetPasswordByFirstStep_Outcoming_;

typedef struct User_ResetPasswordByFirstStep_Precedent_ {
  bool user___not_found;
  bool parallel_execution;
} User_ResetPasswordByFirstStep_Precedent_;

typedef struct UnifiedReport__User_ResetPasswordByFirstStep_Outcoming___User_ResetPasswordByFirstStep_Precedent_ {
  struct Data__User_ResetPasswordByFirstStep_Outcoming_ target;
  struct User_ResetPasswordByFirstStep_Precedent_ precedent;
  bool is_target;
} UnifiedReport__User_ResetPasswordByFirstStep_Outcoming___User_ResetPasswordByFirstStep_Precedent_;

typedef struct Result__UnifiedReport__User_ResetPasswordByFirstStep_Outcoming___User_ResetPasswordByFirstStep_Precedent_ {
  struct UnifiedReport__User_ResetPasswordByFirstStep_Outcoming___User_ResetPasswordByFirstStep_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__User_ResetPasswordByFirstStep_Outcoming___User_ResetPasswordByFirstStep_Precedent_;

typedef struct Result__UnifiedReport__User_ResetPasswordByFirstStep_Outcoming___User_ResetPasswordByFirstStep_Precedent_ User_ResetPasswordByFirstStep_Result;

typedef struct User_ResetPasswordBySecondStep_Incoming_ {
  long user__obfuscated_id;
  struct String_ user_device__id;
  struct String_ user_reset_password_token__value;
} User_ResetPasswordBySecondStep_Incoming_;

typedef struct UserResetPasswordToken__WrongValue_ {
  bool is_exist;
  unsigned char user_reset_password_token__wrong_enter_tries_quantity;
} UserResetPasswordToken__WrongValue_;

typedef struct User_ResetPasswordBySecondStep_Precedent_ {
  bool user_reset_password_token___not_found;
  bool user_reset_password_token___already_expired;
  bool user_reset_password_token___already_approved;
  struct UserResetPasswordToken__WrongValue_ user_reset_password_token___wrong_value;
  bool parallel_execution;
} User_ResetPasswordBySecondStep_Precedent_;

typedef struct UnifiedReport__Void___User_ResetPasswordBySecondStep_Precedent_ {
  struct Data__Void_ target;
  struct User_ResetPasswordBySecondStep_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Void___User_ResetPasswordBySecondStep_Precedent_;

typedef struct Result__UnifiedReport__Void___User_ResetPasswordBySecondStep_Precedent_ {
  struct UnifiedReport__Void___User_ResetPasswordBySecondStep_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Void___User_ResetPasswordBySecondStep_Precedent_;

typedef struct Result__UnifiedReport__Void___User_ResetPasswordBySecondStep_Precedent_ User_ResetPasswordBySecondStep_Result;

typedef struct User_ResetPasswordByLastStep_Incoming_ {
  long user__obfuscated_id;
  struct String_ user_device__id;
  struct String_ user__password;
  struct String_ user_reset_password_token__value;
} User_ResetPasswordByLastStep_Incoming_;

typedef struct User_ResetPasswordByLastStep_Precedent_ {
  bool user___not_found;
  bool user_reset_password_token___not_found;
  bool user_reset_password_token___already_expired;
  bool user_reset_password_token___is_not_approved;
  bool user_reset_password_token___wrong_value;
  bool parallel_execution;
} User_ResetPasswordByLastStep_Precedent_;

typedef struct UnifiedReport__Void___User_ResetPasswordByLastStep_Precedent_ {
  struct Data__Void_ target;
  struct User_ResetPasswordByLastStep_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Void___User_ResetPasswordByLastStep_Precedent_;

typedef struct Result__UnifiedReport__Void___User_ResetPasswordByLastStep_Precedent_ {
  struct UnifiedReport__Void___User_ResetPasswordByLastStep_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Void___User_ResetPasswordByLastStep_Precedent_;

typedef struct Result__UnifiedReport__Void___User_ResetPasswordByLastStep_Precedent_ User_ResetPasswordByLastStep_Result;

typedef struct User_SendEmailForRegister_Incoming_ {
  struct String_ user__email;
  struct String_ user_device__id;
} User_SendEmailForRegister_Incoming_;

typedef struct User_SendEmailForRegister_Outcoming_ {
  long user_registration_token__can_be_resent_from;
} User_SendEmailForRegister_Outcoming_;

typedef struct Data__User_SendEmailForRegister_Outcoming_ {
  struct User_SendEmailForRegister_Outcoming_ filled;
  bool is_filled;
} Data__User_SendEmailForRegister_Outcoming_;

typedef struct User_SendEmailForRegister_Precedent_ {
  bool user_registration_token___not_found;
  bool user_registration_token___already_expired;
  bool user_registration_token___already_approved;
  bool user_registration_token___time_to_resend_has_not_come;
  bool parallel_execution;
} User_SendEmailForRegister_Precedent_;

typedef struct UnifiedReport__User_SendEmailForRegister_Outcoming___User_SendEmailForRegister_Precedent_ {
  struct Data__User_SendEmailForRegister_Outcoming_ target;
  struct User_SendEmailForRegister_Precedent_ precedent;
  bool is_target;
} UnifiedReport__User_SendEmailForRegister_Outcoming___User_SendEmailForRegister_Precedent_;

typedef struct Result__UnifiedReport__User_SendEmailForRegister_Outcoming___User_SendEmailForRegister_Precedent_ {
  struct UnifiedReport__User_SendEmailForRegister_Outcoming___User_SendEmailForRegister_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__User_SendEmailForRegister_Outcoming___User_SendEmailForRegister_Precedent_;

typedef struct Result__UnifiedReport__User_SendEmailForRegister_Outcoming___User_SendEmailForRegister_Precedent_ User_SendEmailForRegister_Result;

typedef struct User_SendEmailForAuthorize_Incoming_ {
  struct String_ user_device__id;
  long user__obfuscated_id;
} User_SendEmailForAuthorize_Incoming_;

typedef struct User_SendEmailForAuthorize_Outcoming_ {
  long user_authorization_token__can_be_resent_from;
} User_SendEmailForAuthorize_Outcoming_;

typedef struct Data__User_SendEmailForAuthorize_Outcoming_ {
  struct User_SendEmailForAuthorize_Outcoming_ filled;
  bool is_filled;
} Data__User_SendEmailForAuthorize_Outcoming_;

typedef struct User_SendEmailForAuthorize_Precedent_ {
  bool user___not_found;
  bool user_authorization_token___not_found;
  bool user_authorization_token___already_expired;
  bool user_authorization_token___time_to_resend_has_not_come;
  bool parallel_execution;
} User_SendEmailForAuthorize_Precedent_;

typedef struct UnifiedReport__User_SendEmailForAuthorize_Outcoming___User_SendEmailForAuthorize_Precedent_ {
  struct Data__User_SendEmailForAuthorize_Outcoming_ target;
  struct User_SendEmailForAuthorize_Precedent_ precedent;
  bool is_target;
} UnifiedReport__User_SendEmailForAuthorize_Outcoming___User_SendEmailForAuthorize_Precedent_;

typedef struct Result__UnifiedReport__User_SendEmailForAuthorize_Outcoming___User_SendEmailForAuthorize_Precedent_ {
  struct UnifiedReport__User_SendEmailForAuthorize_Outcoming___User_SendEmailForAuthorize_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__User_SendEmailForAuthorize_Outcoming___User_SendEmailForAuthorize_Precedent_;

typedef struct Result__UnifiedReport__User_SendEmailForAuthorize_Outcoming___User_SendEmailForAuthorize_Precedent_ User_SendEmailForAuthorize_Result;

typedef struct User_SendEmailForResetPassword_Incoming_ {
  long user__obfuscated_id;
  struct String_ user_device__id;
} User_SendEmailForResetPassword_Incoming_;

typedef struct User_SendEmailForResetPassword_Outcoming_ {
  long user_resep_password_token_can_be_resent_from;
} User_SendEmailForResetPassword_Outcoming_;

typedef struct Data__User_SendEmailForResetPassword_Outcoming_ {
  struct User_SendEmailForResetPassword_Outcoming_ filled;
  bool is_filled;
} Data__User_SendEmailForResetPassword_Outcoming_;

typedef struct User_SendEmailForResetPassword_Precedent_ {
  bool user___not_found;
  bool user_reset_password_token___not_found;
  bool user_reset_password_token___already_expired;
  bool user_reset_password_token___already_approved;
  bool user_reset_password_token___time_to_resend_has_not_come;
  bool parallel_execution;
} User_SendEmailForResetPassword_Precedent_;

typedef struct UnifiedReport__User_SendEmailForResetPassword_Outcoming___User_SendEmailForResetPassword_Precedent_ {
  struct Data__User_SendEmailForResetPassword_Outcoming_ target;
  struct User_SendEmailForResetPassword_Precedent_ precedent;
  bool is_target;
} UnifiedReport__User_SendEmailForResetPassword_Outcoming___User_SendEmailForResetPassword_Precedent_;

typedef struct Result__UnifiedReport__User_SendEmailForResetPassword_Outcoming___User_SendEmailForResetPassword_Precedent_ {
  struct UnifiedReport__User_SendEmailForResetPassword_Outcoming___User_SendEmailForResetPassword_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__User_SendEmailForResetPassword_Outcoming___User_SendEmailForResetPassword_Precedent_;

typedef struct Result__UnifiedReport__User_SendEmailForResetPassword_Outcoming___User_SendEmailForResetPassword_Precedent_ User_SendEmailForResetPassword_Result;

typedef struct Option__String_ {
  struct String_ data;
  bool is_data;
} Option__String_;

typedef struct Channel_GetManyByNameInSubscriptions_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct String_ channel__name;
  struct Option__String_ requery___channel__name;
} Channel_GetManyByNameInSubscriptions_Incoming_;

typedef struct ChannelTokenSigned_ {
  long channel__id;
  long channel_token__obfuscation_value;
  long channel_token__expires_at;
  bool channel_token__is_user_the_channel_subscriber;
  bool channel_token__is_user_the_channel_owner;
  struct Vec__c_uchar signature;
} ChannelTokenSigned_;

typedef struct Channel_GetManyByNameInSubscriptions_Data_ {
  struct String_ channel__name;
  struct String_ channel__linked_name;
  unsigned char channel__access_modifier;
  unsigned char channel__visability_modifier;
  struct Option__String_ channel__cover_image_path;
  struct Option__String_ channel__background_image_path;
  struct ChannelTokenSigned_ channel_token_signed;
} Channel_GetManyByNameInSubscriptions_Data_;

typedef struct Vec__Channel_GetManyByNameInSubscriptions_Data_ {
  struct Channel_GetManyByNameInSubscriptions_Data_ *pointer;
  size_t length;
} Vec__Channel_GetManyByNameInSubscriptions_Data_;

typedef struct Channel_GetManyByNameInSubscriptions_Outcoming_ {
  struct Vec__Channel_GetManyByNameInSubscriptions_Data_ data_registry;
} Channel_GetManyByNameInSubscriptions_Outcoming_;

typedef struct Data__Channel_GetManyByNameInSubscriptions_Outcoming_ {
  struct Channel_GetManyByNameInSubscriptions_Outcoming_ filled;
  bool is_filled;
} Data__Channel_GetManyByNameInSubscriptions_Outcoming_;

typedef struct Channel_GetManyByNameInSubscriptions_Precedent_ {
  bool user_access_token___already_expired;
} Channel_GetManyByNameInSubscriptions_Precedent_;

typedef struct UnifiedReport__Channel_GetManyByNameInSubscriptions_Outcoming___Channel_GetManyByNameInSubscriptions_Precedent_ {
  struct Data__Channel_GetManyByNameInSubscriptions_Outcoming_ target;
  struct Channel_GetManyByNameInSubscriptions_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Channel_GetManyByNameInSubscriptions_Outcoming___Channel_GetManyByNameInSubscriptions_Precedent_;

typedef struct Result__UnifiedReport__Channel_GetManyByNameInSubscriptions_Outcoming___Channel_GetManyByNameInSubscriptions_Precedent_ {
  struct UnifiedReport__Channel_GetManyByNameInSubscriptions_Outcoming___Channel_GetManyByNameInSubscriptions_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Channel_GetManyByNameInSubscriptions_Outcoming___Channel_GetManyByNameInSubscriptions_Precedent_;

typedef struct Result__UnifiedReport__Channel_GetManyByNameInSubscriptions_Outcoming___Channel_GetManyByNameInSubscriptions_Precedent_ Channel_GetManyByNameInSubscriptions_Result;

typedef struct Option__c_long {
  long data;
  bool is_data;
} Option__c_long;

typedef struct Channel_GetManyBySubscription_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct Option__c_long requery___channel__id;
} Channel_GetManyBySubscription_Incoming_;

typedef struct Channel_GetManyBySubscription_Data_ {
  struct String_ channel__name;
  struct String_ channel__linked_name;
  unsigned char channel__access_modifier;
  unsigned char channel__visability_modifier;
  struct Option__String_ channel__cover_image_path;
  struct Option__String_ channel__background_image_path;
  struct ChannelTokenSigned_ channel_token_signed;
} Channel_GetManyBySubscription_Data_;

typedef struct Vec__Channel_GetManyBySubscription_Data_ {
  struct Channel_GetManyBySubscription_Data_ *pointer;
  size_t length;
} Vec__Channel_GetManyBySubscription_Data_;

typedef struct Channel_GetManyBySubscription_Outcoming_ {
  struct Vec__Channel_GetManyBySubscription_Data_ data_registry;
} Channel_GetManyBySubscription_Outcoming_;

typedef struct Data__Channel_GetManyBySubscription_Outcoming_ {
  struct Channel_GetManyBySubscription_Outcoming_ filled;
  bool is_filled;
} Data__Channel_GetManyBySubscription_Outcoming_;

typedef struct Channel_GetManyBySubscription_Precedent_ {
  bool user_access_token___already_expired;
} Channel_GetManyBySubscription_Precedent_;

typedef struct UnifiedReport__Channel_GetManyBySubscription_Outcoming___Channel_GetManyBySubscription_Precedent_ {
  struct Data__Channel_GetManyBySubscription_Outcoming_ target;
  struct Channel_GetManyBySubscription_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Channel_GetManyBySubscription_Outcoming___Channel_GetManyBySubscription_Precedent_;

typedef struct Result__UnifiedReport__Channel_GetManyBySubscription_Outcoming___Channel_GetManyBySubscription_Precedent_ {
  struct UnifiedReport__Channel_GetManyBySubscription_Outcoming___Channel_GetManyBySubscription_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Channel_GetManyBySubscription_Outcoming___Channel_GetManyBySubscription_Precedent_;

typedef struct Result__UnifiedReport__Channel_GetManyBySubscription_Outcoming___Channel_GetManyBySubscription_Precedent_ Channel_GetManyBySubscription_Result;

typedef struct Channel_GetManyPublicByName_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct String_ channel__name;
  struct Option__String_ requery___channel__name;
} Channel_GetManyPublicByName_Incoming_;

typedef struct Channel_GetManyPublicByName_Data_ {
  struct String_ channel__name;
  struct String_ channel__linked_name;
  unsigned char channel__access_modifier;
  struct Option__String_ channel__cover_image_path;
  struct Option__String_ channel__background_image_path;
  struct ChannelTokenSigned_ channel_token_signed;
} Channel_GetManyPublicByName_Data_;

typedef struct Vec__Channel_GetManyPublicByName_Data_ {
  struct Channel_GetManyPublicByName_Data_ *pointer;
  size_t length;
} Vec__Channel_GetManyPublicByName_Data_;

typedef struct Channel_GetManyPublicByName_Outcoming_ {
  struct Vec__Channel_GetManyPublicByName_Data_ data_registry;
} Channel_GetManyPublicByName_Outcoming_;

typedef struct Data__Channel_GetManyPublicByName_Outcoming_ {
  struct Channel_GetManyPublicByName_Outcoming_ filled;
  bool is_filled;
} Data__Channel_GetManyPublicByName_Outcoming_;

typedef struct Channel_GetManyPublicByName_Precedent_ {
  bool user_access_token___already_expired;
} Channel_GetManyPublicByName_Precedent_;

typedef struct UnifiedReport__Channel_GetManyPublicByName_Outcoming___Channel_GetManyPublicByName_Precedent_ {
  struct Data__Channel_GetManyPublicByName_Outcoming_ target;
  struct Channel_GetManyPublicByName_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Channel_GetManyPublicByName_Outcoming___Channel_GetManyPublicByName_Precedent_;

typedef struct Result__UnifiedReport__Channel_GetManyPublicByName_Outcoming___Channel_GetManyPublicByName_Precedent_ {
  struct UnifiedReport__Channel_GetManyPublicByName_Outcoming___Channel_GetManyPublicByName_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Channel_GetManyPublicByName_Outcoming___Channel_GetManyPublicByName_Precedent_;

typedef struct Result__UnifiedReport__Channel_GetManyPublicByName_Outcoming___Channel_GetManyPublicByName_Precedent_ Channel_GetManyPublicByName_Result;

typedef struct Channel_GetOneById_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct ChannelTokenSigned_ channel_token_signed;
} Channel_GetOneById_Incoming_;

typedef struct Channel_GetOneById_Outcoming_ {
  struct String_ channel__name;
  struct String_ channel__linked_name;
  struct Option__String_ channel__description;
  unsigned char channel__access_modifier;
  unsigned char channel__visability_modifier;
  struct Option__String_ channel__cover_image_path;
  struct Option__String_ channel__background_image_path;
  unsigned int channel__subscribers_quantity;
} Channel_GetOneById_Outcoming_;

typedef struct Data__Channel_GetOneById_Outcoming_ {
  struct Channel_GetOneById_Outcoming_ filled;
  bool is_filled;
} Data__Channel_GetOneById_Outcoming_;

typedef struct Channel_GetOneById_Precedent_ {
  bool user_access_token___already_expired;
  bool channel___not_found;
  bool channel___is_close;
  bool channel_token___already_expired;
  bool channel_token___invalid_channel_owner_definition;
} Channel_GetOneById_Precedent_;

typedef struct UnifiedReport__Channel_GetOneById_Outcoming___Channel_GetOneById_Precedent_ {
  struct Data__Channel_GetOneById_Outcoming_ target;
  struct Channel_GetOneById_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Channel_GetOneById_Outcoming___Channel_GetOneById_Precedent_;

typedef struct Result__UnifiedReport__Channel_GetOneById_Outcoming___Channel_GetOneById_Precedent_ {
  struct UnifiedReport__Channel_GetOneById_Outcoming___Channel_GetOneById_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Channel_GetOneById_Outcoming___Channel_GetOneById_Precedent_;

typedef struct Result__UnifiedReport__Channel_GetOneById_Outcoming___Channel_GetOneById_Precedent_ Channel_GetOneById_Result;

typedef struct Channel_CheckNameForExisting_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct String_ channel__name;
} Channel_CheckNameForExisting_Incoming_;

typedef struct Channel_CheckNameForExisting_Outcoming_ {
  bool result;
} Channel_CheckNameForExisting_Outcoming_;

typedef struct Data__Channel_CheckNameForExisting_Outcoming_ {
  struct Channel_CheckNameForExisting_Outcoming_ filled;
  bool is_filled;
} Data__Channel_CheckNameForExisting_Outcoming_;

typedef struct Channel_CheckNameForExisting_Precedent_ {
  bool user_access_token___already_expired;
} Channel_CheckNameForExisting_Precedent_;

typedef struct UnifiedReport__Channel_CheckNameForExisting_Outcoming___Channel_CheckNameForExisting_Precedent_ {
  struct Data__Channel_CheckNameForExisting_Outcoming_ target;
  struct Channel_CheckNameForExisting_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Channel_CheckNameForExisting_Outcoming___Channel_CheckNameForExisting_Precedent_;

typedef struct Result__UnifiedReport__Channel_CheckNameForExisting_Outcoming___Channel_CheckNameForExisting_Precedent_ {
  struct UnifiedReport__Channel_CheckNameForExisting_Outcoming___Channel_CheckNameForExisting_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Channel_CheckNameForExisting_Outcoming___Channel_CheckNameForExisting_Precedent_;

typedef struct Result__UnifiedReport__Channel_CheckNameForExisting_Outcoming___Channel_CheckNameForExisting_Precedent_ Channel_CheckNameForExisting_Result;

typedef struct Channel_CheckLinkedNameForExisting_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct String_ channel__linked_name;
} Channel_CheckLinkedNameForExisting_Incoming_;

typedef struct Channel_CheckLinkedNameForExisting_Outcoming_ {
  bool result;
} Channel_CheckLinkedNameForExisting_Outcoming_;

typedef struct Data__Channel_CheckLinkedNameForExisting_Outcoming_ {
  struct Channel_CheckLinkedNameForExisting_Outcoming_ filled;
  bool is_filled;
} Data__Channel_CheckLinkedNameForExisting_Outcoming_;

typedef struct Channel_CheckLinkedNameForExisting_Precedent_ {
  bool user_access_token___already_expired;
} Channel_CheckLinkedNameForExisting_Precedent_;

typedef struct UnifiedReport__Channel_CheckLinkedNameForExisting_Outcoming___Channel_CheckLinkedNameForExisting_Precedent_ {
  struct Data__Channel_CheckLinkedNameForExisting_Outcoming_ target;
  struct Channel_CheckLinkedNameForExisting_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Channel_CheckLinkedNameForExisting_Outcoming___Channel_CheckLinkedNameForExisting_Precedent_;

typedef struct Result__UnifiedReport__Channel_CheckLinkedNameForExisting_Outcoming___Channel_CheckLinkedNameForExisting_Precedent_ {
  struct UnifiedReport__Channel_CheckLinkedNameForExisting_Outcoming___Channel_CheckLinkedNameForExisting_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Channel_CheckLinkedNameForExisting_Outcoming___Channel_CheckLinkedNameForExisting_Precedent_;

typedef struct Result__UnifiedReport__Channel_CheckLinkedNameForExisting_Outcoming___Channel_CheckLinkedNameForExisting_Precedent_ Channel_CheckLinkedNameForExisting_Result;

typedef struct Channel_Create_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct String_ channel__name;
  struct String_ channel__linked_name;
  unsigned char channel__access_modifier;
  unsigned char channel__visability_modifier;
} Channel_Create_Incoming_;

typedef struct Channel_Create_Outcoming_ {
  struct ChannelTokenSigned_ channel_token_signed;
} Channel_Create_Outcoming_;

typedef struct Data__Channel_Create_Outcoming_ {
  struct Channel_Create_Outcoming_ filled;
  bool is_filled;
} Data__Channel_Create_Outcoming_;

typedef struct Channel_Create_Precedent_ {
  bool user_access_token___already_expired;
  bool channel___name_already_exist;
  bool channel___linked_name_already_exist;
  bool quantity_limiter___exceeded_owned_channels_quantity;
  bool parallel_execution;
} Channel_Create_Precedent_;

typedef struct UnifiedReport__Channel_Create_Outcoming___Channel_Create_Precedent_ {
  struct Data__Channel_Create_Outcoming_ target;
  struct Channel_Create_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Channel_Create_Outcoming___Channel_Create_Precedent_;

typedef struct Result__UnifiedReport__Channel_Create_Outcoming___Channel_Create_Precedent_ {
  struct UnifiedReport__Channel_Create_Outcoming___Channel_Create_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Channel_Create_Outcoming___Channel_Create_Precedent_;

typedef struct Result__UnifiedReport__Channel_Create_Outcoming___Channel_Create_Precedent_ Channel_Create_Result;

typedef struct Channel_Delete_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct ChannelTokenSigned_ channel_token_signed;
} Channel_Delete_Incoming_;

typedef struct Channel_Delete_Precedent_ {
  bool user_access_token___already_expired;
  bool channel_token___already_expired;
  bool user___is_not_channel_owner;
  bool channel___not_found;
  bool parallel_execution;
} Channel_Delete_Precedent_;

typedef struct UnifiedReport__Void___Channel_Delete_Precedent_ {
  struct Data__Void_ target;
  struct Channel_Delete_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Void___Channel_Delete_Precedent_;

typedef struct Result__UnifiedReport__Void___Channel_Delete_Precedent_ {
  struct UnifiedReport__Void___Channel_Delete_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Void___Channel_Delete_Precedent_;

typedef struct Result__UnifiedReport__Void___Channel_Delete_Precedent_ Channel_Delete_Result;

typedef struct Channel_GetManyOwned_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
} Channel_GetManyOwned_Incoming_;

typedef struct Channel_GetManyOwned_Data_ {
  struct String_ channel__name;
  struct String_ channel__linked_name;
  unsigned char channel__access_modifier;
  unsigned char channel__visability_modifier;
  struct Option__String_ channel__cover_image_path;
  struct Option__String_ channel__background_image_path;
  struct ChannelTokenSigned_ channel_token_signed;
} Channel_GetManyOwned_Data_;

typedef struct Vec__Channel_GetManyOwned_Data_ {
  struct Channel_GetManyOwned_Data_ *pointer;
  size_t length;
} Vec__Channel_GetManyOwned_Data_;

typedef struct Channel_GetManyOwned_Outcoming_ {
  struct Vec__Channel_GetManyOwned_Data_ data_registry;
} Channel_GetManyOwned_Outcoming_;

typedef struct Data__Channel_GetManyOwned_Outcoming_ {
  struct Channel_GetManyOwned_Outcoming_ filled;
  bool is_filled;
} Data__Channel_GetManyOwned_Outcoming_;

typedef struct Channel_GetManyOwned_Precedent_ {
  bool user_access_token___already_expired;
} Channel_GetManyOwned_Precedent_;

typedef struct UnifiedReport__Channel_GetManyOwned_Outcoming___Channel_GetManyOwned_Precedent_ {
  struct Data__Channel_GetManyOwned_Outcoming_ target;
  struct Channel_GetManyOwned_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Channel_GetManyOwned_Outcoming___Channel_GetManyOwned_Precedent_;

typedef struct Result__UnifiedReport__Channel_GetManyOwned_Outcoming___Channel_GetManyOwned_Precedent_ {
  struct UnifiedReport__Channel_GetManyOwned_Outcoming___Channel_GetManyOwned_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Channel_GetManyOwned_Outcoming___Channel_GetManyOwned_Precedent_;

typedef struct Result__UnifiedReport__Channel_GetManyOwned_Outcoming___Channel_GetManyOwned_Precedent_ Channel_GetManyOwned_Result;

typedef struct Channel_RefreshChannelToken_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct ChannelTokenSigned_ channel_token_signed;
} Channel_RefreshChannelToken_Incoming_;

typedef struct Channel_RefreshChannelToken_Outcoming_ {
  struct ChannelTokenSigned_ channel_token_signed;
} Channel_RefreshChannelToken_Outcoming_;

typedef struct Data__Channel_RefreshChannelToken_Outcoming_ {
  struct Channel_RefreshChannelToken_Outcoming_ filled;
  bool is_filled;
} Data__Channel_RefreshChannelToken_Outcoming_;

typedef struct Channel_RefreshChannelToken_Precedent_ {
  bool user_access_token___already_expired;
  bool channel___name_already_exist;
  bool channel___not_found;
} Channel_RefreshChannelToken_Precedent_;

typedef struct UnifiedReport__Channel_RefreshChannelToken_Outcoming___Channel_RefreshChannelToken_Precedent_ {
  struct Data__Channel_RefreshChannelToken_Outcoming_ target;
  struct Channel_RefreshChannelToken_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Channel_RefreshChannelToken_Outcoming___Channel_RefreshChannelToken_Precedent_;

typedef struct Result__UnifiedReport__Channel_RefreshChannelToken_Outcoming___Channel_RefreshChannelToken_Precedent_ {
  struct UnifiedReport__Channel_RefreshChannelToken_Outcoming___Channel_RefreshChannelToken_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Channel_RefreshChannelToken_Outcoming___Channel_RefreshChannelToken_Precedent_;

typedef struct Result__UnifiedReport__Channel_RefreshChannelToken_Outcoming___Channel_RefreshChannelToken_Precedent_ Channel_RefreshChannelToken_Result;

typedef struct ChannelSubscription_Create_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct ChannelTokenSigned_ channel_token_signed;
} ChannelSubscription_Create_Incoming_;

typedef struct ChannelSubscription_Create_Outcoming_ {
  struct ChannelTokenSigned_ channel_token_signed;
} ChannelSubscription_Create_Outcoming_;

typedef struct Data__ChannelSubscription_Create_Outcoming_ {
  struct ChannelSubscription_Create_Outcoming_ filled;
  bool is_filled;
} Data__ChannelSubscription_Create_Outcoming_;

typedef struct ChannelSubscription_Create_Precedent_ {
  bool user_access_token___already_expired;
  bool channel_token___already_expired;
  bool channel___not_found;
  bool channel___user_is_owner;
  bool channel_subscription___already_exist;
} ChannelSubscription_Create_Precedent_;

typedef struct UnifiedReport__ChannelSubscription_Create_Outcoming___ChannelSubscription_Create_Precedent_ {
  struct Data__ChannelSubscription_Create_Outcoming_ target;
  struct ChannelSubscription_Create_Precedent_ precedent;
  bool is_target;
} UnifiedReport__ChannelSubscription_Create_Outcoming___ChannelSubscription_Create_Precedent_;

typedef struct Result__UnifiedReport__ChannelSubscription_Create_Outcoming___ChannelSubscription_Create_Precedent_ {
  struct UnifiedReport__ChannelSubscription_Create_Outcoming___ChannelSubscription_Create_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__ChannelSubscription_Create_Outcoming___ChannelSubscription_Create_Precedent_;

typedef struct Result__UnifiedReport__ChannelSubscription_Create_Outcoming___ChannelSubscription_Create_Precedent_ ChannelSubscription_Create_Result;

typedef struct ChannelSubscription_Delete_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct ChannelTokenSigned_ channel_token_signed;
} ChannelSubscription_Delete_Incoming_;

typedef struct ChannelSubscription_Delete_Outcoming_ {
  struct ChannelTokenSigned_ channel_token_signed;
} ChannelSubscription_Delete_Outcoming_;

typedef struct Data__ChannelSubscription_Delete_Outcoming_ {
  struct ChannelSubscription_Delete_Outcoming_ filled;
  bool is_filled;
} Data__ChannelSubscription_Delete_Outcoming_;

typedef struct ChannelSubscription_Delete_Precedent_ {
  bool user_access_token___already_expired;
  bool channel_token___already_expired;
  bool channel___user_is_owner;
  bool channel_subscription___not_found;
  bool channel___not_found;
} ChannelSubscription_Delete_Precedent_;

typedef struct UnifiedReport__ChannelSubscription_Delete_Outcoming___ChannelSubscription_Delete_Precedent_ {
  struct Data__ChannelSubscription_Delete_Outcoming_ target;
  struct ChannelSubscription_Delete_Precedent_ precedent;
  bool is_target;
} UnifiedReport__ChannelSubscription_Delete_Outcoming___ChannelSubscription_Delete_Precedent_;

typedef struct Result__UnifiedReport__ChannelSubscription_Delete_Outcoming___ChannelSubscription_Delete_Precedent_ {
  struct UnifiedReport__ChannelSubscription_Delete_Outcoming___ChannelSubscription_Delete_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__ChannelSubscription_Delete_Outcoming___ChannelSubscription_Delete_Precedent_;

typedef struct Result__UnifiedReport__ChannelSubscription_Delete_Outcoming___ChannelSubscription_Delete_Precedent_ ChannelSubscription_Delete_Result;

typedef struct ChannelPublication1_GetMany_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct ChannelTokenSigned_ channel_token_signed;
  long channel_publication1__created_at;
} ChannelPublication1_GetMany_Incoming_;

typedef struct Vec__String_ {
  struct String_ *pointer;
  size_t length;
} Vec__String_;

typedef struct ChannelPublication1TokenSigned_ {
  long channel_publication1__id;
  long channel_publication1_token__obfuscation_value;
  long channel_publication1_token__expires_at;
  struct Vec__c_uchar signature;
} ChannelPublication1TokenSigned_;

typedef struct ChannelPublication1_GetMany_Data_ {
  struct Vec__String_ channel_publication1__images_pathes;
  struct Option__String_ channel_publication1__text;
  unsigned int channel_publication1__commentaries_quantity;
  unsigned int channel_publication1__marks_quantity;
  unsigned int channel_publication1__view_quantity;
  long channel_publication1__created_at;
  struct Option__c_long channel_publication1_mark__created_at;
  struct ChannelPublication1TokenSigned_ channel_publication1_token_signed;
} ChannelPublication1_GetMany_Data_;

typedef struct Vec__ChannelPublication1_GetMany_Data_ {
  struct ChannelPublication1_GetMany_Data_ *pointer;
  size_t length;
} Vec__ChannelPublication1_GetMany_Data_;

typedef struct ChannelPublication1_GetMany_Outcoming_ {
  struct Vec__ChannelPublication1_GetMany_Data_ data_registry;
} ChannelPublication1_GetMany_Outcoming_;

typedef struct Data__ChannelPublication1_GetMany_Outcoming_ {
  struct ChannelPublication1_GetMany_Outcoming_ filled;
  bool is_filled;
} Data__ChannelPublication1_GetMany_Outcoming_;

typedef struct ChannelPublication1_GetMany_Precedent_ {
  bool user_access_token___already_expired;
  bool channel_token___already_expired;
  bool channel_token___invalid_channel_owner_definition;
  bool channel___not_found;
  bool channel___is_close;
} ChannelPublication1_GetMany_Precedent_;

typedef struct UnifiedReport__ChannelPublication1_GetMany_Outcoming___ChannelPublication1_GetMany_Precedent_ {
  struct Data__ChannelPublication1_GetMany_Outcoming_ target;
  struct ChannelPublication1_GetMany_Precedent_ precedent;
  bool is_target;
} UnifiedReport__ChannelPublication1_GetMany_Outcoming___ChannelPublication1_GetMany_Precedent_;

typedef struct Result__UnifiedReport__ChannelPublication1_GetMany_Outcoming___ChannelPublication1_GetMany_Precedent_ {
  struct UnifiedReport__ChannelPublication1_GetMany_Outcoming___ChannelPublication1_GetMany_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__ChannelPublication1_GetMany_Outcoming___ChannelPublication1_GetMany_Precedent_;

typedef struct Result__UnifiedReport__ChannelPublication1_GetMany_Outcoming___ChannelPublication1_GetMany_Precedent_ ChannelPublication1_GetMany_Result;

typedef struct ChannelPublication1_Create_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct ChannelTokenSigned_ channel_token_signed;
  struct Vec__String_ channel_publication1__images_pathes;
  struct Option__String_ channel_publication1__text;
} ChannelPublication1_Create_Incoming_;

typedef struct ChannelPublication1_Create_Outcoming_ {
  long channel_publication1__created_at;
  struct ChannelPublication1TokenSigned_ channel_publication1_token_signed;
} ChannelPublication1_Create_Outcoming_;

typedef struct Data__ChannelPublication1_Create_Outcoming_ {
  struct ChannelPublication1_Create_Outcoming_ filled;
  bool is_filled;
} Data__ChannelPublication1_Create_Outcoming_;

typedef struct ChannelPublication1_Create_Precedent_ {
  bool user_access_token___already_expired;
  bool channel_token___already_expired;
  bool user___is_not_channel_owner;
  bool parallel_execution;
} ChannelPublication1_Create_Precedent_;

typedef struct UnifiedReport__ChannelPublication1_Create_Outcoming___ChannelPublication1_Create_Precedent_ {
  struct Data__ChannelPublication1_Create_Outcoming_ target;
  struct ChannelPublication1_Create_Precedent_ precedent;
  bool is_target;
} UnifiedReport__ChannelPublication1_Create_Outcoming___ChannelPublication1_Create_Precedent_;

typedef struct Result__UnifiedReport__ChannelPublication1_Create_Outcoming___ChannelPublication1_Create_Precedent_ {
  struct UnifiedReport__ChannelPublication1_Create_Outcoming___ChannelPublication1_Create_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__ChannelPublication1_Create_Outcoming___ChannelPublication1_Create_Precedent_;

typedef struct Result__UnifiedReport__ChannelPublication1_Create_Outcoming___ChannelPublication1_Create_Precedent_ ChannelPublication1_Create_Result;

typedef struct ChannelPublication1_Delete_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct ChannelTokenSigned_ channel_token_signed;
  struct ChannelPublication1TokenSigned_ channel_publication1_token_signed;
} ChannelPublication1_Delete_Incoming_;

typedef struct ChannelPublication1_Delete_Precedent_ {
  bool user_access_token___already_expired;
  bool channel_token___already_expired;
  bool channel_publication1_token___already_expired;
  bool user___is_not_channel_owner;
  bool channel_publication1___not_found;
} ChannelPublication1_Delete_Precedent_;

typedef struct UnifiedReport__Void___ChannelPublication1_Delete_Precedent_ {
  struct Data__Void_ target;
  struct ChannelPublication1_Delete_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Void___ChannelPublication1_Delete_Precedent_;

typedef struct Result__UnifiedReport__Void___ChannelPublication1_Delete_Precedent_ {
  struct UnifiedReport__Void___ChannelPublication1_Delete_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Void___ChannelPublication1_Delete_Precedent_;

typedef struct Result__UnifiedReport__Void___ChannelPublication1_Delete_Precedent_ ChannelPublication1_Delete_Result;

typedef struct ChannelPublication1Mark_Create_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct ChannelTokenSigned_ channel_token_signed;
  struct ChannelPublication1TokenSigned_ channel_publication1_token_signed;
} ChannelPublication1Mark_Create_Incoming_;

typedef struct ChannelPublication1Mark_Create_Precedent_ {
  bool user_access_token___already_expired;
  bool channel_token___already_expired;
  bool channel_publication1_token___already_expired;
  bool channel_publication1_mark___already_exist;
  bool channel_publication1__not_found;
} ChannelPublication1Mark_Create_Precedent_;

typedef struct UnifiedReport__Void___ChannelPublication1Mark_Create_Precedent_ {
  struct Data__Void_ target;
  struct ChannelPublication1Mark_Create_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Void___ChannelPublication1Mark_Create_Precedent_;

typedef struct Result__UnifiedReport__Void___ChannelPublication1Mark_Create_Precedent_ {
  struct UnifiedReport__Void___ChannelPublication1Mark_Create_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Void___ChannelPublication1Mark_Create_Precedent_;

typedef struct Result__UnifiedReport__Void___ChannelPublication1Mark_Create_Precedent_ ChannelPublication1Mark_Create_Result;

typedef struct ChannelPublication1Mark_Delete_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct ChannelTokenSigned_ channel_token_signed;
  struct ChannelPublication1TokenSigned_ channel_publication1_token_signed;
} ChannelPublication1Mark_Delete_Incoming_;

typedef struct ChannelPublication1Mark_Delete_Precedent_ {
  bool user_access_token___already_expired;
  bool channel_token___already_expired;
  bool channel_publication1_token___already_expired;
  bool channel_publication1_mark___not_found;
  bool channel_publication1__not_found;
} ChannelPublication1Mark_Delete_Precedent_;

typedef struct UnifiedReport__Void___ChannelPublication1Mark_Delete_Precedent_ {
  struct Data__Void_ target;
  struct ChannelPublication1Mark_Delete_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Void___ChannelPublication1Mark_Delete_Precedent_;

typedef struct Result__UnifiedReport__Void___ChannelPublication1Mark_Delete_Precedent_ {
  struct UnifiedReport__Void___ChannelPublication1Mark_Delete_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Void___ChannelPublication1Mark_Delete_Precedent_;

typedef struct Result__UnifiedReport__Void___ChannelPublication1Mark_Delete_Precedent_ ChannelPublication1Mark_Delete_Result;

typedef struct ChannelPublication1View_Create_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct ChannelTokenSigned_ channel_token_signed;
  struct ChannelPublication1TokenSigned_ channel_publication1_token_signed;
} ChannelPublication1View_Create_Incoming_;

typedef struct ChannelPublication1View_Create_Precedent_ {
  bool user_access_token___already_expired;
  bool channel_token___already_expired;
  bool channel_publication1_token___already_expired;
} ChannelPublication1View_Create_Precedent_;

typedef struct UnifiedReport__Void___ChannelPublication1View_Create_Precedent_ {
  struct Data__Void_ target;
  struct ChannelPublication1View_Create_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Void___ChannelPublication1View_Create_Precedent_;

typedef struct Result__UnifiedReport__Void___ChannelPublication1View_Create_Precedent_ {
  struct UnifiedReport__Void___ChannelPublication1View_Create_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Void___ChannelPublication1View_Create_Precedent_;

typedef struct Result__UnifiedReport__Void___ChannelPublication1View_Create_Precedent_ ChannelPublication1View_Create_Result;

typedef struct ChannelPublication1Commentary_Create_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct ChannelTokenSigned_ channel_token_signed;
  struct ChannelPublication1TokenSigned_ channel_publication1_token_signed;
  struct String_ channel_publication1_commentary__text;
} ChannelPublication1Commentary_Create_Incoming_;

typedef struct ChannelPublication1CommentaryTokenSigned_ {
  long channel_publication1_commentary__id;
  long channel_publication1_commentary_token__obfuscation_value;
  long channel_publication1_commentary_token__expires_at;
  long channel_publication1_commentary_token__commentary_author;
  struct Vec__c_uchar signature;
} ChannelPublication1CommentaryTokenSigned_;

typedef struct ChannelPublication1Commentary_Create_Outcoming_ {
  struct ChannelPublication1CommentaryTokenSigned_ channel_publication1_commentary_token_signed;
  long channel_publication1_commentary__created_at;
} ChannelPublication1Commentary_Create_Outcoming_;

typedef struct Data__ChannelPublication1Commentary_Create_Outcoming_ {
  struct ChannelPublication1Commentary_Create_Outcoming_ filled;
  bool is_filled;
} Data__ChannelPublication1Commentary_Create_Outcoming_;

typedef struct ChannelPublication1Commentary_Create_Precedent_ {
  bool user_access_token___already_expired;
  bool channel_token___already_expired;
  bool channel_publication1_token___already_expired;
  bool parallel_execution;
} ChannelPublication1Commentary_Create_Precedent_;

typedef struct UnifiedReport__ChannelPublication1Commentary_Create_Outcoming___ChannelPublication1Commentary_Create_Precedent_ {
  struct Data__ChannelPublication1Commentary_Create_Outcoming_ target;
  struct ChannelPublication1Commentary_Create_Precedent_ precedent;
  bool is_target;
} UnifiedReport__ChannelPublication1Commentary_Create_Outcoming___ChannelPublication1Commentary_Create_Precedent_;

typedef struct Result__UnifiedReport__ChannelPublication1Commentary_Create_Outcoming___ChannelPublication1Commentary_Create_Precedent_ {
  struct UnifiedReport__ChannelPublication1Commentary_Create_Outcoming___ChannelPublication1Commentary_Create_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__ChannelPublication1Commentary_Create_Outcoming___ChannelPublication1Commentary_Create_Precedent_;

typedef struct Result__UnifiedReport__ChannelPublication1Commentary_Create_Outcoming___ChannelPublication1Commentary_Create_Precedent_ ChannelPublication1Commentary_Create_Result;

typedef struct ChannelPublication1Commentary_Delete_Incoming_ {
  struct UserAccessTokenSigned_ user_access_token_signed;
  struct ChannelTokenSigned_ channel_token_signed;
  struct ChannelPublication1TokenSigned_ channel_publication1_token_signed;
  struct ChannelPublication1CommentaryTokenSigned_ channel_publication1_commentary_token_signed;
} ChannelPublication1Commentary_Delete_Incoming_;

typedef struct ChannelPublication1Commentary_Delete_Precedent_ {
  bool user_access_token___already_expired;
  bool channel_token___already_expired;
  bool channel_publication1_token___already_expired;
  bool channel_publication1_commentary_token___already_expired;
  bool user___is_not_commentary_author;
  bool channel_publication1_commentary___not_found;
} ChannelPublication1Commentary_Delete_Precedent_;

typedef struct UnifiedReport__Void___ChannelPublication1Commentary_Delete_Precedent_ {
  struct Data__Void_ target;
  struct ChannelPublication1Commentary_Delete_Precedent_ precedent;
  bool is_target;
} UnifiedReport__Void___ChannelPublication1Commentary_Delete_Precedent_;

typedef struct Result__UnifiedReport__Void___ChannelPublication1Commentary_Delete_Precedent_ {
  struct UnifiedReport__Void___ChannelPublication1Commentary_Delete_Precedent_ data;
  bool is_data;
} Result__UnifiedReport__Void___ChannelPublication1Commentary_Delete_Precedent_;

typedef struct Result__UnifiedReport__Void___ChannelPublication1Commentary_Delete_Precedent_ ChannelPublication1Commentary_Delete_Result;

struct Result__Vec__c_uchar user__authorize_by_first_step__serialize_allocate(struct User_AuthorizeByFirstStep_Incoming_ incoming);

void user__authorize_by_first_step__serialize_deallocate(struct Result__Vec__c_uchar result);

User_AuthorizeByFirstStep_Result user__authorize_by_first_step__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void user__authorize_by_first_step__deserialize_deallocate(User_AuthorizeByFirstStep_Result _result);

struct Result__Vec__c_uchar user__authorize_by_last_step__serialize_allocate(struct User_AuthorizeByLastStep_Incoming_ incoming);

void user__authorize_by_last_step__serialize_deallocate(struct Result__Vec__c_uchar result);

User_AuthorizeByLastStep_Result user__authorize_by_last_step__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void user__authorize_by_last_step__deserialize_deallocate(User_AuthorizeByLastStep_Result result);

struct Result__Vec__c_uchar user__check_email_for_existing__serialize_allocate(struct User_CheckEmailForExisting_Incoming_ incoming);

void user__check_email_for_existing__serialize_deallocate(struct Result__Vec__c_uchar result);

User_CheckEmailForExisting_Result user__check_email_for_existing__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void user__check_email_for_existing__deserialize_deallocate(User_CheckEmailForExisting_Result _result);

struct Result__Vec__c_uchar user__check_nickname_for_existing__serialize_allocate(struct User_CheckNicknameForExisting_Incoming_ incoming);

void user__check_nickname_for_existing__serialize_deallocate(struct Result__Vec__c_uchar result);

User_CheckNicknameForExisting_Result user__check_nickname_for_existing__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void user__check_nickname_for_existing__deserialize_deallocate(User_CheckNicknameForExisting_Result _result);

struct Result__Vec__c_uchar user__deauthorize_from_all_devices__serialize_allocate(struct User_DeauthorizeFromAllDevices_Incoming_ incoming);

void user__deauthorize_from_all_devices__serialize_deallocate(struct Result__Vec__c_uchar result);

User_DeauthorizeFromAllDevices_Result user__deauthorize_from_all_devices__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void user__deauthorize_from_all_devices__deserialize_deallocate(User_DeauthorizeFromAllDevices_Result _result);

struct Result__Vec__c_uchar user__deauthorize_from_one_device__serialize_allocate(struct User_DeauthorizeFromOneDevice_Incoming_ incoming);

void user__deauthorize_from_one_device__serialize_deallocate(struct Result__Vec__c_uchar result);

User_DeauthorizeFromOneDevice_Result user__deauthorize_from_one_device__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void user__deauthorize_from_one_device__deserialize_deallocate(User_DeauthorizeFromOneDevice_Result _result);

struct Result__Vec__c_uchar user__refresh_access_token__serialize_allocate(struct User_RefreshAccessToken_Incoming_ incoming);

void user__refresh_access_token__serialize_deallocate(struct Result__Vec__c_uchar result);

User_RefreshAccessToken_Result user__refresh_access_token__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void user__refresh_access_token__deserialize_deallocate(User_RefreshAccessToken_Result result);

struct Result__Vec__c_uchar user__register_by_first_step__serialize_allocate(struct User_RegisterByFirstStep_Incoming_ incoming);

void user__register_by_first_step__serialize_deallocate(struct Result__Vec__c_uchar result);

User_RegisterByFirstStep_Result user__register_by_first_step__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void user__register_by_first_step__deserialize_deallocate(User_RegisterByFirstStep_Result _result);

struct Result__Vec__c_uchar user__register_by_second_step__serialize_allocate(struct User_RegisterBySecondStep_Incoming_ incoming);

void user__register_by_second_step__serialize_deallocate(struct Result__Vec__c_uchar result);

User_RegisterBySecondStep_Result user__register_by_second_step__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void user__register_by_second_step__deserialize_deallocate(User_RegisterBySecondStep_Result _result);

struct Result__Vec__c_uchar user__register_by_last_step__serialize_allocate(struct User_RegisterByLastStep_Incoming_ incoming);

void user__register_by_last_step__serialize_deallocate(struct Result__Vec__c_uchar result);

User_RegisterByLastStep_Result user__register_by_last_step__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void user__register_by_last_step__deserialize_deallocate(User_RegisterByLastStep_Result result);

struct Result__Vec__c_uchar user__reset_password_by_first_step__serialize_allocate(struct User_ResetPasswordByFirstStep_Incoming_ incoming);

void user__reset_password_by_first_step__serialize_deallocate(struct Result__Vec__c_uchar result);

User_ResetPasswordByFirstStep_Result user__reset_password_by_first_step__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void user__reset_password_by_first_step__deserialize_deallocate(User_ResetPasswordByFirstStep_Result _result);

struct Result__Vec__c_uchar user__reset_password_by_second_step__serialize_allocate(struct User_ResetPasswordBySecondStep_Incoming_ incoming);

void user__reset_password_by_second_step__serialize_deallocate(struct Result__Vec__c_uchar result);

User_ResetPasswordBySecondStep_Result user__reset_password_by_second_step__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void user__reset_password_by_second_step__deserialize_deallocate(User_ResetPasswordBySecondStep_Result _result);

struct Result__Vec__c_uchar user__reset_password_by_last_step__serialize_allocate(struct User_ResetPasswordByLastStep_Incoming_ incoming);

void user__reset_password_by_last_step__serialize_deallocate(struct Result__Vec__c_uchar result);

User_ResetPasswordByLastStep_Result user__reset_password_by_last_step__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void user__reset_password_by_last_step__deserialize_deallocate(User_ResetPasswordByLastStep_Result _result);

struct Result__Vec__c_uchar user__send_email_for_register__serialize_allocate(struct User_SendEmailForRegister_Incoming_ incoming);

void user__send_email_for_register__serialize_deallocate(struct Result__Vec__c_uchar result);

User_SendEmailForRegister_Result user__send_email_for_register__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void user__send_email_for_register__deserialize_deallocate(User_SendEmailForRegister_Result _result);

struct Result__Vec__c_uchar user__send_email_for_authorize__serialize_allocate(struct User_SendEmailForAuthorize_Incoming_ incoming);

void user__send_email_for_authorize__serialize_deallocate(struct Result__Vec__c_uchar result);

User_SendEmailForAuthorize_Result user__send_email_for_authorize__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void user__send_email_for_authorize__deserialize_deallocate(User_SendEmailForAuthorize_Result _result);

struct Result__Vec__c_uchar user__send_email_for_reset_password__serialize_allocate(struct User_SendEmailForResetPassword_Incoming_ incoming);

void user__send_email_for_reset_password__serialize_deallocate(struct Result__Vec__c_uchar result);

User_SendEmailForResetPassword_Result user__send_email_for_reset_password__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void user__send_email_for_reset_password__deserialize_deallocate(User_SendEmailForResetPassword_Result _result);

struct Result__Vec__c_uchar channel__get_many_by_name_in_subscriptions__serialize_allocate(struct Channel_GetManyByNameInSubscriptions_Incoming_ incoming);

void channel__get_many_by_name_in_subscriptions__serialize_deallocate(struct Result__Vec__c_uchar result);

Channel_GetManyByNameInSubscriptions_Result channel__get_many_by_name_in_subscriptions__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel__get_many_by_name_in_subscriptions__deserialize_deallocate(Channel_GetManyByNameInSubscriptions_Result result);

struct Result__Vec__c_uchar channel__get_many_by_subscription__serialize_allocate(struct Channel_GetManyBySubscription_Incoming_ incoming);

void channel__get_many_by_subscription__serialize_deallocate(struct Result__Vec__c_uchar result);

Channel_GetManyBySubscription_Result channel__get_many_by_subscription__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel__get_many_by_subscription__deserialize_deallocate(Channel_GetManyBySubscription_Result result);

struct Result__Vec__c_uchar channel__get_many_public_by_name__serialize_allocate(struct Channel_GetManyPublicByName_Incoming_ incoming);

void channel__get_many_public_by_name__serialize_deallocate(struct Result__Vec__c_uchar result);

Channel_GetManyPublicByName_Result channel__get_many_public_by_name__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel__get_many_public_by_name__deserialize_deallocate(Channel_GetManyPublicByName_Result result);

struct Result__Vec__c_uchar channel__get_one_by_id__serialize_allocate(struct Channel_GetOneById_Incoming_ incoming);

void channel__get_one_by_id__serialize_deallocate(struct Result__Vec__c_uchar result);

Channel_GetOneById_Result channel__get_one_by_id__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel__get_one_by_id__deserialize_deallocate(Channel_GetOneById_Result result);

struct Result__Vec__c_uchar channel__check_name_for_existing__serialize_allocate(struct Channel_CheckNameForExisting_Incoming_ incoming);

void channel__check_name_for_existing__serialize_deallocate(struct Result__Vec__c_uchar result);

Channel_CheckNameForExisting_Result channel__check_name_for_existing__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel__check_name_for_existing__deserialize_deallocate(Channel_CheckNameForExisting_Result _result);

struct Result__Vec__c_uchar channel__check_linked_name_for_existing__serialize_allocate(struct Channel_CheckLinkedNameForExisting_Incoming_ incoming);

void channel__check_linked_name_for_existing__serialize_deallocate(struct Result__Vec__c_uchar result);

Channel_CheckLinkedNameForExisting_Result channel__check_linked_name_for_existing__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel__check_linked_name_for_existing__deserialize_deallocate(Channel_CheckLinkedNameForExisting_Result _result);

struct Result__Vec__c_uchar channel__create__serialize_allocate(struct Channel_Create_Incoming_ incoming);

void channel__create__serialize_deallocate(struct Result__Vec__c_uchar result);

Channel_Create_Result channel__create__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel__create__deserialize_deallocate(Channel_Create_Result result);

struct Result__Vec__c_uchar channel__delete__serialize_allocate(struct Channel_Delete_Incoming_ incoming);

void channel__delete__serialize_deallocate(struct Result__Vec__c_uchar result);

Channel_Delete_Result channel__delete__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel__delete__deserialize_deallocate(Channel_Delete_Result _result);

struct Result__Vec__c_uchar channel__get_many_owned__serialize_allocate(struct Channel_GetManyOwned_Incoming_ incoming);

void channel__get_many_owned__serialize_deallocate(struct Result__Vec__c_uchar result);

Channel_GetManyOwned_Result channel__get_many_owned__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel__get_many_owned__deserialize_deallocate(Channel_GetManyOwned_Result result);

struct Result__Vec__c_uchar channel__refresh_channel_token__serialize_allocate(struct Channel_RefreshChannelToken_Incoming_ incoming);

void channel__refresh_channel_token__serialize_deallocate(struct Result__Vec__c_uchar result);

Channel_RefreshChannelToken_Result channel__refresh_channel_token__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel__refresh_channel_token__deserialize_deallocate(Channel_RefreshChannelToken_Result result);

struct Result__Vec__c_uchar channel_subscription__create__serialize_allocate(struct ChannelSubscription_Create_Incoming_ incoming);

void channel_subscription__create__serialize_deallocate(struct Result__Vec__c_uchar result);

ChannelSubscription_Create_Result channel_subscription__create__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel_subscription__create__deserialize_deallocate(ChannelSubscription_Create_Result result);

struct Result__Vec__c_uchar channel_subscription__delete__serialize_allocate(struct ChannelSubscription_Delete_Incoming_ incoming);

void channel_subscription__delete__serialize_deallocate(struct Result__Vec__c_uchar result);

ChannelSubscription_Delete_Result channel_subscription__delete__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel_subscription__delete__deserialize_deallocate(ChannelSubscription_Delete_Result result);

struct Result__Vec__c_uchar channel_publication1__get_many__serialize_allocate(struct ChannelPublication1_GetMany_Incoming_ incoming);

void channel_publication1__get_many__serialize_deallocate(struct Result__Vec__c_uchar result);

ChannelPublication1_GetMany_Result channel_publication1__get_many__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel_publication1__get_many__deserialize_deallocate(ChannelPublication1_GetMany_Result result);

struct Result__Vec__c_uchar channel_publication1__create__serialize_allocate(struct ChannelPublication1_Create_Incoming_ incoming);

void channel_publication1__create__serialize_deallocate(struct Result__Vec__c_uchar result);

ChannelPublication1_Create_Result channel_publication1__create__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel_publication1__create__deserialize_deallocate(ChannelPublication1_Create_Result result);

struct Result__Vec__c_uchar channel_publication1__delete__serialize_allocate(struct ChannelPublication1_Delete_Incoming_ incoming);

void channel_publication1__delete__serialize_deallocate(struct Result__Vec__c_uchar result);

ChannelPublication1_Delete_Result channel_publication1__delete__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel_publication1__delete__deserialize_deallocate(ChannelPublication1_Delete_Result _result);

struct Result__Vec__c_uchar channel_publication1_mark__create__serialize_allocate(struct ChannelPublication1Mark_Create_Incoming_ incoming);

void channel_publication1_mark__create__serialize_deallocate(struct Result__Vec__c_uchar result);

ChannelPublication1Mark_Create_Result channel_publication1_mark__create__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel_publication1_mark__create__deserialize_deallocate(ChannelPublication1Mark_Create_Result _result);

struct Result__Vec__c_uchar channel_publication1_mark__delete__serialize_allocate(struct ChannelPublication1Mark_Delete_Incoming_ incoming);

void channel_publication1_mark__delete__serialize_deallocate(struct Result__Vec__c_uchar result);

ChannelPublication1Mark_Delete_Result channel_publication1_mark__delete__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel_publication1_mark__delete__deserialize_deallocate(ChannelPublication1Mark_Delete_Result _result);

struct Result__Vec__c_uchar channel_publication1_view__create__serialize_allocate(struct ChannelPublication1View_Create_Incoming_ incoming);

void channel_publication1_view__create__serialize_deallocate(struct Result__Vec__c_uchar result);

ChannelPublication1View_Create_Result channel_publication1_view__create__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel_publication1_view__create__deserialize_deallocate(ChannelPublication1View_Create_Result _result);

struct Result__Vec__c_uchar channel_publication1_commentary__create__serialize_allocate(struct ChannelPublication1Commentary_Create_Incoming_ incoming);

void channel_publication1_commentary__create__serialize_deallocate(struct Result__Vec__c_uchar result);

ChannelPublication1Commentary_Create_Result channel_publication1_commentary__create__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel_publication1_commentary__create__deserialize_deallocate(ChannelPublication1Commentary_Create_Result result);

struct Result__Vec__c_uchar channel_publication1_commentary__delete__serialize_allocate(struct ChannelPublication1Commentary_Delete_Incoming_ incoming);

void channel_publication1_commentary__delete__serialize_deallocate(struct Result__Vec__c_uchar result);

ChannelPublication1Commentary_Delete_Result channel_publication1_commentary__delete__deserialize_allocate(struct Vec__c_uchar vector_of_bytes);

void channel_publication1_commentary__delete__deserialize_deallocate(ChannelPublication1Commentary_Delete_Result _result);
