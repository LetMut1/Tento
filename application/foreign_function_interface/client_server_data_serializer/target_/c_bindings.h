#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct CVector_c_uchar {
  unsigned char *pointer;
  size_t length;
} CVector_c_uchar;

typedef struct Result__CVector_c_uchar {
  struct CVector_c_uchar data;
  bool is_data;
} Result__CVector_c_uchar;

typedef struct String_ {
  char *pointer;
} String_;

typedef struct UserAuthorization_AuthorizeByFirstStep_Incoming {
  struct String_ user_device__id;
  struct String_ user__email___or___user__nickname;
  struct String_ user__password;
} UserAuthorization_AuthorizeByFirstStep_Incoming;

typedef struct UserAuthorization_AuthorizeByFirstStep_Outcoming {
  long user__id;
  bool verification_message_sent;
  long user_authorization_token__can_be_resent_from;
  unsigned char user_authorization_token__wrong_enter_tries_quantity;
  unsigned char user_authorization_token__wrong_enter_tries_quantity_limit;
} UserAuthorization_AuthorizeByFirstStep_Outcoming;

typedef struct Data__UserAuthorization_AuthorizeByFirstStep_Outcoming {
  struct UserAuthorization_AuthorizeByFirstStep_Outcoming filled;
  bool is_filled;
} Data__UserAuthorization_AuthorizeByFirstStep_Outcoming;

typedef struct UserAuthorization_AuthorizeByFirstStep_Precedent {
  bool user___wrong_email_or_nickname_or_password;
  bool parallel_execution;
} UserAuthorization_AuthorizeByFirstStep_Precedent;

typedef struct UnifiedReport__UserAuthorization_AuthorizeByFirstStep_Outcoming__UserAuthorization_AuthorizeByFirstStep_Precedent {
  struct Data__UserAuthorization_AuthorizeByFirstStep_Outcoming target;
  struct UserAuthorization_AuthorizeByFirstStep_Precedent precedent;
  bool is_target;
} UnifiedReport__UserAuthorization_AuthorizeByFirstStep_Outcoming__UserAuthorization_AuthorizeByFirstStep_Precedent;

typedef struct Result__UnifiedReport__UserAuthorization_AuthorizeByFirstStep_Outcoming__UserAuthorization_AuthorizeByFirstStep_Precedent {
  struct UnifiedReport__UserAuthorization_AuthorizeByFirstStep_Outcoming__UserAuthorization_AuthorizeByFirstStep_Precedent data;
  bool is_data;
} Result__UnifiedReport__UserAuthorization_AuthorizeByFirstStep_Outcoming__UserAuthorization_AuthorizeByFirstStep_Precedent;

typedef struct Result__UnifiedReport__UserAuthorization_AuthorizeByFirstStep_Outcoming__UserAuthorization_AuthorizeByFirstStep_Precedent UserAuthorization_AuthorizeByFirstStep_Result;

typedef struct UserAuthorization_AuthorizeByLastStep_Incoming {
  long user__id;
  struct String_ user_device__id;
  struct String_ user_authorization_token__value;
} UserAuthorization_AuthorizeByLastStep_Incoming;

typedef struct UserAccessTokenSigned {
  long user__id;
  struct String_ user_device__id;
  long user_access_token__obfuscation_value;
  long user_access_token__expires_at;
  struct CVector_c_uchar signature;
} UserAccessTokenSigned;

typedef struct UserAccessRefreshTokenSigned {
  long user_access_refresh_token__expires_at;
  struct CVector_c_uchar signature;
} UserAccessRefreshTokenSigned;

typedef struct UserAuthorization_AuthorizeByLastStep_Outcoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct UserAccessRefreshTokenSigned user_access_refresh_token_signed;
} UserAuthorization_AuthorizeByLastStep_Outcoming;

typedef struct Data__UserAuthorization_AuthorizeByLastStep_Outcoming {
  struct UserAuthorization_AuthorizeByLastStep_Outcoming filled;
  bool is_filled;
} Data__UserAuthorization_AuthorizeByLastStep_Outcoming;

typedef struct UserAuthorizationToken__WrongValue {
  bool is_exist;
  unsigned char user_authorization_token__wrong_enter_tries_quantity;
} UserAuthorizationToken__WrongValue;

typedef struct UserAuthorization_AuthorizeByLastStep_Precedent {
  bool user_authorization_token___not_found;
  bool user_authorization_token___already_expired;
  struct UserAuthorizationToken__WrongValue user_authorization_token___wrong_value;
  bool user___not_found;
  bool parallel_execution;
} UserAuthorization_AuthorizeByLastStep_Precedent;

typedef struct UnifiedReport__UserAuthorization_AuthorizeByLastStep_Outcoming__UserAuthorization_AuthorizeByLastStep_Precedent {
  struct Data__UserAuthorization_AuthorizeByLastStep_Outcoming target;
  struct UserAuthorization_AuthorizeByLastStep_Precedent precedent;
  bool is_target;
} UnifiedReport__UserAuthorization_AuthorizeByLastStep_Outcoming__UserAuthorization_AuthorizeByLastStep_Precedent;

typedef struct Result__UnifiedReport__UserAuthorization_AuthorizeByLastStep_Outcoming__UserAuthorization_AuthorizeByLastStep_Precedent {
  struct UnifiedReport__UserAuthorization_AuthorizeByLastStep_Outcoming__UserAuthorization_AuthorizeByLastStep_Precedent data;
  bool is_data;
} Result__UnifiedReport__UserAuthorization_AuthorizeByLastStep_Outcoming__UserAuthorization_AuthorizeByLastStep_Precedent;

typedef struct Result__UnifiedReport__UserAuthorization_AuthorizeByLastStep_Outcoming__UserAuthorization_AuthorizeByLastStep_Precedent UserAuthorization_AuthorizeByLastStep_Result;

typedef struct UserAuthorization_CheckEmailForExisting_Incoming {
  struct String_ user__email;
} UserAuthorization_CheckEmailForExisting_Incoming;

typedef struct UserAuthorization_CheckEmailForExisting_Outcoming {
  bool result;
} UserAuthorization_CheckEmailForExisting_Outcoming;

typedef struct Data__UserAuthorization_CheckEmailForExisting_Outcoming {
  struct UserAuthorization_CheckEmailForExisting_Outcoming filled;
  bool is_filled;
} Data__UserAuthorization_CheckEmailForExisting_Outcoming;

typedef struct CVoid {
  bool _inner;
} CVoid;

typedef struct UnifiedReport__UserAuthorization_CheckEmailForExisting_Outcoming__CVoid {
  struct Data__UserAuthorization_CheckEmailForExisting_Outcoming target;
  struct CVoid precedent;
  bool is_target;
} UnifiedReport__UserAuthorization_CheckEmailForExisting_Outcoming__CVoid;

typedef struct Result__UnifiedReport__UserAuthorization_CheckEmailForExisting_Outcoming__CVoid {
  struct UnifiedReport__UserAuthorization_CheckEmailForExisting_Outcoming__CVoid data;
  bool is_data;
} Result__UnifiedReport__UserAuthorization_CheckEmailForExisting_Outcoming__CVoid;

typedef struct Result__UnifiedReport__UserAuthorization_CheckEmailForExisting_Outcoming__CVoid UserAuthorization_CheckEmailForExisting_Result;

typedef struct UserAuthorization_CheckNicknameForExisting_Incoming {
  struct String_ user__nickname;
} UserAuthorization_CheckNicknameForExisting_Incoming;

typedef struct UserAuthorization_CheckNicknameForExisting_Outcoming {
  bool result;
} UserAuthorization_CheckNicknameForExisting_Outcoming;

typedef struct Data__UserAuthorization_CheckNicknameForExisting_Outcoming {
  struct UserAuthorization_CheckNicknameForExisting_Outcoming filled;
  bool is_filled;
} Data__UserAuthorization_CheckNicknameForExisting_Outcoming;

typedef struct UnifiedReport__UserAuthorization_CheckNicknameForExisting_Outcoming__CVoid {
  struct Data__UserAuthorization_CheckNicknameForExisting_Outcoming target;
  struct CVoid precedent;
  bool is_target;
} UnifiedReport__UserAuthorization_CheckNicknameForExisting_Outcoming__CVoid;

typedef struct Result__UnifiedReport__UserAuthorization_CheckNicknameForExisting_Outcoming__CVoid {
  struct UnifiedReport__UserAuthorization_CheckNicknameForExisting_Outcoming__CVoid data;
  bool is_data;
} Result__UnifiedReport__UserAuthorization_CheckNicknameForExisting_Outcoming__CVoid;

typedef struct Result__UnifiedReport__UserAuthorization_CheckNicknameForExisting_Outcoming__CVoid UserAuthorization_CheckNicknameForExisting_Result;

typedef struct UserAuthorization_DeauthorizeFromAllDevices_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
} UserAuthorization_DeauthorizeFromAllDevices_Incoming;

typedef struct Data__CVoid {
  struct CVoid filled;
  bool is_filled;
} Data__CVoid;

typedef struct UserAuthorization_DeauthorizeFromAllDevices_Precedent {
  bool user_access_token___already_expired;
} UserAuthorization_DeauthorizeFromAllDevices_Precedent;

typedef struct UnifiedReport__CVoid__UserAuthorization_DeauthorizeFromAllDevices_Precedent {
  struct Data__CVoid target;
  struct UserAuthorization_DeauthorizeFromAllDevices_Precedent precedent;
  bool is_target;
} UnifiedReport__CVoid__UserAuthorization_DeauthorizeFromAllDevices_Precedent;

typedef struct Result__UnifiedReport__CVoid__UserAuthorization_DeauthorizeFromAllDevices_Precedent {
  struct UnifiedReport__CVoid__UserAuthorization_DeauthorizeFromAllDevices_Precedent data;
  bool is_data;
} Result__UnifiedReport__CVoid__UserAuthorization_DeauthorizeFromAllDevices_Precedent;

typedef struct Result__UnifiedReport__CVoid__UserAuthorization_DeauthorizeFromAllDevices_Precedent UserAuthorization_DeauthorizeFromAllDevices_Result;

typedef struct UserAuthorization_DeauthorizeFromOneDevice_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
} UserAuthorization_DeauthorizeFromOneDevice_Incoming;

typedef struct UserAuthorization_DeauthorizeFromOneDevice_Precedent {
  bool user_access_token___already_expired;
} UserAuthorization_DeauthorizeFromOneDevice_Precedent;

typedef struct UnifiedReport__CVoid__UserAuthorization_DeauthorizeFromOneDevice_Precedent {
  struct Data__CVoid target;
  struct UserAuthorization_DeauthorizeFromOneDevice_Precedent precedent;
  bool is_target;
} UnifiedReport__CVoid__UserAuthorization_DeauthorizeFromOneDevice_Precedent;

typedef struct Result__UnifiedReport__CVoid__UserAuthorization_DeauthorizeFromOneDevice_Precedent {
  struct UnifiedReport__CVoid__UserAuthorization_DeauthorizeFromOneDevice_Precedent data;
  bool is_data;
} Result__UnifiedReport__CVoid__UserAuthorization_DeauthorizeFromOneDevice_Precedent;

typedef struct Result__UnifiedReport__CVoid__UserAuthorization_DeauthorizeFromOneDevice_Precedent UserAuthorization_DeauthorizeFromOneDevice_Result;

typedef struct UserAuthorization_RefreshAccessToken_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct UserAccessRefreshTokenSigned user_access_refresh_token_signed;
} UserAuthorization_RefreshAccessToken_Incoming;

typedef struct UserAuthorization_RefreshAccessToken_Outcoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct UserAccessRefreshTokenSigned user_access_refresh_token_signed;
} UserAuthorization_RefreshAccessToken_Outcoming;

typedef struct Data__UserAuthorization_RefreshAccessToken_Outcoming {
  struct UserAuthorization_RefreshAccessToken_Outcoming filled;
  bool is_filled;
} Data__UserAuthorization_RefreshAccessToken_Outcoming;

typedef struct UserAuthorization_RefreshAccessToken_Precedent {
  bool user_access_refresh_token___not_found;
  bool user_access_refresh_token___already_expired;
  bool parallel_execution;
} UserAuthorization_RefreshAccessToken_Precedent;

typedef struct UnifiedReport__UserAuthorization_RefreshAccessToken_Outcoming__UserAuthorization_RefreshAccessToken_Precedent {
  struct Data__UserAuthorization_RefreshAccessToken_Outcoming target;
  struct UserAuthorization_RefreshAccessToken_Precedent precedent;
  bool is_target;
} UnifiedReport__UserAuthorization_RefreshAccessToken_Outcoming__UserAuthorization_RefreshAccessToken_Precedent;

typedef struct Result__UnifiedReport__UserAuthorization_RefreshAccessToken_Outcoming__UserAuthorization_RefreshAccessToken_Precedent {
  struct UnifiedReport__UserAuthorization_RefreshAccessToken_Outcoming__UserAuthorization_RefreshAccessToken_Precedent data;
  bool is_data;
} Result__UnifiedReport__UserAuthorization_RefreshAccessToken_Outcoming__UserAuthorization_RefreshAccessToken_Precedent;

typedef struct Result__UnifiedReport__UserAuthorization_RefreshAccessToken_Outcoming__UserAuthorization_RefreshAccessToken_Precedent UserAuthorization_RefreshAccessToken_Result;

typedef struct UserAuthorization_RegisterByFirstStep_Incoming {
  struct String_ user__email;
  struct String_ user_device__id;
} UserAuthorization_RegisterByFirstStep_Incoming;

typedef struct UserAuthorization_RegisterByFirstStep_Outcoming {
  bool verification_message_sent;
  long user_registration_token__can_be_resent_from;
  unsigned char user_registration_token__wrong_enter_tries_quantity;
  unsigned char user_registration_token__wrong_enter_tries_quantity_limit;
} UserAuthorization_RegisterByFirstStep_Outcoming;

typedef struct Data__UserAuthorization_RegisterByFirstStep_Outcoming {
  struct UserAuthorization_RegisterByFirstStep_Outcoming filled;
  bool is_filled;
} Data__UserAuthorization_RegisterByFirstStep_Outcoming;

typedef struct UserAuthorization_RegisterByFirstStep_Precedent {
  bool user___email_already_exist;
  bool parallel_execution;
} UserAuthorization_RegisterByFirstStep_Precedent;

typedef struct UnifiedReport__UserAuthorization_RegisterByFirstStep_Outcoming__UserAuthorization_RegisterByFirstStep_Precedent {
  struct Data__UserAuthorization_RegisterByFirstStep_Outcoming target;
  struct UserAuthorization_RegisterByFirstStep_Precedent precedent;
  bool is_target;
} UnifiedReport__UserAuthorization_RegisterByFirstStep_Outcoming__UserAuthorization_RegisterByFirstStep_Precedent;

typedef struct Result__UnifiedReport__UserAuthorization_RegisterByFirstStep_Outcoming__UserAuthorization_RegisterByFirstStep_Precedent {
  struct UnifiedReport__UserAuthorization_RegisterByFirstStep_Outcoming__UserAuthorization_RegisterByFirstStep_Precedent data;
  bool is_data;
} Result__UnifiedReport__UserAuthorization_RegisterByFirstStep_Outcoming__UserAuthorization_RegisterByFirstStep_Precedent;

typedef struct Result__UnifiedReport__UserAuthorization_RegisterByFirstStep_Outcoming__UserAuthorization_RegisterByFirstStep_Precedent UserAuthorization_RegisterByFirstStep_Result;

typedef struct UserAuthorization_RegisterBySecondStep_Incoming {
  struct String_ user__email;
  struct String_ user_device__id;
  struct String_ user_registration_token__value;
} UserAuthorization_RegisterBySecondStep_Incoming;

typedef struct UserRegistrationToken__WrongValue {
  bool is_exist;
  unsigned char user_registration_token__wrong_enter_tries_quantity;
} UserRegistrationToken__WrongValue;

typedef struct UserAuthorization_RegisterBySecondStep_Precedent {
  bool user_registration_token___not_found;
  bool user_registration_token___already_expired;
  bool user_registration_token___already_approved;
  struct UserRegistrationToken__WrongValue user_registration_token___wrong_value;
  bool parallel_execution;
} UserAuthorization_RegisterBySecondStep_Precedent;

typedef struct UnifiedReport__CVoid__UserAuthorization_RegisterBySecondStep_Precedent {
  struct Data__CVoid target;
  struct UserAuthorization_RegisterBySecondStep_Precedent precedent;
  bool is_target;
} UnifiedReport__CVoid__UserAuthorization_RegisterBySecondStep_Precedent;

typedef struct Result__UnifiedReport__CVoid__UserAuthorization_RegisterBySecondStep_Precedent {
  struct UnifiedReport__CVoid__UserAuthorization_RegisterBySecondStep_Precedent data;
  bool is_data;
} Result__UnifiedReport__CVoid__UserAuthorization_RegisterBySecondStep_Precedent;

typedef struct Result__UnifiedReport__CVoid__UserAuthorization_RegisterBySecondStep_Precedent UserAuthorization_RegisterBySecondStep_Result;

typedef struct UserAuthorization_RegisterByLastStep_Incoming {
  struct String_ user_device__id;
  struct String_ user__nickname;
  struct String_ user__password;
  struct String_ user__email;
  struct String_ user_registration_token__value;
} UserAuthorization_RegisterByLastStep_Incoming;

typedef struct UserAuthorization_RegisterByLastStep_Outcoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct UserAccessRefreshTokenSigned user_access_refresh_token_signed;
} UserAuthorization_RegisterByLastStep_Outcoming;

typedef struct Data__UserAuthorization_RegisterByLastStep_Outcoming {
  struct UserAuthorization_RegisterByLastStep_Outcoming filled;
  bool is_filled;
} Data__UserAuthorization_RegisterByLastStep_Outcoming;

typedef struct UserAuthorization_RegisterByLastStep_Precedent {
  bool user___nickname_already_exist;
  bool user___email_already_exist;
  bool user_registration_token___not_found;
  bool user_registration_token___already_expired;
  bool user_registration_token___is_not_approved;
  bool user_registration_token___wrong_value;
  bool parallel_execution;
} UserAuthorization_RegisterByLastStep_Precedent;

typedef struct UnifiedReport__UserAuthorization_RegisterByLastStep_Outcoming__UserAuthorization_RegisterByLastStep_Precedent {
  struct Data__UserAuthorization_RegisterByLastStep_Outcoming target;
  struct UserAuthorization_RegisterByLastStep_Precedent precedent;
  bool is_target;
} UnifiedReport__UserAuthorization_RegisterByLastStep_Outcoming__UserAuthorization_RegisterByLastStep_Precedent;

typedef struct Result__UnifiedReport__UserAuthorization_RegisterByLastStep_Outcoming__UserAuthorization_RegisterByLastStep_Precedent {
  struct UnifiedReport__UserAuthorization_RegisterByLastStep_Outcoming__UserAuthorization_RegisterByLastStep_Precedent data;
  bool is_data;
} Result__UnifiedReport__UserAuthorization_RegisterByLastStep_Outcoming__UserAuthorization_RegisterByLastStep_Precedent;

typedef struct Result__UnifiedReport__UserAuthorization_RegisterByLastStep_Outcoming__UserAuthorization_RegisterByLastStep_Precedent UserAuthorization_RegisterByLastStep_Result;

typedef struct UserAuthorization_ResetPasswordByFirstStep_Incoming {
  struct String_ user__email;
  struct String_ user_device__id;
} UserAuthorization_ResetPasswordByFirstStep_Incoming;

typedef struct UserAuthorization_ResetPasswordByFirstStep_Outcoming {
  long user__id;
  bool verification_message_sent;
  long user_reset_password_token__can_be_resent_from;
  unsigned char user_reset_password_token__wrong_enter_tries_quantity;
  unsigned char user_reset_password_token__wrong_enter_tries_quantity_limit;
} UserAuthorization_ResetPasswordByFirstStep_Outcoming;

typedef struct Data__UserAuthorization_ResetPasswordByFirstStep_Outcoming {
  struct UserAuthorization_ResetPasswordByFirstStep_Outcoming filled;
  bool is_filled;
} Data__UserAuthorization_ResetPasswordByFirstStep_Outcoming;

typedef struct UserAuthorization_ResetPasswordByFirstStep_Precedent {
  bool user___not_found;
  bool parallel_execution;
} UserAuthorization_ResetPasswordByFirstStep_Precedent;

typedef struct UnifiedReport__UserAuthorization_ResetPasswordByFirstStep_Outcoming__UserAuthorization_ResetPasswordByFirstStep_Precedent {
  struct Data__UserAuthorization_ResetPasswordByFirstStep_Outcoming target;
  struct UserAuthorization_ResetPasswordByFirstStep_Precedent precedent;
  bool is_target;
} UnifiedReport__UserAuthorization_ResetPasswordByFirstStep_Outcoming__UserAuthorization_ResetPasswordByFirstStep_Precedent;

typedef struct Result__UnifiedReport__UserAuthorization_ResetPasswordByFirstStep_Outcoming__UserAuthorization_ResetPasswordByFirstStep_Precedent {
  struct UnifiedReport__UserAuthorization_ResetPasswordByFirstStep_Outcoming__UserAuthorization_ResetPasswordByFirstStep_Precedent data;
  bool is_data;
} Result__UnifiedReport__UserAuthorization_ResetPasswordByFirstStep_Outcoming__UserAuthorization_ResetPasswordByFirstStep_Precedent;

typedef struct Result__UnifiedReport__UserAuthorization_ResetPasswordByFirstStep_Outcoming__UserAuthorization_ResetPasswordByFirstStep_Precedent UserAuthorization_ResetPasswordByFirstStep_Result;

typedef struct UserAuthorization_ResetPasswordBySecondStep_Incoming {
  long user__id;
  struct String_ user_device__id;
  struct String_ user_reset_password_token__value;
} UserAuthorization_ResetPasswordBySecondStep_Incoming;

typedef struct UserResetPasswordToken__WrongValue {
  bool is_exist;
  unsigned char user_reset_password_token__wrong_enter_tries_quantity;
} UserResetPasswordToken__WrongValue;

typedef struct UserAuthorization_ResetPasswordBySecondStep_Precedent {
  bool user_reset_password_token___not_found;
  bool user_reset_password_token___already_expired;
  bool user_reset_password_token___already_approved;
  struct UserResetPasswordToken__WrongValue user_reset_password_token___wrong_value;
  bool parallel_execution;
} UserAuthorization_ResetPasswordBySecondStep_Precedent;

typedef struct UnifiedReport__CVoid__UserAuthorization_ResetPasswordBySecondStep_Precedent {
  struct Data__CVoid target;
  struct UserAuthorization_ResetPasswordBySecondStep_Precedent precedent;
  bool is_target;
} UnifiedReport__CVoid__UserAuthorization_ResetPasswordBySecondStep_Precedent;

typedef struct Result__UnifiedReport__CVoid__UserAuthorization_ResetPasswordBySecondStep_Precedent {
  struct UnifiedReport__CVoid__UserAuthorization_ResetPasswordBySecondStep_Precedent data;
  bool is_data;
} Result__UnifiedReport__CVoid__UserAuthorization_ResetPasswordBySecondStep_Precedent;

typedef struct Result__UnifiedReport__CVoid__UserAuthorization_ResetPasswordBySecondStep_Precedent UserAuthorization_ResetPasswordBySecondStep_Result;

typedef struct UserAuthorization_ResetPasswordByLastStep_Incoming {
  long user__id;
  struct String_ user_device__id;
  struct String_ user__password;
  struct String_ user_reset_password_token__value;
} UserAuthorization_ResetPasswordByLastStep_Incoming;

typedef struct UserAuthorization_ResetPasswordByLastStep_Precedent {
  bool user___not_found;
  bool user_reset_password_token___not_found;
  bool user_reset_password_token___already_expired;
  bool user_reset_password_token___is_not_approved;
  bool user_reset_password_token___wrong_value;
  bool parallel_execution;
} UserAuthorization_ResetPasswordByLastStep_Precedent;

typedef struct UnifiedReport__CVoid__UserAuthorization_ResetPasswordByLastStep_Precedent {
  struct Data__CVoid target;
  struct UserAuthorization_ResetPasswordByLastStep_Precedent precedent;
  bool is_target;
} UnifiedReport__CVoid__UserAuthorization_ResetPasswordByLastStep_Precedent;

typedef struct Result__UnifiedReport__CVoid__UserAuthorization_ResetPasswordByLastStep_Precedent {
  struct UnifiedReport__CVoid__UserAuthorization_ResetPasswordByLastStep_Precedent data;
  bool is_data;
} Result__UnifiedReport__CVoid__UserAuthorization_ResetPasswordByLastStep_Precedent;

typedef struct Result__UnifiedReport__CVoid__UserAuthorization_ResetPasswordByLastStep_Precedent UserAuthorization_ResetPasswordByLastStep_Result;

typedef struct UserAuthorization_SendEmailForRegister_Incoming {
  struct String_ user__email;
  struct String_ user_device__id;
} UserAuthorization_SendEmailForRegister_Incoming;

typedef struct UserAuthorization_SendEmailForRegister_Outcoming {
  long user_registration_token__can_be_resent_from;
} UserAuthorization_SendEmailForRegister_Outcoming;

typedef struct Data__UserAuthorization_SendEmailForRegister_Outcoming {
  struct UserAuthorization_SendEmailForRegister_Outcoming filled;
  bool is_filled;
} Data__UserAuthorization_SendEmailForRegister_Outcoming;

typedef struct UserAuthorization_SendEmailForRegister_Precedent {
  bool user_registration_token___not_found;
  bool user_registration_token___already_expired;
  bool user_registration_token___already_approved;
  bool user_registration_token___time_to_resend_has_not_come;
  bool parallel_execution;
} UserAuthorization_SendEmailForRegister_Precedent;

typedef struct UnifiedReport__UserAuthorization_SendEmailForRegister_Outcoming__UserAuthorization_SendEmailForRegister_Precedent {
  struct Data__UserAuthorization_SendEmailForRegister_Outcoming target;
  struct UserAuthorization_SendEmailForRegister_Precedent precedent;
  bool is_target;
} UnifiedReport__UserAuthorization_SendEmailForRegister_Outcoming__UserAuthorization_SendEmailForRegister_Precedent;

typedef struct Result__UnifiedReport__UserAuthorization_SendEmailForRegister_Outcoming__UserAuthorization_SendEmailForRegister_Precedent {
  struct UnifiedReport__UserAuthorization_SendEmailForRegister_Outcoming__UserAuthorization_SendEmailForRegister_Precedent data;
  bool is_data;
} Result__UnifiedReport__UserAuthorization_SendEmailForRegister_Outcoming__UserAuthorization_SendEmailForRegister_Precedent;

typedef struct Result__UnifiedReport__UserAuthorization_SendEmailForRegister_Outcoming__UserAuthorization_SendEmailForRegister_Precedent UserAuthorization_SendEmailForRegister_Result;

typedef struct UserAuthorization_SendEmailForAuthorize_Incoming {
  struct String_ user_device__id;
  long user__id;
} UserAuthorization_SendEmailForAuthorize_Incoming;

typedef struct UserAuthorization_SendEmailForAuthorize_Outcoming {
  long user_authorization_token__can_be_resent_from;
} UserAuthorization_SendEmailForAuthorize_Outcoming;

typedef struct Data__UserAuthorization_SendEmailForAuthorize_Outcoming {
  struct UserAuthorization_SendEmailForAuthorize_Outcoming filled;
  bool is_filled;
} Data__UserAuthorization_SendEmailForAuthorize_Outcoming;

typedef struct UserAuthorization_SendEmailForAuthorize_Precedent {
  bool user___not_found;
  bool user_authorization_token___not_found;
  bool user_authorization_token___already_expired;
  bool user_authorization_token___time_to_resend_has_not_come;
  bool parallel_execution;
} UserAuthorization_SendEmailForAuthorize_Precedent;

typedef struct UnifiedReport__UserAuthorization_SendEmailForAuthorize_Outcoming__UserAuthorization_SendEmailForAuthorize_Precedent {
  struct Data__UserAuthorization_SendEmailForAuthorize_Outcoming target;
  struct UserAuthorization_SendEmailForAuthorize_Precedent precedent;
  bool is_target;
} UnifiedReport__UserAuthorization_SendEmailForAuthorize_Outcoming__UserAuthorization_SendEmailForAuthorize_Precedent;

typedef struct Result__UnifiedReport__UserAuthorization_SendEmailForAuthorize_Outcoming__UserAuthorization_SendEmailForAuthorize_Precedent {
  struct UnifiedReport__UserAuthorization_SendEmailForAuthorize_Outcoming__UserAuthorization_SendEmailForAuthorize_Precedent data;
  bool is_data;
} Result__UnifiedReport__UserAuthorization_SendEmailForAuthorize_Outcoming__UserAuthorization_SendEmailForAuthorize_Precedent;

typedef struct Result__UnifiedReport__UserAuthorization_SendEmailForAuthorize_Outcoming__UserAuthorization_SendEmailForAuthorize_Precedent UserAuthorization_SendEmailForAuthorize_Result;

typedef struct UserAuthorization_SendEmailForResetPassword_Incoming {
  long user__id;
  struct String_ user_device__id;
} UserAuthorization_SendEmailForResetPassword_Incoming;

typedef struct UserAuthorization_SendEmailForResetPassword_Outcoming {
  long user_resep_password_token_can_be_resent_from;
} UserAuthorization_SendEmailForResetPassword_Outcoming;

typedef struct Data__UserAuthorization_SendEmailForResetPassword_Outcoming {
  struct UserAuthorization_SendEmailForResetPassword_Outcoming filled;
  bool is_filled;
} Data__UserAuthorization_SendEmailForResetPassword_Outcoming;

typedef struct UserAuthorization_SendEmailForResetPassword_Precedent {
  bool user___not_found;
  bool user_reset_password_token___not_found;
  bool user_reset_password_token___already_expired;
  bool user_reset_password_token___already_approved;
  bool user_reset_password_token___time_to_resend_has_not_come;
  bool parallel_execution;
} UserAuthorization_SendEmailForResetPassword_Precedent;

typedef struct UnifiedReport__UserAuthorization_SendEmailForResetPassword_Outcoming__UserAuthorization_SendEmailForResetPassword_Precedent {
  struct Data__UserAuthorization_SendEmailForResetPassword_Outcoming target;
  struct UserAuthorization_SendEmailForResetPassword_Precedent precedent;
  bool is_target;
} UnifiedReport__UserAuthorization_SendEmailForResetPassword_Outcoming__UserAuthorization_SendEmailForResetPassword_Precedent;

typedef struct Result__UnifiedReport__UserAuthorization_SendEmailForResetPassword_Outcoming__UserAuthorization_SendEmailForResetPassword_Precedent {
  struct UnifiedReport__UserAuthorization_SendEmailForResetPassword_Outcoming__UserAuthorization_SendEmailForResetPassword_Precedent data;
  bool is_data;
} Result__UnifiedReport__UserAuthorization_SendEmailForResetPassword_Outcoming__UserAuthorization_SendEmailForResetPassword_Precedent;

typedef struct Result__UnifiedReport__UserAuthorization_SendEmailForResetPassword_Outcoming__UserAuthorization_SendEmailForResetPassword_Precedent UserAuthorization_SendEmailForResetPassword_Result;

typedef struct Option__String_ {
  struct String_ data;
  bool is_data;
} Option__String_;

typedef struct Channel_GetManyByNameInSubscriptions_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct String_ channel__name;
  struct Option__String_ requery___channel__name;
  unsigned char limit;
} Channel_GetManyByNameInSubscriptions_Incoming;

typedef struct ChannelTokenSigned {
  long channel__id;
  long channel_token__obfuscation_value;
  long channel_token__expires_at;
  bool channel_token__is_user_the_channel_subscriber;
  bool channel_token__is_user_the_channel_owner;
  struct CVector_c_uchar signature;
} ChannelTokenSigned;

typedef struct Channel_GetManyByNameInSubscriptions_Data {
  struct String_ channel__name;
  struct String_ channel__linked_name;
  unsigned char channel__access_modifier;
  unsigned char channel__visability_modifier;
  struct Option__String_ channel__cover_image_path;
  struct Option__String_ channel__background_image_path;
  struct ChannelTokenSigned channel_token_signed;
} Channel_GetManyByNameInSubscriptions_Data;

typedef struct CVector_Channel_GetManyByNameInSubscriptions_Data {
  struct Channel_GetManyByNameInSubscriptions_Data *pointer;
  size_t length;
} CVector_Channel_GetManyByNameInSubscriptions_Data;

typedef struct Channel_GetManyByNameInSubscriptions_Outcoming {
  struct CVector_Channel_GetManyByNameInSubscriptions_Data data_registry;
} Channel_GetManyByNameInSubscriptions_Outcoming;

typedef struct Data__Channel_GetManyByNameInSubscriptions_Outcoming {
  struct Channel_GetManyByNameInSubscriptions_Outcoming filled;
  bool is_filled;
} Data__Channel_GetManyByNameInSubscriptions_Outcoming;

typedef struct Channel_GetManyByNameInSubscriptions_Precedent {
  bool user_access_token___already_expired;
} Channel_GetManyByNameInSubscriptions_Precedent;

typedef struct UnifiedReport__Channel_GetManyByNameInSubscriptions_Outcoming__Channel_GetManyByNameInSubscriptions_Precedent {
  struct Data__Channel_GetManyByNameInSubscriptions_Outcoming target;
  struct Channel_GetManyByNameInSubscriptions_Precedent precedent;
  bool is_target;
} UnifiedReport__Channel_GetManyByNameInSubscriptions_Outcoming__Channel_GetManyByNameInSubscriptions_Precedent;

typedef struct Result__UnifiedReport__Channel_GetManyByNameInSubscriptions_Outcoming__Channel_GetManyByNameInSubscriptions_Precedent {
  struct UnifiedReport__Channel_GetManyByNameInSubscriptions_Outcoming__Channel_GetManyByNameInSubscriptions_Precedent data;
  bool is_data;
} Result__UnifiedReport__Channel_GetManyByNameInSubscriptions_Outcoming__Channel_GetManyByNameInSubscriptions_Precedent;

typedef struct Result__UnifiedReport__Channel_GetManyByNameInSubscriptions_Outcoming__Channel_GetManyByNameInSubscriptions_Precedent Channel_GetManyByNameInSubscriptions_Result;

typedef struct Option__c_long {
  long data;
  bool is_data;
} Option__c_long;

typedef struct Channel_GetManyBySubscription_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct Option__c_long requery___channel__id;
  unsigned char limit;
} Channel_GetManyBySubscription_Incoming;

typedef struct Channel_GetManyBySubscription_Data {
  struct String_ channel__name;
  struct String_ channel__linked_name;
  unsigned char channel__access_modifier;
  unsigned char channel__visability_modifier;
  struct Option__String_ channel__cover_image_path;
  struct Option__String_ channel__background_image_path;
  struct ChannelTokenSigned channel_token_signed;
} Channel_GetManyBySubscription_Data;

typedef struct CVector_Channel_GetManyBySubscription_Data {
  struct Channel_GetManyBySubscription_Data *pointer;
  size_t length;
} CVector_Channel_GetManyBySubscription_Data;

typedef struct Channel_GetManyBySubscription_Outcoming {
  struct CVector_Channel_GetManyBySubscription_Data data_registry;
} Channel_GetManyBySubscription_Outcoming;

typedef struct Data__Channel_GetManyBySubscription_Outcoming {
  struct Channel_GetManyBySubscription_Outcoming filled;
  bool is_filled;
} Data__Channel_GetManyBySubscription_Outcoming;

typedef struct Channel_GetManyBySubscription_Precedent {
  bool user_access_token___already_expired;
} Channel_GetManyBySubscription_Precedent;

typedef struct UnifiedReport__Channel_GetManyBySubscription_Outcoming__Channel_GetManyBySubscription_Precedent {
  struct Data__Channel_GetManyBySubscription_Outcoming target;
  struct Channel_GetManyBySubscription_Precedent precedent;
  bool is_target;
} UnifiedReport__Channel_GetManyBySubscription_Outcoming__Channel_GetManyBySubscription_Precedent;

typedef struct Result__UnifiedReport__Channel_GetManyBySubscription_Outcoming__Channel_GetManyBySubscription_Precedent {
  struct UnifiedReport__Channel_GetManyBySubscription_Outcoming__Channel_GetManyBySubscription_Precedent data;
  bool is_data;
} Result__UnifiedReport__Channel_GetManyBySubscription_Outcoming__Channel_GetManyBySubscription_Precedent;

typedef struct Result__UnifiedReport__Channel_GetManyBySubscription_Outcoming__Channel_GetManyBySubscription_Precedent Channel_GetManyBySubscription_Result;

typedef struct Channel_GetManyPublicByName_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct String_ channel__name;
  struct Option__String_ requery___channel__name;
  unsigned char limit;
} Channel_GetManyPublicByName_Incoming;

typedef struct Channel_GetManyPublicByName_Data {
  struct String_ channel__name;
  struct String_ channel__linked_name;
  unsigned char channel__access_modifier;
  struct Option__String_ channel__cover_image_path;
  struct Option__String_ channel__background_image_path;
  struct ChannelTokenSigned channel_token_signed;
} Channel_GetManyPublicByName_Data;

typedef struct CVector_Channel_GetManyPublicByName_Data {
  struct Channel_GetManyPublicByName_Data *pointer;
  size_t length;
} CVector_Channel_GetManyPublicByName_Data;

typedef struct Channel_GetManyPublicByName_Outcoming {
  struct CVector_Channel_GetManyPublicByName_Data data_registry;
} Channel_GetManyPublicByName_Outcoming;

typedef struct Data__Channel_GetManyPublicByName_Outcoming {
  struct Channel_GetManyPublicByName_Outcoming filled;
  bool is_filled;
} Data__Channel_GetManyPublicByName_Outcoming;

typedef struct Channel_GetManyPublicByName_Precedent {
  bool user_access_token___already_expired;
} Channel_GetManyPublicByName_Precedent;

typedef struct UnifiedReport__Channel_GetManyPublicByName_Outcoming__Channel_GetManyPublicByName_Precedent {
  struct Data__Channel_GetManyPublicByName_Outcoming target;
  struct Channel_GetManyPublicByName_Precedent precedent;
  bool is_target;
} UnifiedReport__Channel_GetManyPublicByName_Outcoming__Channel_GetManyPublicByName_Precedent;

typedef struct Result__UnifiedReport__Channel_GetManyPublicByName_Outcoming__Channel_GetManyPublicByName_Precedent {
  struct UnifiedReport__Channel_GetManyPublicByName_Outcoming__Channel_GetManyPublicByName_Precedent data;
  bool is_data;
} Result__UnifiedReport__Channel_GetManyPublicByName_Outcoming__Channel_GetManyPublicByName_Precedent;

typedef struct Result__UnifiedReport__Channel_GetManyPublicByName_Outcoming__Channel_GetManyPublicByName_Precedent Channel_GetManyPublicByName_Result;

typedef struct Channel_GetOneById_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct ChannelTokenSigned channel_token_signed;
} Channel_GetOneById_Incoming;

typedef struct Channel_GetOneById_Outcoming {
  struct String_ channel__name;
  struct String_ channel__linked_name;
  struct Option__String_ channel__description;
  unsigned char channel__access_modifier;
  unsigned char channel__visability_modifier;
  struct Option__String_ channel__cover_image_path;
  struct Option__String_ channel__background_image_path;
  unsigned int channel__subscribers_quantity;
} Channel_GetOneById_Outcoming;

typedef struct Data__Channel_GetOneById_Outcoming {
  struct Channel_GetOneById_Outcoming filled;
  bool is_filled;
} Data__Channel_GetOneById_Outcoming;

typedef struct Channel_GetOneById_Precedent {
  bool user_access_token___already_expired;
  bool channel___not_found;
  bool channel___is_close;
  bool channel_token___already_expired;
  bool channel_token___invalid_channel_owner_definition;
} Channel_GetOneById_Precedent;

typedef struct UnifiedReport__Channel_GetOneById_Outcoming__Channel_GetOneById_Precedent {
  struct Data__Channel_GetOneById_Outcoming target;
  struct Channel_GetOneById_Precedent precedent;
  bool is_target;
} UnifiedReport__Channel_GetOneById_Outcoming__Channel_GetOneById_Precedent;

typedef struct Result__UnifiedReport__Channel_GetOneById_Outcoming__Channel_GetOneById_Precedent {
  struct UnifiedReport__Channel_GetOneById_Outcoming__Channel_GetOneById_Precedent data;
  bool is_data;
} Result__UnifiedReport__Channel_GetOneById_Outcoming__Channel_GetOneById_Precedent;

typedef struct Result__UnifiedReport__Channel_GetOneById_Outcoming__Channel_GetOneById_Precedent Channel_GetOneById_Result;

typedef struct Channel_CheckNameForExisting_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct String_ channel__name;
} Channel_CheckNameForExisting_Incoming;

typedef struct Channel_CheckNameForExisting_Outcoming {
  bool result;
} Channel_CheckNameForExisting_Outcoming;

typedef struct Data__Channel_CheckNameForExisting_Outcoming {
  struct Channel_CheckNameForExisting_Outcoming filled;
  bool is_filled;
} Data__Channel_CheckNameForExisting_Outcoming;

typedef struct Channel_CheckNameForExisting_Precedent {
  bool user_access_token___already_expired;
} Channel_CheckNameForExisting_Precedent;

typedef struct UnifiedReport__Channel_CheckNameForExisting_Outcoming__Channel_CheckNameForExisting_Precedent {
  struct Data__Channel_CheckNameForExisting_Outcoming target;
  struct Channel_CheckNameForExisting_Precedent precedent;
  bool is_target;
} UnifiedReport__Channel_CheckNameForExisting_Outcoming__Channel_CheckNameForExisting_Precedent;

typedef struct Result__UnifiedReport__Channel_CheckNameForExisting_Outcoming__Channel_CheckNameForExisting_Precedent {
  struct UnifiedReport__Channel_CheckNameForExisting_Outcoming__Channel_CheckNameForExisting_Precedent data;
  bool is_data;
} Result__UnifiedReport__Channel_CheckNameForExisting_Outcoming__Channel_CheckNameForExisting_Precedent;

typedef struct Result__UnifiedReport__Channel_CheckNameForExisting_Outcoming__Channel_CheckNameForExisting_Precedent Channel_CheckNameForExisting_Result;

typedef struct Channel_CheckLinkedNameForExisting_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct String_ channel__linked_name;
} Channel_CheckLinkedNameForExisting_Incoming;

typedef struct Channel_CheckLinkedNameForExisting_Outcoming {
  bool result;
} Channel_CheckLinkedNameForExisting_Outcoming;

typedef struct Data__Channel_CheckLinkedNameForExisting_Outcoming {
  struct Channel_CheckLinkedNameForExisting_Outcoming filled;
  bool is_filled;
} Data__Channel_CheckLinkedNameForExisting_Outcoming;

typedef struct Channel_CheckLinkedNameForExisting_Precedent {
  bool user_access_token___already_expired;
} Channel_CheckLinkedNameForExisting_Precedent;

typedef struct UnifiedReport__Channel_CheckLinkedNameForExisting_Outcoming__Channel_CheckLinkedNameForExisting_Precedent {
  struct Data__Channel_CheckLinkedNameForExisting_Outcoming target;
  struct Channel_CheckLinkedNameForExisting_Precedent precedent;
  bool is_target;
} UnifiedReport__Channel_CheckLinkedNameForExisting_Outcoming__Channel_CheckLinkedNameForExisting_Precedent;

typedef struct Result__UnifiedReport__Channel_CheckLinkedNameForExisting_Outcoming__Channel_CheckLinkedNameForExisting_Precedent {
  struct UnifiedReport__Channel_CheckLinkedNameForExisting_Outcoming__Channel_CheckLinkedNameForExisting_Precedent data;
  bool is_data;
} Result__UnifiedReport__Channel_CheckLinkedNameForExisting_Outcoming__Channel_CheckLinkedNameForExisting_Precedent;

typedef struct Result__UnifiedReport__Channel_CheckLinkedNameForExisting_Outcoming__Channel_CheckLinkedNameForExisting_Precedent Channel_CheckLinkedNameForExisting_Result;

typedef struct Channel_Create_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct String_ channel__name;
  struct String_ channel__linked_name;
  unsigned char channel__access_modifier;
  unsigned char channel__visability_modifier;
} Channel_Create_Incoming;

typedef struct Channel_Create_Outcoming {
  struct ChannelTokenSigned channel_token_signed;
} Channel_Create_Outcoming;

typedef struct Data__Channel_Create_Outcoming {
  struct Channel_Create_Outcoming filled;
  bool is_filled;
} Data__Channel_Create_Outcoming;

typedef struct Channel_Create_Precedent {
  bool user_access_token___already_expired;
  bool channel___name_already_exist;
  bool channel___linked_name_already_exist;
  bool parallel_execution;
} Channel_Create_Precedent;

typedef struct UnifiedReport__Channel_Create_Outcoming__Channel_Create_Precedent {
  struct Data__Channel_Create_Outcoming target;
  struct Channel_Create_Precedent precedent;
  bool is_target;
} UnifiedReport__Channel_Create_Outcoming__Channel_Create_Precedent;

typedef struct Result__UnifiedReport__Channel_Create_Outcoming__Channel_Create_Precedent {
  struct UnifiedReport__Channel_Create_Outcoming__Channel_Create_Precedent data;
  bool is_data;
} Result__UnifiedReport__Channel_Create_Outcoming__Channel_Create_Precedent;

typedef struct Result__UnifiedReport__Channel_Create_Outcoming__Channel_Create_Precedent Channel_Create_Result;

typedef struct Channel_Delete_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct ChannelTokenSigned channel_token_signed;
} Channel_Delete_Incoming;

typedef struct Channel_Delete_Precedent {
  bool user_access_token___already_expired;
  bool channel_token___already_expired;
  bool user___is_not_channel_owner;
  bool channel___not_found;
} Channel_Delete_Precedent;

typedef struct UnifiedReport__CVoid__Channel_Delete_Precedent {
  struct Data__CVoid target;
  struct Channel_Delete_Precedent precedent;
  bool is_target;
} UnifiedReport__CVoid__Channel_Delete_Precedent;

typedef struct Result__UnifiedReport__CVoid__Channel_Delete_Precedent {
  struct UnifiedReport__CVoid__Channel_Delete_Precedent data;
  bool is_data;
} Result__UnifiedReport__CVoid__Channel_Delete_Precedent;

typedef struct Result__UnifiedReport__CVoid__Channel_Delete_Precedent Channel_Delete_Result;

typedef struct ChannelSubscription_Create_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct ChannelTokenSigned channel_token_signed;
} ChannelSubscription_Create_Incoming;

typedef struct ChannelSubscription_Create_Outcoming {
  struct ChannelTokenSigned channel_token_signed;
} ChannelSubscription_Create_Outcoming;

typedef struct Data__ChannelSubscription_Create_Outcoming {
  struct ChannelSubscription_Create_Outcoming filled;
  bool is_filled;
} Data__ChannelSubscription_Create_Outcoming;

typedef struct ChannelSubscription_Create_Precedent {
  bool user_access_token___already_expired;
  bool channel_token___already_expired;
  bool channel___not_found;
  bool channel___user_is_owner;
  bool channel_subscription___already_exist;
} ChannelSubscription_Create_Precedent;

typedef struct UnifiedReport__ChannelSubscription_Create_Outcoming__ChannelSubscription_Create_Precedent {
  struct Data__ChannelSubscription_Create_Outcoming target;
  struct ChannelSubscription_Create_Precedent precedent;
  bool is_target;
} UnifiedReport__ChannelSubscription_Create_Outcoming__ChannelSubscription_Create_Precedent;

typedef struct Result__UnifiedReport__ChannelSubscription_Create_Outcoming__ChannelSubscription_Create_Precedent {
  struct UnifiedReport__ChannelSubscription_Create_Outcoming__ChannelSubscription_Create_Precedent data;
  bool is_data;
} Result__UnifiedReport__ChannelSubscription_Create_Outcoming__ChannelSubscription_Create_Precedent;

typedef struct Result__UnifiedReport__ChannelSubscription_Create_Outcoming__ChannelSubscription_Create_Precedent ChannelSubscription_Create_Result;

typedef struct ChannelSubscription_Delete_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct ChannelTokenSigned channel_token_signed;
} ChannelSubscription_Delete_Incoming;

typedef struct ChannelSubscription_Delete_Outcoming {
  struct ChannelTokenSigned channel_token_signed;
} ChannelSubscription_Delete_Outcoming;

typedef struct Data__ChannelSubscription_Delete_Outcoming {
  struct ChannelSubscription_Delete_Outcoming filled;
  bool is_filled;
} Data__ChannelSubscription_Delete_Outcoming;

typedef struct ChannelSubscription_Delete_Precedent {
  bool user_access_token___already_expired;
  bool channel_token___already_expired;
  bool channel___user_is_owner;
  bool channel_subscription___not_found;
  bool channel___not_found;
} ChannelSubscription_Delete_Precedent;

typedef struct UnifiedReport__ChannelSubscription_Delete_Outcoming__ChannelSubscription_Delete_Precedent {
  struct Data__ChannelSubscription_Delete_Outcoming target;
  struct ChannelSubscription_Delete_Precedent precedent;
  bool is_target;
} UnifiedReport__ChannelSubscription_Delete_Outcoming__ChannelSubscription_Delete_Precedent;

typedef struct Result__UnifiedReport__ChannelSubscription_Delete_Outcoming__ChannelSubscription_Delete_Precedent {
  struct UnifiedReport__ChannelSubscription_Delete_Outcoming__ChannelSubscription_Delete_Precedent data;
  bool is_data;
} Result__UnifiedReport__ChannelSubscription_Delete_Outcoming__ChannelSubscription_Delete_Precedent;

typedef struct Result__UnifiedReport__ChannelSubscription_Delete_Outcoming__ChannelSubscription_Delete_Precedent ChannelSubscription_Delete_Result;

typedef struct ChannelPublication1_GetMany_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct ChannelTokenSigned channel_token_signed;
  long channel_publication1__created_at;
  unsigned char limit;
} ChannelPublication1_GetMany_Incoming;

typedef struct CVector_String_ {
  struct String_ *pointer;
  size_t length;
} CVector_String_;

typedef struct ChannelPublication1TokenSigned {
  long channel__id;
  long channel_publication1__id;
  long channel_publication1_token__obfuscation_value;
  long channel_publication1_token__expires_at;
  struct CVector_c_uchar signature;
} ChannelPublication1TokenSigned;

typedef struct ChannelPublication1_GetMany_Data {
  struct CVector_String_ channel_publication1__images_pathes;
  struct Option__String_ channel_publication1__text;
  unsigned int channel_publication1__commentaries_quantity;
  unsigned int channel_publication1__marks_quantity;
  unsigned int channel_publication1__view_quantity;
  long channel_publication1__created_at;
  struct Option__c_long channel_publication1_mark__created_at;
  struct ChannelPublication1TokenSigned channel_publication1_token_signed;
} ChannelPublication1_GetMany_Data;

typedef struct CVector_ChannelPublication1_GetMany_Data {
  struct ChannelPublication1_GetMany_Data *pointer;
  size_t length;
} CVector_ChannelPublication1_GetMany_Data;

typedef struct ChannelPublication1_GetMany_Outcoming {
  struct CVector_ChannelPublication1_GetMany_Data data_registry;
} ChannelPublication1_GetMany_Outcoming;

typedef struct Data__ChannelPublication1_GetMany_Outcoming {
  struct ChannelPublication1_GetMany_Outcoming filled;
  bool is_filled;
} Data__ChannelPublication1_GetMany_Outcoming;

typedef struct ChannelPublication1_GetMany_Precedent {
  bool user_access_token___already_expired;
  bool channel_token___already_expired;
  bool channel_token___invalid_channel_owner_definition;
  bool channel___not_found;
  bool channel___is_close;
} ChannelPublication1_GetMany_Precedent;

typedef struct UnifiedReport__ChannelPublication1_GetMany_Outcoming__ChannelPublication1_GetMany_Precedent {
  struct Data__ChannelPublication1_GetMany_Outcoming target;
  struct ChannelPublication1_GetMany_Precedent precedent;
  bool is_target;
} UnifiedReport__ChannelPublication1_GetMany_Outcoming__ChannelPublication1_GetMany_Precedent;

typedef struct Result__UnifiedReport__ChannelPublication1_GetMany_Outcoming__ChannelPublication1_GetMany_Precedent {
  struct UnifiedReport__ChannelPublication1_GetMany_Outcoming__ChannelPublication1_GetMany_Precedent data;
  bool is_data;
} Result__UnifiedReport__ChannelPublication1_GetMany_Outcoming__ChannelPublication1_GetMany_Precedent;

typedef struct Result__UnifiedReport__ChannelPublication1_GetMany_Outcoming__ChannelPublication1_GetMany_Precedent ChannelPublication1_GetMany_Result;

typedef struct ChannelPublication1_Create_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct ChannelTokenSigned channel_token_signed;
  struct CVector_String_ channel_publication1__images_pathes;
  struct Option__String_ channel_publication1__text;
} ChannelPublication1_Create_Incoming;

typedef struct ChannelPublication1_Create_Outcoming {
  long channel_publication1__created_at;
  struct ChannelPublication1TokenSigned channel_publication1_token_signed;
} ChannelPublication1_Create_Outcoming;

typedef struct Data__ChannelPublication1_Create_Outcoming {
  struct ChannelPublication1_Create_Outcoming filled;
  bool is_filled;
} Data__ChannelPublication1_Create_Outcoming;

typedef struct ChannelPublication1_Create_Precedent {
  bool user_access_token___already_expired;
  bool channel_token___already_expired;
  bool user___is_not_channel_owner;
  bool parallel_execution;
} ChannelPublication1_Create_Precedent;

typedef struct UnifiedReport__ChannelPublication1_Create_Outcoming__ChannelPublication1_Create_Precedent {
  struct Data__ChannelPublication1_Create_Outcoming target;
  struct ChannelPublication1_Create_Precedent precedent;
  bool is_target;
} UnifiedReport__ChannelPublication1_Create_Outcoming__ChannelPublication1_Create_Precedent;

typedef struct Result__UnifiedReport__ChannelPublication1_Create_Outcoming__ChannelPublication1_Create_Precedent {
  struct UnifiedReport__ChannelPublication1_Create_Outcoming__ChannelPublication1_Create_Precedent data;
  bool is_data;
} Result__UnifiedReport__ChannelPublication1_Create_Outcoming__ChannelPublication1_Create_Precedent;

typedef struct Result__UnifiedReport__ChannelPublication1_Create_Outcoming__ChannelPublication1_Create_Precedent ChannelPublication1_Create_Result;

typedef struct ChannelPublication1_Delete_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct ChannelTokenSigned channel_token_signed;
  struct ChannelPublication1TokenSigned channel_publication1_token_signed;
} ChannelPublication1_Delete_Incoming;

typedef struct ChannelPublication1_Delete_Precedent {
  bool user_access_token___already_expired;
  bool channel_token___already_expired;
  bool channel_publication1_token___already_expired;
  bool user___is_not_channel_owner;
  bool channel_publication1___not_found;
  bool parallel_execution;
} ChannelPublication1_Delete_Precedent;

typedef struct UnifiedReport__CVoid__ChannelPublication1_Delete_Precedent {
  struct Data__CVoid target;
  struct ChannelPublication1_Delete_Precedent precedent;
  bool is_target;
} UnifiedReport__CVoid__ChannelPublication1_Delete_Precedent;

typedef struct Result__UnifiedReport__CVoid__ChannelPublication1_Delete_Precedent {
  struct UnifiedReport__CVoid__ChannelPublication1_Delete_Precedent data;
  bool is_data;
} Result__UnifiedReport__CVoid__ChannelPublication1_Delete_Precedent;

typedef struct Result__UnifiedReport__CVoid__ChannelPublication1_Delete_Precedent ChannelPublication1_Delete_Result;

typedef struct ChannelPublication1Mark_Create_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct ChannelPublication1TokenSigned channel_publication1_token_signed;
} ChannelPublication1Mark_Create_Incoming;

typedef struct ChannelPublication1Mark_Create_Precedent {
  bool user_access_token___already_expired;
  bool channel_publication1_token___already_expired;
  bool channel_publication1_mark___already_exist;
  bool channel_publication1__not_found;
} ChannelPublication1Mark_Create_Precedent;

typedef struct UnifiedReport__CVoid__ChannelPublication1Mark_Create_Precedent {
  struct Data__CVoid target;
  struct ChannelPublication1Mark_Create_Precedent precedent;
  bool is_target;
} UnifiedReport__CVoid__ChannelPublication1Mark_Create_Precedent;

typedef struct Result__UnifiedReport__CVoid__ChannelPublication1Mark_Create_Precedent {
  struct UnifiedReport__CVoid__ChannelPublication1Mark_Create_Precedent data;
  bool is_data;
} Result__UnifiedReport__CVoid__ChannelPublication1Mark_Create_Precedent;

typedef struct Result__UnifiedReport__CVoid__ChannelPublication1Mark_Create_Precedent ChannelPublication1Mark_Create_Result;

typedef struct ChannelPublication1Mark_Delete_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct ChannelPublication1TokenSigned channel_publication1_token_signed;
} ChannelPublication1Mark_Delete_Incoming;

typedef struct ChannelPublication1Mark_Delete_Precedent {
  bool user_access_token___already_expired;
  bool channel_publication1_token___already_expired;
  bool channel_publication1_mark___not_found;
  bool channel_publication1__not_found;
} ChannelPublication1Mark_Delete_Precedent;

typedef struct UnifiedReport__CVoid__ChannelPublication1Mark_Delete_Precedent {
  struct Data__CVoid target;
  struct ChannelPublication1Mark_Delete_Precedent precedent;
  bool is_target;
} UnifiedReport__CVoid__ChannelPublication1Mark_Delete_Precedent;

typedef struct Result__UnifiedReport__CVoid__ChannelPublication1Mark_Delete_Precedent {
  struct UnifiedReport__CVoid__ChannelPublication1Mark_Delete_Precedent data;
  bool is_data;
} Result__UnifiedReport__CVoid__ChannelPublication1Mark_Delete_Precedent;

typedef struct Result__UnifiedReport__CVoid__ChannelPublication1Mark_Delete_Precedent ChannelPublication1Mark_Delete_Result;

typedef struct ChannelPublication1View_Create_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct ChannelPublication1TokenSigned channel_publication1_token_signed;
} ChannelPublication1View_Create_Incoming;

typedef struct ChannelPublication1View_Create_Precedent {
  bool user_access_token___already_expired;
  bool channel_publication1_token___already_expired;
} ChannelPublication1View_Create_Precedent;

typedef struct UnifiedReport__CVoid__ChannelPublication1View_Create_Precedent {
  struct Data__CVoid target;
  struct ChannelPublication1View_Create_Precedent precedent;
  bool is_target;
} UnifiedReport__CVoid__ChannelPublication1View_Create_Precedent;

typedef struct Result__UnifiedReport__CVoid__ChannelPublication1View_Create_Precedent {
  struct UnifiedReport__CVoid__ChannelPublication1View_Create_Precedent data;
  bool is_data;
} Result__UnifiedReport__CVoid__ChannelPublication1View_Create_Precedent;

typedef struct Result__UnifiedReport__CVoid__ChannelPublication1View_Create_Precedent ChannelPublication1View_Create_Result;

typedef struct ChannelPublication1Commentary_Create_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  struct String_ channel_publication1_commentary__text;
  struct ChannelPublication1TokenSigned channel_publication1_token_signed;
} ChannelPublication1Commentary_Create_Incoming;

typedef struct ChannelPublication1Commentary_Create_Outcoming {
  long channel_publication1__id;
  long channel_publication1_commentary__created_at;
} ChannelPublication1Commentary_Create_Outcoming;

typedef struct Data__ChannelPublication1Commentary_Create_Outcoming {
  struct ChannelPublication1Commentary_Create_Outcoming filled;
  bool is_filled;
} Data__ChannelPublication1Commentary_Create_Outcoming;

typedef struct ChannelPublication1Commentary_Create_Precedent {
  bool user_access_token___already_expired;
  bool channel_publication1_token___already_expired;
  bool parallel_execution;
} ChannelPublication1Commentary_Create_Precedent;

typedef struct UnifiedReport__ChannelPublication1Commentary_Create_Outcoming__ChannelPublication1Commentary_Create_Precedent {
  struct Data__ChannelPublication1Commentary_Create_Outcoming target;
  struct ChannelPublication1Commentary_Create_Precedent precedent;
  bool is_target;
} UnifiedReport__ChannelPublication1Commentary_Create_Outcoming__ChannelPublication1Commentary_Create_Precedent;

typedef struct Result__UnifiedReport__ChannelPublication1Commentary_Create_Outcoming__ChannelPublication1Commentary_Create_Precedent {
  struct UnifiedReport__ChannelPublication1Commentary_Create_Outcoming__ChannelPublication1Commentary_Create_Precedent data;
  bool is_data;
} Result__UnifiedReport__ChannelPublication1Commentary_Create_Outcoming__ChannelPublication1Commentary_Create_Precedent;

typedef struct Result__UnifiedReport__ChannelPublication1Commentary_Create_Outcoming__ChannelPublication1Commentary_Create_Precedent ChannelPublication1Commentary_Create_Result;

typedef struct ChannelPublication1Commentary_Delete_Incoming {
  struct UserAccessTokenSigned user_access_token_signed;
  int64_t channel_publication1_commentary__id;
  struct ChannelPublication1TokenSigned channel_publication1_token_signed;
} ChannelPublication1Commentary_Delete_Incoming;

typedef struct ChannelPublication1Commentary_Delete_Precedent {
  bool user_access_token___already_expired;
  bool channel_publication1_token___already_expired;
  bool channel_publication1_commentary___not_found;
} ChannelPublication1Commentary_Delete_Precedent;

typedef struct UnifiedReport__CVoid__ChannelPublication1Commentary_Delete_Precedent {
  struct Data__CVoid target;
  struct ChannelPublication1Commentary_Delete_Precedent precedent;
  bool is_target;
} UnifiedReport__CVoid__ChannelPublication1Commentary_Delete_Precedent;

typedef struct Result__UnifiedReport__CVoid__ChannelPublication1Commentary_Delete_Precedent {
  struct UnifiedReport__CVoid__ChannelPublication1Commentary_Delete_Precedent data;
  bool is_data;
} Result__UnifiedReport__CVoid__ChannelPublication1Commentary_Delete_Precedent;

typedef struct Result__UnifiedReport__CVoid__ChannelPublication1Commentary_Delete_Precedent ChannelPublication1Commentary_Delete_Result;

struct Result__CVector_c_uchar user_authorization__authorize_by_first_step__serialize_allocate(struct UserAuthorization_AuthorizeByFirstStep_Incoming incoming);

void user_authorization__authorize_by_first_step__serialize_deallocate(struct Result__CVector_c_uchar result);

UserAuthorization_AuthorizeByFirstStep_Result user_authorization__authorize_by_first_step__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void user_authorization__authorize_by_first_step__deserialize_deallocate(UserAuthorization_AuthorizeByFirstStep_Result _result);

struct Result__CVector_c_uchar user_authorization__authorize_by_last_step__serialize_allocate(struct UserAuthorization_AuthorizeByLastStep_Incoming incoming);

void user_authorization__authorize_by_last_step__serialize_deallocate(struct Result__CVector_c_uchar result);

UserAuthorization_AuthorizeByLastStep_Result user_authorization__authorize_by_last_step__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void user_authorization__authorize_by_last_step__deserialize_deallocate(UserAuthorization_AuthorizeByLastStep_Result result);

struct Result__CVector_c_uchar user_authorization__check_email_for_existing__serialize_allocate(struct UserAuthorization_CheckEmailForExisting_Incoming incoming);

void user_authorization__check_email_for_existing__serialize_deallocate(struct Result__CVector_c_uchar result);

UserAuthorization_CheckEmailForExisting_Result user_authorization__check_email_for_existing__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void user_authorization__check_email_for_existing__deserialize_deallocate(UserAuthorization_CheckEmailForExisting_Result _result);

struct Result__CVector_c_uchar user_authorization__check_nickname_for_existing__serialize_allocate(struct UserAuthorization_CheckNicknameForExisting_Incoming incoming);

void user_authorization__check_nickname_for_existing__serialize_deallocate(struct Result__CVector_c_uchar result);

UserAuthorization_CheckNicknameForExisting_Result user_authorization__check_nickname_for_existing__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void user_authorization__check_nickname_for_existing__deserialize_deallocate(UserAuthorization_CheckNicknameForExisting_Result _result);

struct Result__CVector_c_uchar user_authorization__deauthorize_from_all_devices__serialize_allocate(struct UserAuthorization_DeauthorizeFromAllDevices_Incoming incoming);

void user_authorization__deauthorize_from_all_devices__serialize_deallocate(struct Result__CVector_c_uchar result);

UserAuthorization_DeauthorizeFromAllDevices_Result user_authorization__deauthorize_from_all_devices__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void user_authorization__deauthorize_from_all_devices__deserialize_deallocate(UserAuthorization_DeauthorizeFromAllDevices_Result _result);

struct Result__CVector_c_uchar user_authorization__deauthorize_from_one_device__serialize_allocate(struct UserAuthorization_DeauthorizeFromOneDevice_Incoming incoming);

void user_authorization__deauthorize_from_one_device__serialize_deallocate(struct Result__CVector_c_uchar result);

UserAuthorization_DeauthorizeFromOneDevice_Result user_authorization__deauthorize_from_one_device__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void user_authorization__deauthorize_from_one_device__deserialize_deallocate(UserAuthorization_DeauthorizeFromOneDevice_Result _result);

struct Result__CVector_c_uchar user_authorization__refresh_access_token__serialize_allocate(struct UserAuthorization_RefreshAccessToken_Incoming incoming);

void user_authorization__refresh_access_token__serialize_deallocate(struct Result__CVector_c_uchar result);

UserAuthorization_RefreshAccessToken_Result user_authorization__refresh_access_token__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void user_authorization__refresh_access_token__deserialize_deallocate(UserAuthorization_RefreshAccessToken_Result result);

struct Result__CVector_c_uchar user_authorization__register_by_first_step__serialize_allocate(struct UserAuthorization_RegisterByFirstStep_Incoming incoming);

void user_authorization__register_by_first_step__serialize_deallocate(struct Result__CVector_c_uchar result);

UserAuthorization_RegisterByFirstStep_Result user_authorization__register_by_first_step__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void user_authorization__register_by_first_step__deserialize_deallocate(UserAuthorization_RegisterByFirstStep_Result _result);

struct Result__CVector_c_uchar user_authorization__register_by_second_step__serialize_allocate(struct UserAuthorization_RegisterBySecondStep_Incoming incoming);

void user_authorization__register_by_second_step__serialize_deallocate(struct Result__CVector_c_uchar result);

UserAuthorization_RegisterBySecondStep_Result user_authorization__register_by_second_step__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void user_authorization__register_by_second_step__deserialize_deallocate(UserAuthorization_RegisterBySecondStep_Result _result);

struct Result__CVector_c_uchar user_authorization__register_by_last_step__serialize_allocate(struct UserAuthorization_RegisterByLastStep_Incoming incoming);

void user_authorization__register_by_last_step__serialize_deallocate(struct Result__CVector_c_uchar result);

UserAuthorization_RegisterByLastStep_Result user_authorization__register_by_last_step__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void user_authorization__register_by_last_step__deserialize_deallocate(UserAuthorization_RegisterByLastStep_Result result);

struct Result__CVector_c_uchar user_authorization__reset_password_by_first_step__serialize_allocate(struct UserAuthorization_ResetPasswordByFirstStep_Incoming incoming);

void user_authorization__reset_password_by_first_step__serialize_deallocate(struct Result__CVector_c_uchar result);

UserAuthorization_ResetPasswordByFirstStep_Result user_authorization__reset_password_by_first_step__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void user_authorization__reset_password_by_first_step__deserialize_deallocate(UserAuthorization_ResetPasswordByFirstStep_Result _result);

struct Result__CVector_c_uchar user_authorization__reset_password_by_second_step__serialize_allocate(struct UserAuthorization_ResetPasswordBySecondStep_Incoming incoming);

void user_authorization__reset_password_by_second_step__serialize_deallocate(struct Result__CVector_c_uchar result);

UserAuthorization_ResetPasswordBySecondStep_Result user_authorization__reset_password_by_second_step__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void user_authorization__reset_password_by_second_step__deserialize_deallocate(UserAuthorization_ResetPasswordBySecondStep_Result _result);

struct Result__CVector_c_uchar user_authorization__reset_password_by_last_step__serialize_allocate(struct UserAuthorization_ResetPasswordByLastStep_Incoming incoming);

void user_authorization__reset_password_by_last_step__serialize_deallocate(struct Result__CVector_c_uchar result);

UserAuthorization_ResetPasswordByLastStep_Result user_authorization__reset_password_by_last_step__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void user_authorization__reset_password_by_last_step__deserialize_deallocate(UserAuthorization_ResetPasswordByLastStep_Result _result);

struct Result__CVector_c_uchar user_authorization__send_email_for_register__serialize_allocate(struct UserAuthorization_SendEmailForRegister_Incoming incoming);

void user_authorization__send_email_for_register__serialize_deallocate(struct Result__CVector_c_uchar result);

UserAuthorization_SendEmailForRegister_Result user_authorization__send_email_for_register__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void user_authorization__send_email_for_register__deserialize_deallocate(UserAuthorization_SendEmailForRegister_Result _result);

struct Result__CVector_c_uchar user_authorization__send_email_for_authorize__serialize_allocate(struct UserAuthorization_SendEmailForAuthorize_Incoming incoming);

void user_authorization__send_email_for_authorize__serialize_deallocate(struct Result__CVector_c_uchar result);

UserAuthorization_SendEmailForAuthorize_Result user_authorization__send_email_for_authorize__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void user_authorization__send_email_for_authorize__deserialize_deallocate(UserAuthorization_SendEmailForAuthorize_Result _result);

struct Result__CVector_c_uchar user_authorization__send_email_for_reset_password__serialize_allocate(struct UserAuthorization_SendEmailForResetPassword_Incoming incoming);

void user_authorization__send_email_for_reset_password__serialize_deallocate(struct Result__CVector_c_uchar result);

UserAuthorization_SendEmailForResetPassword_Result user_authorization__send_email_for_reset_password__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void user_authorization__send_email_for_reset_password__deserialize_deallocate(UserAuthorization_SendEmailForResetPassword_Result _result);

struct Result__CVector_c_uchar channel__get_many_by_name_in_subscriptions__serialize_allocate(struct Channel_GetManyByNameInSubscriptions_Incoming incoming);

void channel__get_many_by_name_in_subscriptions__serialize_deallocate(struct Result__CVector_c_uchar result);

Channel_GetManyByNameInSubscriptions_Result channel__get_many_by_name_in_subscriptions__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void channel__get_many_by_name_in_subscriptions__deserialize_deallocate(Channel_GetManyByNameInSubscriptions_Result result);

struct Result__CVector_c_uchar channel__get_many_by_subscription__serialize_allocate(struct Channel_GetManyBySubscription_Incoming incoming);

void channel__get_many_by_subscription__serialize_deallocate(struct Result__CVector_c_uchar result);

Channel_GetManyBySubscription_Result channel__get_many_by_subscription__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void channel__get_many_by_subscription__deserialize_deallocate(Channel_GetManyBySubscription_Result result);

struct Result__CVector_c_uchar channel__get_many_public_by_name__serialize_allocate(struct Channel_GetManyPublicByName_Incoming incoming);

void channel__get_many_public_by_name__serialize_deallocate(struct Result__CVector_c_uchar result);

Channel_GetManyPublicByName_Result channel__get_many_public_by_name__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void channel__get_many_public_by_name__deserialize_deallocate(Channel_GetManyPublicByName_Result result);

struct Result__CVector_c_uchar channel__get_one_by_id__serialize_allocate(struct Channel_GetOneById_Incoming incoming);

void channel__get_one_by_id__serialize_deallocate(struct Result__CVector_c_uchar result);

Channel_GetOneById_Result channel__get_one_by_id__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void channel__get_one_by_id__deserialize_deallocate(Channel_GetOneById_Result result);

struct Result__CVector_c_uchar channel__check_name_for_existing__serialize_allocate(struct Channel_CheckNameForExisting_Incoming incoming);

void channel__check_name_for_existing__serialize_deallocate(struct Result__CVector_c_uchar result);

Channel_CheckNameForExisting_Result channel__check_name_for_existing__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void channel__check_name_for_existing__deserialize_deallocate(Channel_CheckNameForExisting_Result _result);

struct Result__CVector_c_uchar channel__check_linked_name_for_existing__serialize_allocate(struct Channel_CheckLinkedNameForExisting_Incoming incoming);

void channel__check_linked_name_for_existing__serialize_deallocate(struct Result__CVector_c_uchar result);

Channel_CheckLinkedNameForExisting_Result channel__check_linked_name_for_existing__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void channel__check_linked_name_for_existing__deserialize_deallocate(Channel_CheckLinkedNameForExisting_Result _result);

struct Result__CVector_c_uchar channel__create__serialize_allocate(struct Channel_Create_Incoming incoming);

void channel__create__serialize_deallocate(struct Result__CVector_c_uchar result);

Channel_Create_Result channel__create__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void channel__create__deserialize_deallocate(Channel_Create_Result result);

struct Result__CVector_c_uchar channel__delete__serialize_allocate(struct Channel_Delete_Incoming incoming);

void channel__delete__serialize_deallocate(struct Result__CVector_c_uchar result);

Channel_Delete_Result channel__delete__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void channel__delete__deserialize_deallocate(Channel_Delete_Result _result);

struct Result__CVector_c_uchar channel_subscription__create__serialize_allocate(struct ChannelSubscription_Create_Incoming incoming);

void channel_subscription__create__serialize_deallocate(struct Result__CVector_c_uchar result);

ChannelSubscription_Create_Result channel_subscription__create__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void channel_subscription__create__deserialize_deallocate(ChannelSubscription_Create_Result result);

struct Result__CVector_c_uchar channel_subscription__delete__serialize_allocate(struct ChannelSubscription_Delete_Incoming incoming);

void channel_subscription__delete__serialize_deallocate(struct Result__CVector_c_uchar result);

ChannelSubscription_Delete_Result channel_subscription__delete__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void channel_subscription__delete__deserialize_deallocate(ChannelSubscription_Delete_Result result);

struct Result__CVector_c_uchar channel_publication1__get_many__serialize_allocate(struct ChannelPublication1_GetMany_Incoming incoming);

void channel_publication1__get_many__serialize_deallocate(struct Result__CVector_c_uchar result);

ChannelPublication1_GetMany_Result channel_publication1__get_many__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void channel_publication1__get_many__deserialize_deallocate(ChannelPublication1_GetMany_Result result);

struct Result__CVector_c_uchar channel_publication1__create__serialize_allocate(struct ChannelPublication1_Create_Incoming incoming);

void channel_publication1__create__serialize_deallocate(struct Result__CVector_c_uchar result);

ChannelPublication1_Create_Result channel_publication1__create__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void channel_publication1__create__deserialize_deallocate(ChannelPublication1_Create_Result result);

struct Result__CVector_c_uchar channel_publication1__delete__serialize_allocate(struct ChannelPublication1_Delete_Incoming incoming);

void channel_publication1__delete__serialize_deallocate(struct Result__CVector_c_uchar result);

ChannelPublication1_Delete_Result channel_publication1__delete__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void channel_publication1__delete__deserialize_deallocate(ChannelPublication1_Delete_Result _result);

struct Result__CVector_c_uchar channel_publication1_mark__create__serialize_allocate(struct ChannelPublication1Mark_Create_Incoming incoming);

void channel_publication1_mark__create__serialize_deallocate(struct Result__CVector_c_uchar result);

ChannelPublication1Mark_Create_Result channel_publication1_mark__create__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void channel_publication1_mark__create__deserialize_deallocate(ChannelPublication1Mark_Create_Result _result);

struct Result__CVector_c_uchar channel_publication1_mark__delete__serialize_allocate(struct ChannelPublication1Mark_Delete_Incoming incoming);

void channel_publication1_mark__delete__serialize_deallocate(struct Result__CVector_c_uchar result);

ChannelPublication1Mark_Delete_Result channel_publication1_mark__delete__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void channel_publication1_mark__delete__deserialize_deallocate(ChannelPublication1Mark_Delete_Result _result);

struct Result__CVector_c_uchar channel_publication1_view__create__serialize_allocate(struct ChannelPublication1View_Create_Incoming incoming);

void channel_publication1_view__create__serialize_deallocate(struct Result__CVector_c_uchar result);

ChannelPublication1View_Create_Result channel_publication1_view__create__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void channel_publication1_view__create__deserialize_deallocate(ChannelPublication1View_Create_Result _result);

struct Result__CVector_c_uchar channel_publication1_commentary__create__serialize_allocate(struct ChannelPublication1Commentary_Create_Incoming incoming);

void channel_publication1_commentary__create__serialize_deallocate(struct Result__CVector_c_uchar result);

ChannelPublication1Commentary_Create_Result channel_publication1_commentary__create__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void channel_publication1_commentary__create__deserialize_deallocate(ChannelPublication1Commentary_Create_Result _result);

struct Result__CVector_c_uchar channel_publication1_commentary__delete__serialize_allocate(struct ChannelPublication1Commentary_Delete_Incoming incoming);

void channel_publication1_commentary__delete__serialize_deallocate(struct Result__CVector_c_uchar result);

ChannelPublication1Commentary_Delete_Result channel_publication1_commentary__delete__deserialize_allocate(struct CVector_c_uchar c_vector_of_bytes);

void channel_publication1_commentary__delete__deserialize_deallocate(ChannelPublication1Commentary_Delete_Result _result);
