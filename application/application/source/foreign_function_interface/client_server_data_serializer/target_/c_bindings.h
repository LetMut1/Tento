#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct C_Vector_c_uchar {
  unsigned char *pointer;
  size_t length;
} C_Vector_c_uchar;

typedef struct C_Result_C_Vector_c_uchar {
  struct C_Vector_c_uchar data;
  bool is_data;
} C_Result_C_Vector_c_uchar;

typedef struct C_String {
  char *pointer;
} C_String;

typedef struct UserAuthorization_AuthorizeByFirstStep_Incoming {
  struct C_String user_device__id;
  struct C_String user__email___or___user__nickname;
  struct C_String user__password;
} UserAuthorization_AuthorizeByFirstStep_Incoming;

typedef struct UserAuthorization_AuthorizeByFirstStep_Outcoming {
  long user__id;
  bool verification_message_sent;
  long user_authorization_token__can_be_resent_from;
  short user_authorization_token__wrong_enter_tries_quantity;
  short user_authorization_token__wrong_enter_tries_quantity_limit;
} UserAuthorization_AuthorizeByFirstStep_Outcoming;

typedef struct C_Data_UserAuthorization_AuthorizeByFirstStep_Outcoming {
  struct UserAuthorization_AuthorizeByFirstStep_Outcoming filled;
  bool is_filled;
} C_Data_UserAuthorization_AuthorizeByFirstStep_Outcoming;

typedef struct UserAuthorization_AuthorizeByFirstStep_Precedent {
  bool user__wrong_email_or_nickname_or_password;
} UserAuthorization_AuthorizeByFirstStep_Precedent;

typedef struct C_UnifiedReport_UserAuthorization_AuthorizeByFirstStep_Outcoming__UserAuthorization_AuthorizeByFirstStep_Precedent {
  struct C_Data_UserAuthorization_AuthorizeByFirstStep_Outcoming target;
  struct UserAuthorization_AuthorizeByFirstStep_Precedent precedent;
  bool is_target;
} C_UnifiedReport_UserAuthorization_AuthorizeByFirstStep_Outcoming__UserAuthorization_AuthorizeByFirstStep_Precedent;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_AuthorizeByFirstStep_Outcoming__UserAuthorization_AuthorizeByFirstStep_Precedent {
  struct C_UnifiedReport_UserAuthorization_AuthorizeByFirstStep_Outcoming__UserAuthorization_AuthorizeByFirstStep_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_UserAuthorization_AuthorizeByFirstStep_Outcoming__UserAuthorization_AuthorizeByFirstStep_Precedent;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_AuthorizeByFirstStep_Outcoming__UserAuthorization_AuthorizeByFirstStep_Precedent UserAuthorization_AuthorizeByFirstStep___C_Result;

typedef struct UserAuthorization_AuthorizeByLastStep_Incoming {
  long user__id;
  struct C_String user_device__id;
  struct C_String user_authorization_token__value;
} UserAuthorization_AuthorizeByLastStep_Incoming;

typedef struct UserAccessTokenEncoded {
  struct C_Vector_c_uchar serialized;
  struct C_Vector_c_uchar encoded;
} UserAccessTokenEncoded;

typedef struct UserAccessRefreshTokenEncoded {
  struct C_Vector_c_uchar _0;
} UserAccessRefreshTokenEncoded;

typedef struct UserAuthorization_AuthorizeByLastStep_Outcoming {
  struct UserAccessTokenEncoded user_access_token_encoded;
  struct UserAccessRefreshTokenEncoded user_access_refresh_token_encoded;
} UserAuthorization_AuthorizeByLastStep_Outcoming;

typedef struct C_Data_UserAuthorization_AuthorizeByLastStep_Outcoming {
  struct UserAuthorization_AuthorizeByLastStep_Outcoming filled;
  bool is_filled;
} C_Data_UserAuthorization_AuthorizeByLastStep_Outcoming;

typedef struct UserAuthorizationToken_WrongValue {
  bool is_exist;
  short user_authorization_token__wrong_enter_tries_quantity;
} UserAuthorizationToken_WrongValue;

typedef struct UserAuthorization_AuthorizeByLastStep_Precedent {
  bool user_authorization_token__not_found;
  bool user_authorization_token__already_expired;
  struct UserAuthorizationToken_WrongValue user_authorization_token__wrong_value;
  bool user__not_found;
} UserAuthorization_AuthorizeByLastStep_Precedent;

typedef struct C_UnifiedReport_UserAuthorization_AuthorizeByLastStep_Outcoming__UserAuthorization_AuthorizeByLastStep_Precedent {
  struct C_Data_UserAuthorization_AuthorizeByLastStep_Outcoming target;
  struct UserAuthorization_AuthorizeByLastStep_Precedent precedent;
  bool is_target;
} C_UnifiedReport_UserAuthorization_AuthorizeByLastStep_Outcoming__UserAuthorization_AuthorizeByLastStep_Precedent;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_AuthorizeByLastStep_Outcoming__UserAuthorization_AuthorizeByLastStep_Precedent {
  struct C_UnifiedReport_UserAuthorization_AuthorizeByLastStep_Outcoming__UserAuthorization_AuthorizeByLastStep_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_UserAuthorization_AuthorizeByLastStep_Outcoming__UserAuthorization_AuthorizeByLastStep_Precedent;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_AuthorizeByLastStep_Outcoming__UserAuthorization_AuthorizeByLastStep_Precedent UserAuthorization_AuthorizeByLastStep___C_Result;

typedef struct UserAuthorization_CheckEmailForExisting_Incoming {
  struct C_String user__email;
} UserAuthorization_CheckEmailForExisting_Incoming;

typedef struct UserAuthorization_CheckEmailForExisting_Outcoming {
  bool result;
} UserAuthorization_CheckEmailForExisting_Outcoming;

typedef struct C_Data_UserAuthorization_CheckEmailForExisting_Outcoming {
  struct UserAuthorization_CheckEmailForExisting_Outcoming filled;
  bool is_filled;
} C_Data_UserAuthorization_CheckEmailForExisting_Outcoming;

typedef struct C_Void {
  bool _inner;
} C_Void;

typedef struct C_UnifiedReport_UserAuthorization_CheckEmailForExisting_Outcoming__C_Void {
  struct C_Data_UserAuthorization_CheckEmailForExisting_Outcoming target;
  struct C_Void precedent;
  bool is_target;
} C_UnifiedReport_UserAuthorization_CheckEmailForExisting_Outcoming__C_Void;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_CheckEmailForExisting_Outcoming__C_Void {
  struct C_UnifiedReport_UserAuthorization_CheckEmailForExisting_Outcoming__C_Void data;
  bool is_data;
} C_Result_C_UnifiedReport_UserAuthorization_CheckEmailForExisting_Outcoming__C_Void;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_CheckEmailForExisting_Outcoming__C_Void UserAuthorization_CheckEmailForExisting___C_Result;

typedef struct UserAuthorization_CheckNicknameForExisting_Incoming {
  struct C_String user__nickname;
} UserAuthorization_CheckNicknameForExisting_Incoming;

typedef struct UserAuthorization_CheckNicknameForExisting_Outcoming {
  bool result;
} UserAuthorization_CheckNicknameForExisting_Outcoming;

typedef struct C_Data_UserAuthorization_CheckNicknameForExisting_Outcoming {
  struct UserAuthorization_CheckNicknameForExisting_Outcoming filled;
  bool is_filled;
} C_Data_UserAuthorization_CheckNicknameForExisting_Outcoming;

typedef struct C_UnifiedReport_UserAuthorization_CheckNicknameForExisting_Outcoming__C_Void {
  struct C_Data_UserAuthorization_CheckNicknameForExisting_Outcoming target;
  struct C_Void precedent;
  bool is_target;
} C_UnifiedReport_UserAuthorization_CheckNicknameForExisting_Outcoming__C_Void;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_CheckNicknameForExisting_Outcoming__C_Void {
  struct C_UnifiedReport_UserAuthorization_CheckNicknameForExisting_Outcoming__C_Void data;
  bool is_data;
} C_Result_C_UnifiedReport_UserAuthorization_CheckNicknameForExisting_Outcoming__C_Void;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_CheckNicknameForExisting_Outcoming__C_Void UserAuthorization_CheckNicknameForExisting___C_Result;

typedef struct UserAuthorization_DeauthorizeFromAllDevices_Incoming {
  struct UserAccessTokenEncoded user_access_token_encoded;
} UserAuthorization_DeauthorizeFromAllDevices_Incoming;

typedef struct C_Data_C_Void {
  struct C_Void filled;
  bool is_filled;
} C_Data_C_Void;

typedef struct UserAuthorization_DeauthorizeFromAllDevices_Precedent {
  bool user_access_token__already_expired;
  bool user_access_token__in_user_access_token_black_list;
} UserAuthorization_DeauthorizeFromAllDevices_Precedent;

typedef struct C_UnifiedReport_C_Void__UserAuthorization_DeauthorizeFromAllDevices_Precedent {
  struct C_Data_C_Void target;
  struct UserAuthorization_DeauthorizeFromAllDevices_Precedent precedent;
  bool is_target;
} C_UnifiedReport_C_Void__UserAuthorization_DeauthorizeFromAllDevices_Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__UserAuthorization_DeauthorizeFromAllDevices_Precedent {
  struct C_UnifiedReport_C_Void__UserAuthorization_DeauthorizeFromAllDevices_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_C_Void__UserAuthorization_DeauthorizeFromAllDevices_Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__UserAuthorization_DeauthorizeFromAllDevices_Precedent UserAuthorization_DeauthorizeFromAllDevices___C_Result;

typedef struct UserAuthorization_DeauthorizeFromOneDevice_Incoming {
  struct UserAccessTokenEncoded user_access_token_encoded;
} UserAuthorization_DeauthorizeFromOneDevice_Incoming;

typedef struct UserAuthorization_DeauthorizeFromOneDevice_Precedent {
  bool user_access_token__already_expired;
  bool user_access_token__in_user_access_token_black_list;
} UserAuthorization_DeauthorizeFromOneDevice_Precedent;

typedef struct C_UnifiedReport_C_Void__UserAuthorization_DeauthorizeFromOneDevice_Precedent {
  struct C_Data_C_Void target;
  struct UserAuthorization_DeauthorizeFromOneDevice_Precedent precedent;
  bool is_target;
} C_UnifiedReport_C_Void__UserAuthorization_DeauthorizeFromOneDevice_Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__UserAuthorization_DeauthorizeFromOneDevice_Precedent {
  struct C_UnifiedReport_C_Void__UserAuthorization_DeauthorizeFromOneDevice_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_C_Void__UserAuthorization_DeauthorizeFromOneDevice_Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__UserAuthorization_DeauthorizeFromOneDevice_Precedent UserAuthorization_DeauthorizeFromOneDevice___C_Result;

typedef struct UserAuthorization_RefreshAccessToken_Incoming {
  struct UserAccessTokenEncoded user_access_token_encoded;
  struct UserAccessRefreshTokenEncoded user_access_refresh_token_encoded;
} UserAuthorization_RefreshAccessToken_Incoming;

typedef struct UserAuthorization_RefreshAccessToken_Outcoming {
  struct UserAccessTokenEncoded user_access_token_encoded;
  struct UserAccessRefreshTokenEncoded user_access_refresh_token_encoded;
} UserAuthorization_RefreshAccessToken_Outcoming;

typedef struct C_Data_UserAuthorization_RefreshAccessToken_Outcoming {
  struct UserAuthorization_RefreshAccessToken_Outcoming filled;
  bool is_filled;
} C_Data_UserAuthorization_RefreshAccessToken_Outcoming;

typedef struct UserAuthorization_RefreshAccessToken_Precedent {
  bool user_access_refresh_token__not_found;
  bool user_access_refresh_token__already_expired;
} UserAuthorization_RefreshAccessToken_Precedent;

typedef struct C_UnifiedReport_UserAuthorization_RefreshAccessToken_Outcoming__UserAuthorization_RefreshAccessToken_Precedent {
  struct C_Data_UserAuthorization_RefreshAccessToken_Outcoming target;
  struct UserAuthorization_RefreshAccessToken_Precedent precedent;
  bool is_target;
} C_UnifiedReport_UserAuthorization_RefreshAccessToken_Outcoming__UserAuthorization_RefreshAccessToken_Precedent;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_RefreshAccessToken_Outcoming__UserAuthorization_RefreshAccessToken_Precedent {
  struct C_UnifiedReport_UserAuthorization_RefreshAccessToken_Outcoming__UserAuthorization_RefreshAccessToken_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_UserAuthorization_RefreshAccessToken_Outcoming__UserAuthorization_RefreshAccessToken_Precedent;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_RefreshAccessToken_Outcoming__UserAuthorization_RefreshAccessToken_Precedent UserAuthorization_RefreshAccessToken_C_Result;

typedef struct UserAuthorization_RegisterByFirstStep_Incoming {
  struct C_String user__email;
  struct C_String user_device__id;
} UserAuthorization_RegisterByFirstStep_Incoming;

typedef struct UserAuthorization_RegisterByFirstStep_Outcoming {
  bool verification_message_sent;
  long user_registration_token__can_be_resent_from;
  short user_registration_token__wrong_enter_tries_quantity;
  short user_registration_token__wrong_enter_tries_quantity_limit;
} UserAuthorization_RegisterByFirstStep_Outcoming;

typedef struct C_Data_UserAuthorization_RegisterByFirstStep_Outcoming {
  struct UserAuthorization_RegisterByFirstStep_Outcoming filled;
  bool is_filled;
} C_Data_UserAuthorization_RegisterByFirstStep_Outcoming;

typedef struct UserAuthorization_RegisterByFirstStep_Precedent {
  bool user__email_already_exist;
} UserAuthorization_RegisterByFirstStep_Precedent;

typedef struct C_UnifiedReport_UserAuthorization_RegisterByFirstStep_Outcoming__UserAuthorization_RegisterByFirstStep_Precedent {
  struct C_Data_UserAuthorization_RegisterByFirstStep_Outcoming target;
  struct UserAuthorization_RegisterByFirstStep_Precedent precedent;
  bool is_target;
} C_UnifiedReport_UserAuthorization_RegisterByFirstStep_Outcoming__UserAuthorization_RegisterByFirstStep_Precedent;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_RegisterByFirstStep_Outcoming__UserAuthorization_RegisterByFirstStep_Precedent {
  struct C_UnifiedReport_UserAuthorization_RegisterByFirstStep_Outcoming__UserAuthorization_RegisterByFirstStep_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_UserAuthorization_RegisterByFirstStep_Outcoming__UserAuthorization_RegisterByFirstStep_Precedent;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_RegisterByFirstStep_Outcoming__UserAuthorization_RegisterByFirstStep_Precedent UserAuthorization_RegisterByFirstStep___C_Result;

typedef struct UserAuthorization_RegisterBySecondStep_Incoming {
  struct C_String user__email;
  struct C_String user_device__id;
  struct C_String user_registration_token__value;
} UserAuthorization_RegisterBySecondStep_Incoming;

typedef struct UserRegistrationToken_WrongValue {
  bool is_exist;
  short user_registration_token__wrong_enter_tries_quantity;
} UserRegistrationToken_WrongValue;

typedef struct UserAuthorization_RegisterBySecondStep_Precedent {
  bool user_registration_token__not_found;
  bool user_registration_token__already_expired;
  bool user_registration_token__already_approved;
  struct UserRegistrationToken_WrongValue user_registration_token__wrong_value;
} UserAuthorization_RegisterBySecondStep_Precedent;

typedef struct C_UnifiedReport_C_Void__UserAuthorization_RegisterBySecondStep_Precedent {
  struct C_Data_C_Void target;
  struct UserAuthorization_RegisterBySecondStep_Precedent precedent;
  bool is_target;
} C_UnifiedReport_C_Void__UserAuthorization_RegisterBySecondStep_Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__UserAuthorization_RegisterBySecondStep_Precedent {
  struct C_UnifiedReport_C_Void__UserAuthorization_RegisterBySecondStep_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_C_Void__UserAuthorization_RegisterBySecondStep_Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__UserAuthorization_RegisterBySecondStep_Precedent UserAuthorization_RegisterBySecondStep___C_Result;

typedef struct UserAuthorization_RegisterByLastStep_Incoming {
  struct C_String user_device__id;
  struct C_String user__nickname;
  struct C_String user__password;
  struct C_String user__email;
  struct C_String user_registration_token__value;
} UserAuthorization_RegisterByLastStep_Incoming;

typedef struct UserAuthorization_RegisterByLastStep_Outcoming {
  struct UserAccessTokenEncoded user_access_token_encoded;
  struct UserAccessRefreshTokenEncoded user_access_refresh_token_encoded;
} UserAuthorization_RegisterByLastStep_Outcoming;

typedef struct C_Data_UserAuthorization_RegisterByLastStep_Outcoming {
  struct UserAuthorization_RegisterByLastStep_Outcoming filled;
  bool is_filled;
} C_Data_UserAuthorization_RegisterByLastStep_Outcoming;

typedef struct UserAuthorization_RegisterByLastStep_Precedent {
  bool user__nickname_already_exist;
  bool user__email_already_exist;
  bool user_registration_token__not_found;
  bool user_registration_token__already_expired;
  bool user_registration_token__is_not_approved;
  bool user_registration_token__wrong_value;
} UserAuthorization_RegisterByLastStep_Precedent;

typedef struct C_UnifiedReport_UserAuthorization_RegisterByLastStep_Outcoming__UserAuthorization_RegisterByLastStep_Precedent {
  struct C_Data_UserAuthorization_RegisterByLastStep_Outcoming target;
  struct UserAuthorization_RegisterByLastStep_Precedent precedent;
  bool is_target;
} C_UnifiedReport_UserAuthorization_RegisterByLastStep_Outcoming__UserAuthorization_RegisterByLastStep_Precedent;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_RegisterByLastStep_Outcoming__UserAuthorization_RegisterByLastStep_Precedent {
  struct C_UnifiedReport_UserAuthorization_RegisterByLastStep_Outcoming__UserAuthorization_RegisterByLastStep_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_UserAuthorization_RegisterByLastStep_Outcoming__UserAuthorization_RegisterByLastStep_Precedent;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_RegisterByLastStep_Outcoming__UserAuthorization_RegisterByLastStep_Precedent UserAuthorization_RegisterByLastStep___C_Result;

typedef struct UserAuthorization_ResetPasswordByFirstStep_Incoming {
  struct C_String user__email;
  struct C_String user_device__id;
} UserAuthorization_ResetPasswordByFirstStep_Incoming;

typedef struct UserAuthorization_ResetPasswordByFirstStep_Outcoming {
  long user__id;
  bool verification_message_sent;
  long user_reset_password_token__can_be_resent_from;
  short user_reset_password_token__wrong_enter_tries_quantity;
  short user_reset_password_token__wrong_enter_tries_quantity_limit;
} UserAuthorization_ResetPasswordByFirstStep_Outcoming;

typedef struct C_Data_UserAuthorization_ResetPasswordByFirstStep_Outcoming {
  struct UserAuthorization_ResetPasswordByFirstStep_Outcoming filled;
  bool is_filled;
} C_Data_UserAuthorization_ResetPasswordByFirstStep_Outcoming;

typedef struct UserAuthorization_ResetPasswordByFirstStep_Precedent {
  bool user__not_found;
} UserAuthorization_ResetPasswordByFirstStep_Precedent;

typedef struct C_UnifiedReport_UserAuthorization_ResetPasswordByFirstStep_Outcoming__UserAuthorization_ResetPasswordByFirstStep_Precedent {
  struct C_Data_UserAuthorization_ResetPasswordByFirstStep_Outcoming target;
  struct UserAuthorization_ResetPasswordByFirstStep_Precedent precedent;
  bool is_target;
} C_UnifiedReport_UserAuthorization_ResetPasswordByFirstStep_Outcoming__UserAuthorization_ResetPasswordByFirstStep_Precedent;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_ResetPasswordByFirstStep_Outcoming__UserAuthorization_ResetPasswordByFirstStep_Precedent {
  struct C_UnifiedReport_UserAuthorization_ResetPasswordByFirstStep_Outcoming__UserAuthorization_ResetPasswordByFirstStep_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_UserAuthorization_ResetPasswordByFirstStep_Outcoming__UserAuthorization_ResetPasswordByFirstStep_Precedent;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_ResetPasswordByFirstStep_Outcoming__UserAuthorization_ResetPasswordByFirstStep_Precedent UserAuthorization_ResetPasswordByFirstStep___C_Result;

typedef struct UserAuthorization_ResetPasswordBySecondStep_Incoming {
  long user__id;
  struct C_String user_device__id;
  struct C_String user_reset_password_token__value;
} UserAuthorization_ResetPasswordBySecondStep_Incoming;

typedef struct UserResetPasswordToken_WrongValue {
  bool is_exist;
  short user_reset_password_token__wrong_enter_tries_quantity;
} UserResetPasswordToken_WrongValue;

typedef struct UserAuthorization_ResetPasswordBySecondStep_Precedent {
  bool user_reset_password_token__not_found;
  bool user_reset_password_token__already_expired;
  bool user_reset_password_token__already_approved;
  struct UserResetPasswordToken_WrongValue user_reset_password_token__wrong_value;
} UserAuthorization_ResetPasswordBySecondStep_Precedent;

typedef struct C_UnifiedReport_C_Void__UserAuthorization_ResetPasswordBySecondStep_Precedent {
  struct C_Data_C_Void target;
  struct UserAuthorization_ResetPasswordBySecondStep_Precedent precedent;
  bool is_target;
} C_UnifiedReport_C_Void__UserAuthorization_ResetPasswordBySecondStep_Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__UserAuthorization_ResetPasswordBySecondStep_Precedent {
  struct C_UnifiedReport_C_Void__UserAuthorization_ResetPasswordBySecondStep_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_C_Void__UserAuthorization_ResetPasswordBySecondStep_Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__UserAuthorization_ResetPasswordBySecondStep_Precedent UserAuthorization_ResetPasswordBySecondStep___C_Result;

typedef struct UserAuthorization_ResetPasswordByLastStep_Incoming {
  long user__id;
  struct C_String user_device__id;
  struct C_String user__password;
  struct C_String user_reset_password_token__value;
} UserAuthorization_ResetPasswordByLastStep_Incoming;

typedef struct UserAuthorization_ResetPasswordByLastStep_Precedent {
  bool user__not_found;
  bool user_reset_password_token__not_found;
  bool user_reset_password_token__already_expired;
  bool user_reset_password_token__is_not_approved;
  bool user_reset_password_token__wrong_value;
} UserAuthorization_ResetPasswordByLastStep_Precedent;

typedef struct C_UnifiedReport_C_Void__UserAuthorization_ResetPasswordByLastStep_Precedent {
  struct C_Data_C_Void target;
  struct UserAuthorization_ResetPasswordByLastStep_Precedent precedent;
  bool is_target;
} C_UnifiedReport_C_Void__UserAuthorization_ResetPasswordByLastStep_Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__UserAuthorization_ResetPasswordByLastStep_Precedent {
  struct C_UnifiedReport_C_Void__UserAuthorization_ResetPasswordByLastStep_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_C_Void__UserAuthorization_ResetPasswordByLastStep_Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__UserAuthorization_ResetPasswordByLastStep_Precedent UserAuthorization_ResetPasswordByLastStep___C_Result;

typedef struct UserAuthorization_SendEmailForRegister_Incoming {
  struct C_String user__email;
  struct C_String user_device__id;
} UserAuthorization_SendEmailForRegister_Incoming;

typedef struct UserAuthorization_SendEmailForRegister_Outcoming {
  long user_registration_token__can_be_resent_from;
} UserAuthorization_SendEmailForRegister_Outcoming;

typedef struct C_Data_UserAuthorization_SendEmailForRegister_Outcoming {
  struct UserAuthorization_SendEmailForRegister_Outcoming filled;
  bool is_filled;
} C_Data_UserAuthorization_SendEmailForRegister_Outcoming;

typedef struct UserAuthorization_SendEmailForRegister_Precedent {
  bool user_registration_token__not_found;
  bool user_registration_token__already_expired;
  bool user_registration_token__already_approved;
  bool user_registration_token__time_to_resend_has_not_come;
} UserAuthorization_SendEmailForRegister_Precedent;

typedef struct C_UnifiedReport_UserAuthorization_SendEmailForRegister_Outcoming__UserAuthorization_SendEmailForRegister_Precedent {
  struct C_Data_UserAuthorization_SendEmailForRegister_Outcoming target;
  struct UserAuthorization_SendEmailForRegister_Precedent precedent;
  bool is_target;
} C_UnifiedReport_UserAuthorization_SendEmailForRegister_Outcoming__UserAuthorization_SendEmailForRegister_Precedent;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_SendEmailForRegister_Outcoming__UserAuthorization_SendEmailForRegister_Precedent {
  struct C_UnifiedReport_UserAuthorization_SendEmailForRegister_Outcoming__UserAuthorization_SendEmailForRegister_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_UserAuthorization_SendEmailForRegister_Outcoming__UserAuthorization_SendEmailForRegister_Precedent;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_SendEmailForRegister_Outcoming__UserAuthorization_SendEmailForRegister_Precedent UserAuthorization_SendEmailForRegister___C_Result;

typedef struct UserAuthorization_SendEmailForAuthorize_Incoming {
  struct C_String user_device__id;
  long user__id;
} UserAuthorization_SendEmailForAuthorize_Incoming;

typedef struct UserAuthorization_SendEmailForAuthorize_Outcoming {
  long user_authorization_token__can_be_resent_from;
} UserAuthorization_SendEmailForAuthorize_Outcoming;

typedef struct C_Data_UserAuthorization_SendEmailForAuthorize_Outcoming {
  struct UserAuthorization_SendEmailForAuthorize_Outcoming filled;
  bool is_filled;
} C_Data_UserAuthorization_SendEmailForAuthorize_Outcoming;

typedef struct UserAuthorization_SendEmailForAuthorize_Precedent {
  bool user__not_found;
  bool user_authorization_token__not_found;
  bool user_authorization_token__already_expired;
  bool user_authorization_token__time_to_resend_has_not_come;
} UserAuthorization_SendEmailForAuthorize_Precedent;

typedef struct C_UnifiedReport_UserAuthorization_SendEmailForAuthorize_Outcoming__UserAuthorization_SendEmailForAuthorize_Precedent {
  struct C_Data_UserAuthorization_SendEmailForAuthorize_Outcoming target;
  struct UserAuthorization_SendEmailForAuthorize_Precedent precedent;
  bool is_target;
} C_UnifiedReport_UserAuthorization_SendEmailForAuthorize_Outcoming__UserAuthorization_SendEmailForAuthorize_Precedent;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_SendEmailForAuthorize_Outcoming__UserAuthorization_SendEmailForAuthorize_Precedent {
  struct C_UnifiedReport_UserAuthorization_SendEmailForAuthorize_Outcoming__UserAuthorization_SendEmailForAuthorize_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_UserAuthorization_SendEmailForAuthorize_Outcoming__UserAuthorization_SendEmailForAuthorize_Precedent;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_SendEmailForAuthorize_Outcoming__UserAuthorization_SendEmailForAuthorize_Precedent UserAuthorization_SendEmailForAuthorize___C_Result;

typedef struct UserAuthorization_SendEmailForResetPassword_Incoming {
  long user__id;
  struct C_String user_device__id;
} UserAuthorization_SendEmailForResetPassword_Incoming;

typedef struct UserAuthorization_SendEmailForResetPassword_Outcoming {
  long user_resep_password_token_can_be_resent_from;
} UserAuthorization_SendEmailForResetPassword_Outcoming;

typedef struct C_Data_UserAuthorization_SendEmailForResetPassword_Outcoming {
  struct UserAuthorization_SendEmailForResetPassword_Outcoming filled;
  bool is_filled;
} C_Data_UserAuthorization_SendEmailForResetPassword_Outcoming;

typedef struct UserAuthorization_SendEmailForResetPassword_Precedent {
  bool user__not_found;
  bool user_reset_password_token__not_found;
  bool user_reset_password_token__already_expired;
  bool user_reset_password_token__already_approved;
  bool user_reset_password_token__time_to_resend_has_not_come;
} UserAuthorization_SendEmailForResetPassword_Precedent;

typedef struct C_UnifiedReport_UserAuthorization_SendEmailForResetPassword_Outcoming__UserAuthorization_SendEmailForResetPassword_Precedent {
  struct C_Data_UserAuthorization_SendEmailForResetPassword_Outcoming target;
  struct UserAuthorization_SendEmailForResetPassword_Precedent precedent;
  bool is_target;
} C_UnifiedReport_UserAuthorization_SendEmailForResetPassword_Outcoming__UserAuthorization_SendEmailForResetPassword_Precedent;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_SendEmailForResetPassword_Outcoming__UserAuthorization_SendEmailForResetPassword_Precedent {
  struct C_UnifiedReport_UserAuthorization_SendEmailForResetPassword_Outcoming__UserAuthorization_SendEmailForResetPassword_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_UserAuthorization_SendEmailForResetPassword_Outcoming__UserAuthorization_SendEmailForResetPassword_Precedent;

typedef struct C_Result_C_UnifiedReport_UserAuthorization_SendEmailForResetPassword_Outcoming__UserAuthorization_SendEmailForResetPassword_Precedent UserAuthorization_SendEmailForResetPassword___C_Result;

typedef struct C_Option_C_String {
  struct C_String data;
  bool is_data;
} C_Option_C_String;

typedef struct Channel_GetManyByNameInSubscriptions_Incoming {
  struct UserAccessTokenEncoded user_access_token_encoded;
  struct C_String channel__name;
  struct C_Option_C_String requery___channel__name;
  short limit;
} Channel_GetManyByNameInSubscriptions_Incoming;

typedef struct Channel1 {
  long channel__id;
  struct C_String channel__name;
  struct C_String channel__linked_name;
  short channel__access_modifier;
  short channel__visability_modifier;
  struct C_Option_C_String channel__cover_image_path;
  struct C_Option_C_String channel__background_image_path;
} Channel1;

typedef struct Common1 {
  struct Channel1 channel;
  bool is_user_subscribed;
} Common1;

typedef struct C_Vector_Common1 {
  struct Common1 *pointer;
  size_t length;
} C_Vector_Common1;

typedef struct Channel_GetManyByNameInSubscriptions_Outcoming {
  struct C_Vector_Common1 common_registry;
} Channel_GetManyByNameInSubscriptions_Outcoming;

typedef struct C_Data_Channel_GetManyByNameInSubscriptions_Outcoming {
  struct Channel_GetManyByNameInSubscriptions_Outcoming filled;
  bool is_filled;
} C_Data_Channel_GetManyByNameInSubscriptions_Outcoming;

typedef struct Channel_GetManyByNameInSubscriptions_Precedent {
  bool user_access_token__already_expired;
  bool user_access_token__in_user_access_token_black_list;
} Channel_GetManyByNameInSubscriptions_Precedent;

typedef struct C_UnifiedReport_Channel_GetManyByNameInSubscriptions_Outcoming__Channel_GetManyByNameInSubscriptions_Precedent {
  struct C_Data_Channel_GetManyByNameInSubscriptions_Outcoming target;
  struct Channel_GetManyByNameInSubscriptions_Precedent precedent;
  bool is_target;
} C_UnifiedReport_Channel_GetManyByNameInSubscriptions_Outcoming__Channel_GetManyByNameInSubscriptions_Precedent;

typedef struct C_Result_C_UnifiedReport_Channel_GetManyByNameInSubscriptions_Outcoming__Channel_GetManyByNameInSubscriptions_Precedent {
  struct C_UnifiedReport_Channel_GetManyByNameInSubscriptions_Outcoming__Channel_GetManyByNameInSubscriptions_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_Channel_GetManyByNameInSubscriptions_Outcoming__Channel_GetManyByNameInSubscriptions_Precedent;

typedef struct C_Result_C_UnifiedReport_Channel_GetManyByNameInSubscriptions_Outcoming__Channel_GetManyByNameInSubscriptions_Precedent Channel_GetManyByNameInSubscriptions___C_Result;

typedef struct C_Option_c_long {
  long data;
  bool is_data;
} C_Option_c_long;

typedef struct Channel_GetManyBySubscription_Incoming {
  struct UserAccessTokenEncoded user_access_token_encoded;
  struct C_Option_c_long requery___channel__id;
  short limit;
} Channel_GetManyBySubscription_Incoming;

typedef struct Channel_GetManyBySubscription_Outcoming {
  struct C_Vector_Common1 common_registry;
} Channel_GetManyBySubscription_Outcoming;

typedef struct C_Data_Channel_GetManyBySubscription_Outcoming {
  struct Channel_GetManyBySubscription_Outcoming filled;
  bool is_filled;
} C_Data_Channel_GetManyBySubscription_Outcoming;

typedef struct Channel_GetManyBySubscription_Precedent {
  bool user_access_token__already_expired;
  bool user_access_token__in_user_access_token_black_list;
} Channel_GetManyBySubscription_Precedent;

typedef struct C_UnifiedReport_Channel_GetManyBySubscription_Outcoming__Channel_GetManyBySubscription_Precedent {
  struct C_Data_Channel_GetManyBySubscription_Outcoming target;
  struct Channel_GetManyBySubscription_Precedent precedent;
  bool is_target;
} C_UnifiedReport_Channel_GetManyBySubscription_Outcoming__Channel_GetManyBySubscription_Precedent;

typedef struct C_Result_C_UnifiedReport_Channel_GetManyBySubscription_Outcoming__Channel_GetManyBySubscription_Precedent {
  struct C_UnifiedReport_Channel_GetManyBySubscription_Outcoming__Channel_GetManyBySubscription_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_Channel_GetManyBySubscription_Outcoming__Channel_GetManyBySubscription_Precedent;

typedef struct C_Result_C_UnifiedReport_Channel_GetManyBySubscription_Outcoming__Channel_GetManyBySubscription_Precedent Channel_GetManyBySubscription_C_Result;

typedef struct Channel_GetManyPublicByName_Incoming {
  struct UserAccessTokenEncoded user_access_token_encoded;
  struct C_String channel__name;
  struct C_Option_C_String requery___channel__name;
  short limit;
} Channel_GetManyPublicByName_Incoming;

typedef struct Channel_GetManyPublicByName_Outcoming {
  struct C_Vector_Common1 common_registry;
} Channel_GetManyPublicByName_Outcoming;

typedef struct C_Data_Channel_GetManyPublicByName_Outcoming {
  struct Channel_GetManyPublicByName_Outcoming filled;
  bool is_filled;
} C_Data_Channel_GetManyPublicByName_Outcoming;

typedef struct Channel_GetManyPublicByName_Precedent {
  bool user_access_token__already_expired;
  bool user_access_token__in_user_access_token_black_list;
} Channel_GetManyPublicByName_Precedent;

typedef struct C_UnifiedReport_Channel_GetManyPublicByName_Outcoming__Channel_GetManyPublicByName_Precedent {
  struct C_Data_Channel_GetManyPublicByName_Outcoming target;
  struct Channel_GetManyPublicByName_Precedent precedent;
  bool is_target;
} C_UnifiedReport_Channel_GetManyPublicByName_Outcoming__Channel_GetManyPublicByName_Precedent;

typedef struct C_Result_C_UnifiedReport_Channel_GetManyPublicByName_Outcoming__Channel_GetManyPublicByName_Precedent {
  struct C_UnifiedReport_Channel_GetManyPublicByName_Outcoming__Channel_GetManyPublicByName_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_Channel_GetManyPublicByName_Outcoming__Channel_GetManyPublicByName_Precedent;

typedef struct C_Result_C_UnifiedReport_Channel_GetManyPublicByName_Outcoming__Channel_GetManyPublicByName_Precedent Channel_GetManyPublicByName___C_Result;

typedef struct Channel_GetOneById_Incoming {
  struct UserAccessTokenEncoded user_access_token_encoded;
  long channel__id;
} Channel_GetOneById_Incoming;

typedef struct C_Vector_c_short {
  short *pointer;
  size_t length;
} C_Vector_c_short;

typedef struct Channel2 {
  long channel__owner;
  struct C_String channel__name;
  struct C_String channel__linked_name;
  struct C_Option_C_String channel__description;
  short channel__access_modifier;
  short channel__visability_modifier;
  struct C_Vector_c_short channel__orientation;
  struct C_Option_C_String channel__cover_image_path;
  struct C_Option_C_String channel__background_image_path;
  long channel__subscribers_quantity;
  long channel__marks_quantity;
  long channel__viewing_quantity;
} Channel2;

typedef struct ChannelInnerLink1 {
  long channel_inner_link__to;
} ChannelInnerLink1;

typedef struct C_Vector_ChannelInnerLink1 {
  struct ChannelInnerLink1 *pointer;
  size_t length;
} C_Vector_ChannelInnerLink1;

typedef struct ChannelOuterLink1 {
  struct C_String channel_outer_link__alias;
  struct C_String channel_outer_link__address;
} ChannelOuterLink1;

typedef struct C_Vector_ChannelOuterLink1 {
  struct ChannelOuterLink1 *pointer;
  size_t length;
} C_Vector_ChannelOuterLink1;

typedef struct Channel_GetOneById_Outcoming {
  struct Channel2 channel;
  struct C_Vector_ChannelInnerLink1 channel_inner_link_registry;
  struct C_Vector_ChannelOuterLink1 channel_outer_link_registry;
} Channel_GetOneById_Outcoming;

typedef struct C_Data_Channel_GetOneById_Outcoming {
  struct Channel_GetOneById_Outcoming filled;
  bool is_filled;
} C_Data_Channel_GetOneById_Outcoming;

typedef struct Channel_GetOneById_Precedent {
  bool user_access_token__already_expired;
  bool user_access_token__in_user_access_token_black_list;
  bool channel__not_found;
  bool channel__is_close;
} Channel_GetOneById_Precedent;

typedef struct C_UnifiedReport_Channel_GetOneById_Outcoming__Channel_GetOneById_Precedent {
  struct C_Data_Channel_GetOneById_Outcoming target;
  struct Channel_GetOneById_Precedent precedent;
  bool is_target;
} C_UnifiedReport_Channel_GetOneById_Outcoming__Channel_GetOneById_Precedent;

typedef struct C_Result_C_UnifiedReport_Channel_GetOneById_Outcoming__Channel_GetOneById_Precedent {
  struct C_UnifiedReport_Channel_GetOneById_Outcoming__Channel_GetOneById_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_Channel_GetOneById_Outcoming__Channel_GetOneById_Precedent;

typedef struct C_Result_C_UnifiedReport_Channel_GetOneById_Outcoming__Channel_GetOneById_Precedent Channel_GetOneById___C_Result;

typedef struct ChannelSubscription_Create_Incoming {
  struct UserAccessTokenEncoded user_access_token_encoded;
  long channel__id;
} ChannelSubscription_Create_Incoming;

typedef struct ChannelSubscription_Create_Precedent {
  bool user_access_token__already_expired;
  bool user_access_token__in_user_access_token_black_list;
  bool channel__not_found;
  bool channel__is_close;
  bool user__is_channel__owner;
} ChannelSubscription_Create_Precedent;

typedef struct C_UnifiedReport_C_Void__ChannelSubscription_Create_Precedent {
  struct C_Data_C_Void target;
  struct ChannelSubscription_Create_Precedent precedent;
  bool is_target;
} C_UnifiedReport_C_Void__ChannelSubscription_Create_Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__ChannelSubscription_Create_Precedent {
  struct C_UnifiedReport_C_Void__ChannelSubscription_Create_Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_C_Void__ChannelSubscription_Create_Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__ChannelSubscription_Create_Precedent ChannelSubscription_Create___C_Result;

struct C_Result_C_Vector_c_uchar *user___authorization____authorize_by_first_step____serialize____allocate(struct UserAuthorization_AuthorizeByFirstStep_Incoming *incoming);

void user___authorization____authorize_by_first_step____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

UserAuthorization_AuthorizeByFirstStep___C_Result *user___authorization____authorize_by_first_step____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void user___authorization____authorize_by_first_step____deserialize____deallocate(UserAuthorization_AuthorizeByFirstStep___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *user___authorization____authorize_by_last_step____serialize____allocate(struct UserAuthorization_AuthorizeByLastStep_Incoming *incoming);

void user___authorization____authorize_by_last_step____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

UserAuthorization_AuthorizeByLastStep___C_Result *user___authorization____authorize_by_last_step____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void user___authorization____authorize_by_last_step____deserialize____deallocate(UserAuthorization_AuthorizeByLastStep___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *user___authorization____check_email_for_existing____serialize____allocate(struct UserAuthorization_CheckEmailForExisting_Incoming *incoming);

void user___authorization____check_email_for_existing____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

UserAuthorization_CheckEmailForExisting___C_Result *user___authorization____check_email_for_existing____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void user___authorization____check_email_for_existing____deserialize____deallocate(UserAuthorization_CheckEmailForExisting___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *user___authorization____check_nickname_for_existing____serialize____allocate(struct UserAuthorization_CheckNicknameForExisting_Incoming *incoming);

void user___authorization____check_nickname_for_existing____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

UserAuthorization_CheckNicknameForExisting___C_Result *user___authorization____check_nickname_for_existing____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void user___authorization____check_nickname_for_existing____deserialize____deallocate(UserAuthorization_CheckNicknameForExisting___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *user___authorization____deauthorize_from_all_devices____serialize____allocate(struct UserAuthorization_DeauthorizeFromAllDevices_Incoming *incoming);

void user___authorization____deauthorize_from_all_devices____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

UserAuthorization_DeauthorizeFromAllDevices___C_Result *user___authorization____deauthorize_from_all_devices____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void user___authorization____deauthorize_from_all_devices____deserialize____deallocate(UserAuthorization_DeauthorizeFromAllDevices___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *user___authorization____deauthorize_from_one_device____serialize____allocate(struct UserAuthorization_DeauthorizeFromOneDevice_Incoming *incoming);

void user___authorization____deauthorize_from_one_device____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

UserAuthorization_DeauthorizeFromOneDevice___C_Result *user___authorization____deauthorize_from_one_device____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void user___authorization____deauthorize_from_one_device____deserialize____deallocate(UserAuthorization_DeauthorizeFromOneDevice___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *user___authorization____refresh_access_token____serialize____allocate(struct UserAuthorization_RefreshAccessToken_Incoming *incoming);

void user___authorization____refresh_access_token____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

UserAuthorization_RefreshAccessToken_C_Result *user___authorization____refresh_access_token____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void user___authorization____refresh_access_token____deserialize____deallocate(UserAuthorization_RefreshAccessToken_C_Result *c_result);

struct C_Result_C_Vector_c_uchar *user___authorization____register_by_first_step____serialize____allocate(struct UserAuthorization_RegisterByFirstStep_Incoming *incoming);

void user___authorization____register_by_first_step____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

UserAuthorization_RegisterByFirstStep___C_Result *user___authorization____register_by_first_step____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void user___authorization____register_by_first_step____deserialize____deallocate(UserAuthorization_RegisterByFirstStep___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *user___authorization____register_by_second_step____serialize____allocate(struct UserAuthorization_RegisterBySecondStep_Incoming *incoming);

void user___authorization____register_by_second_step____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

UserAuthorization_RegisterBySecondStep___C_Result *user___authorization____register_by_second_step____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void user___authorization____register_by_second_step____deserialize____deallocate(UserAuthorization_RegisterBySecondStep___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *user___authorization____register_by_last_step____serialize____allocate(struct UserAuthorization_RegisterByLastStep_Incoming *incoming);

void user___authorization____register_by_last_step____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

UserAuthorization_RegisterByLastStep___C_Result *user___authorization____register_by_last_step____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void user___authorization____register_by_last_step____deserialize____deallocate(UserAuthorization_RegisterByLastStep___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *user___authorization____reset_password_by_first_step____serialize____allocate(struct UserAuthorization_ResetPasswordByFirstStep_Incoming *incoming);

void user___authorization____reset_password_by_first_step____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

UserAuthorization_ResetPasswordByFirstStep___C_Result *user___authorization____reset_password_by_first_step____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void user___authorization____reset_password_by_first_step____deserialize____deallocate(UserAuthorization_ResetPasswordByFirstStep___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *user___authorization____reset_password_by_second_step____serialize____allocate(struct UserAuthorization_ResetPasswordBySecondStep_Incoming *incoming);

void user___authorization____reset_password_by_second_step____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

UserAuthorization_ResetPasswordBySecondStep___C_Result *user___authorization____reset_password_by_second_step____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void user___authorization____reset_password_by_second_step____deserialize____deallocate(UserAuthorization_ResetPasswordBySecondStep___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *user___authorization____reset_password_by_last_step____serialize____allocate(struct UserAuthorization_ResetPasswordByLastStep_Incoming *incoming);

void user___authorization____reset_password_by_last_step____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

UserAuthorization_ResetPasswordByLastStep___C_Result *user___authorization____reset_password_by_last_step____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void user___authorization____reset_password_by_last_step____deserialize____deallocate(UserAuthorization_ResetPasswordByLastStep___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *user___authorization____send_email_for_register____serialize____allocate(struct UserAuthorization_SendEmailForRegister_Incoming *incoming);

void user___authorization____send_email_for_register____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

UserAuthorization_SendEmailForRegister___C_Result *user___authorization____send_email_for_register____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void user___authorization____send_email_for_register____deserialize____deallocate(UserAuthorization_SendEmailForRegister___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *user___authorization____send_email_for_authorize____serialize____allocate(struct UserAuthorization_SendEmailForAuthorize_Incoming *incoming);

void user___authorization____send_email_for_authorize____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

UserAuthorization_SendEmailForAuthorize___C_Result *user___authorization____send_email_for_authorize____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void user___authorization____send_email_for_authorize____deserialize____deallocate(UserAuthorization_SendEmailForAuthorize___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *user___authorization____send_email_for_reset_password____serialize____allocate(struct UserAuthorization_SendEmailForResetPassword_Incoming *incoming);

void user___authorization____send_email_for_reset_password____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

UserAuthorization_SendEmailForResetPassword___C_Result *user___authorization____send_email_for_reset_password____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void user___authorization____send_email_for_reset_password____deserialize____deallocate(UserAuthorization_SendEmailForResetPassword___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *channel___base____get_many_by_name_in_subscriptions____serialize____allocate(struct Channel_GetManyByNameInSubscriptions_Incoming *incoming);

void channel___base____get_many_by_name_in_subscriptions____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

Channel_GetManyByNameInSubscriptions___C_Result *channel___base____get_many_by_name_in_subscriptions____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void channel___base____get_many_by_name_in_subscriptions____deserialize____deallocate(Channel_GetManyByNameInSubscriptions___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *channel___base____get_many_by_subscription____serialize____allocate(struct Channel_GetManyBySubscription_Incoming *incoming);

void channel___base____get_many_by_subscription____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

Channel_GetManyBySubscription_C_Result *channel___base____get_many_by_subscription____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void channel___base____get_many_by_subscription____deserialize____deallocate(Channel_GetManyBySubscription_C_Result *c_result);

struct C_Result_C_Vector_c_uchar *channel___base____get_many_public_by_name____serialize____allocate(struct Channel_GetManyPublicByName_Incoming *incoming);

void channel___base____get_many_public_by_name____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

Channel_GetManyPublicByName___C_Result *channel___base____get_many_public_by_name____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void channel___base____get_many_public_by_name____deserialize____deallocate(Channel_GetManyPublicByName___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *channel___base____get_one_by_id____serialize____allocate(struct Channel_GetOneById_Incoming *incoming);

void channel___base____get_one_by_id____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

Channel_GetOneById___C_Result *channel___base____get_one_by_id____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void channel___base____get_one_by_id____deserialize____deallocate(Channel_GetOneById___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *channel_subscription___base____create____serialize____allocate(struct ChannelSubscription_Create_Incoming *incoming);

void channel_subscription___base____create____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

ChannelSubscription_Create___C_Result *channel_subscription___base____create____deserialize____allocate(struct C_Vector_c_uchar *c_vector_of_bytes);

void channel_subscription___base____create____deserialize____deallocate(ChannelSubscription_Create___C_Result *c_result);
