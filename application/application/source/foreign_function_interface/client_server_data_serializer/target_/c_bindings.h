#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct C_Vector_c_uchar {
  unsigned char *pointer;
  size_t length;
} C_Vector_c_uchar;

typedef struct C_Result_C_Vector_c_uchar {
  struct C_Vector_c_uchar data;
  bool is_data;
} C_Result_C_Vector_c_uchar;

typedef struct C_String {
  char *pointer;
} C_String;

typedef struct ApplicationUser__Authorization___AuthorizeByFirstStep___Incoming {
  struct C_String application_user_device__id;
  struct C_String application_user__email___or___application_user__nickname;
  struct C_String application_user__password;
} ApplicationUser__Authorization___AuthorizeByFirstStep___Incoming;

typedef struct ApplicationUser__Authorization___AuthorizeByFirstStep___Outcoming {
  long application_user__id;
  bool verification_message_sent;
  long application_user_authorization_token__can_be_resent_from;
  short application_user_authorization_token__wrong_enter_tries_quantity;
  short application_user_authorization_token__wrong_enter_tries_quantity_limit;
} ApplicationUser__Authorization___AuthorizeByFirstStep___Outcoming;

typedef struct C_Data_ApplicationUser__Authorization___AuthorizeByFirstStep___Outcoming {
  struct ApplicationUser__Authorization___AuthorizeByFirstStep___Outcoming filled;
  bool is_filled;
} C_Data_ApplicationUser__Authorization___AuthorizeByFirstStep___Outcoming;

typedef struct ApplicationUser__Authorization___AuthorizeByFirstStep___Precedent {
  bool application_user__wrong_email_or_nickname_or_password;
} ApplicationUser__Authorization___AuthorizeByFirstStep___Precedent;

typedef struct C_UnifiedReport_ApplicationUser__Authorization___AuthorizeByFirstStep___Outcoming__ApplicationUser__Authorization___AuthorizeByFirstStep___Precedent {
  struct C_Data_ApplicationUser__Authorization___AuthorizeByFirstStep___Outcoming target;
  struct ApplicationUser__Authorization___AuthorizeByFirstStep___Precedent precedent;
  bool is_target;
} C_UnifiedReport_ApplicationUser__Authorization___AuthorizeByFirstStep___Outcoming__ApplicationUser__Authorization___AuthorizeByFirstStep___Precedent;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___AuthorizeByFirstStep___Outcoming__ApplicationUser__Authorization___AuthorizeByFirstStep___Precedent {
  struct C_UnifiedReport_ApplicationUser__Authorization___AuthorizeByFirstStep___Outcoming__ApplicationUser__Authorization___AuthorizeByFirstStep___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_ApplicationUser__Authorization___AuthorizeByFirstStep___Outcoming__ApplicationUser__Authorization___AuthorizeByFirstStep___Precedent;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___AuthorizeByFirstStep___Outcoming__ApplicationUser__Authorization___AuthorizeByFirstStep___Precedent ApplicationUser__Authorization___AuthorizeByFirstStep___C_Result;

typedef struct ApplicationUser__Authorization___AuthorizeByLastStep___Incoming {
  long application_user__id;
  struct C_String application_user_device__id;
  struct C_String application_user_authorization_token__value;
} ApplicationUser__Authorization___AuthorizeByLastStep___Incoming;

typedef struct ApplicationUser__Authorization___AuthorizeByLastStep___Outcoming {
  struct C_String application_user_access_token_encrypted;
  struct C_String application_user_access_refresh_token_encrypted;
} ApplicationUser__Authorization___AuthorizeByLastStep___Outcoming;

typedef struct C_Data_ApplicationUser__Authorization___AuthorizeByLastStep___Outcoming {
  struct ApplicationUser__Authorization___AuthorizeByLastStep___Outcoming filled;
  bool is_filled;
} C_Data_ApplicationUser__Authorization___AuthorizeByLastStep___Outcoming;

typedef struct ApplicationUserAuthorizationToken_WrongValue {
  bool is_exist;
  short application_user_authorization_token__wrong_enter_tries_quantity;
} ApplicationUserAuthorizationToken_WrongValue;

typedef struct ApplicationUser__Authorization___AuthorizeByLastStep___Precedent {
  bool application_user_authorization_token__not_found;
  bool application_user_authorization_token__already_expired;
  struct ApplicationUserAuthorizationToken_WrongValue application_user_authorization_token__wrong_value;
  bool application_user__not_found;
} ApplicationUser__Authorization___AuthorizeByLastStep___Precedent;

typedef struct C_UnifiedReport_ApplicationUser__Authorization___AuthorizeByLastStep___Outcoming__ApplicationUser__Authorization___AuthorizeByLastStep___Precedent {
  struct C_Data_ApplicationUser__Authorization___AuthorizeByLastStep___Outcoming target;
  struct ApplicationUser__Authorization___AuthorizeByLastStep___Precedent precedent;
  bool is_target;
} C_UnifiedReport_ApplicationUser__Authorization___AuthorizeByLastStep___Outcoming__ApplicationUser__Authorization___AuthorizeByLastStep___Precedent;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___AuthorizeByLastStep___Outcoming__ApplicationUser__Authorization___AuthorizeByLastStep___Precedent {
  struct C_UnifiedReport_ApplicationUser__Authorization___AuthorizeByLastStep___Outcoming__ApplicationUser__Authorization___AuthorizeByLastStep___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_ApplicationUser__Authorization___AuthorizeByLastStep___Outcoming__ApplicationUser__Authorization___AuthorizeByLastStep___Precedent;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___AuthorizeByLastStep___Outcoming__ApplicationUser__Authorization___AuthorizeByLastStep___Precedent ApplicationUser__Authorization___AuthorizeByLastStep___C_Result;

typedef struct ApplicationUser__Authorization___CheckEmailForExisting___Incoming {
  struct C_String application_user__email;
} ApplicationUser__Authorization___CheckEmailForExisting___Incoming;

typedef struct ApplicationUser__Authorization___CheckEmailForExisting___Outcoming {
  bool result;
} ApplicationUser__Authorization___CheckEmailForExisting___Outcoming;

typedef struct C_Data_ApplicationUser__Authorization___CheckEmailForExisting___Outcoming {
  struct ApplicationUser__Authorization___CheckEmailForExisting___Outcoming filled;
  bool is_filled;
} C_Data_ApplicationUser__Authorization___CheckEmailForExisting___Outcoming;

typedef struct C_Void {
  bool _inner;
} C_Void;

typedef struct C_UnifiedReport_ApplicationUser__Authorization___CheckEmailForExisting___Outcoming__C_Void {
  struct C_Data_ApplicationUser__Authorization___CheckEmailForExisting___Outcoming target;
  struct C_Void precedent;
  bool is_target;
} C_UnifiedReport_ApplicationUser__Authorization___CheckEmailForExisting___Outcoming__C_Void;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___CheckEmailForExisting___Outcoming__C_Void {
  struct C_UnifiedReport_ApplicationUser__Authorization___CheckEmailForExisting___Outcoming__C_Void data;
  bool is_data;
} C_Result_C_UnifiedReport_ApplicationUser__Authorization___CheckEmailForExisting___Outcoming__C_Void;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___CheckEmailForExisting___Outcoming__C_Void ApplicationUser__Authorization___CheckEmailForExisting___C_Result;

typedef struct ApplicationUser__Authorization___CheckNicknameForExisting___Incoming {
  struct C_String application_user__nickname;
} ApplicationUser__Authorization___CheckNicknameForExisting___Incoming;

typedef struct ApplicationUser__Authorization___CheckNicknameForExisting___Outcoming {
  bool result;
} ApplicationUser__Authorization___CheckNicknameForExisting___Outcoming;

typedef struct C_Data_ApplicationUser__Authorization___CheckNicknameForExisting___Outcoming {
  struct ApplicationUser__Authorization___CheckNicknameForExisting___Outcoming filled;
  bool is_filled;
} C_Data_ApplicationUser__Authorization___CheckNicknameForExisting___Outcoming;

typedef struct C_UnifiedReport_ApplicationUser__Authorization___CheckNicknameForExisting___Outcoming__C_Void {
  struct C_Data_ApplicationUser__Authorization___CheckNicknameForExisting___Outcoming target;
  struct C_Void precedent;
  bool is_target;
} C_UnifiedReport_ApplicationUser__Authorization___CheckNicknameForExisting___Outcoming__C_Void;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___CheckNicknameForExisting___Outcoming__C_Void {
  struct C_UnifiedReport_ApplicationUser__Authorization___CheckNicknameForExisting___Outcoming__C_Void data;
  bool is_data;
} C_Result_C_UnifiedReport_ApplicationUser__Authorization___CheckNicknameForExisting___Outcoming__C_Void;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___CheckNicknameForExisting___Outcoming__C_Void ApplicationUser__Authorization___CheckNicknameForExisting___C_Result;

typedef struct ApplicationUser__Authorization___DeauthorizeFromAllDevices___Incoming {
  struct C_String application_user_access_token_encrypted;
} ApplicationUser__Authorization___DeauthorizeFromAllDevices___Incoming;

typedef struct C_Data_C_Void {
  struct C_Void filled;
  bool is_filled;
} C_Data_C_Void;

typedef struct ApplicationUser__Authorization___DeauthorizeFromAllDevices___Precedent {
  bool application_user_access_token__already_expired;
  bool application_user_access_token__in_application_user_access_token_black_list;
} ApplicationUser__Authorization___DeauthorizeFromAllDevices___Precedent;

typedef struct C_UnifiedReport_C_Void__ApplicationUser__Authorization___DeauthorizeFromAllDevices___Precedent {
  struct C_Data_C_Void target;
  struct ApplicationUser__Authorization___DeauthorizeFromAllDevices___Precedent precedent;
  bool is_target;
} C_UnifiedReport_C_Void__ApplicationUser__Authorization___DeauthorizeFromAllDevices___Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__ApplicationUser__Authorization___DeauthorizeFromAllDevices___Precedent {
  struct C_UnifiedReport_C_Void__ApplicationUser__Authorization___DeauthorizeFromAllDevices___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_C_Void__ApplicationUser__Authorization___DeauthorizeFromAllDevices___Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__ApplicationUser__Authorization___DeauthorizeFromAllDevices___Precedent ApplicationUser__Authorization___DeauthorizeFromAllDevices___C_Result;

typedef struct ApplicationUser__Authorization___DeauthorizeFromOneDevice___Incoming {
  struct C_String application_user_access_token_encrypted;
} ApplicationUser__Authorization___DeauthorizeFromOneDevice___Incoming;

typedef struct ApplicationUser__Authorization___DeauthorizeFromOneDevice___Precedent {
  bool application_user_access_token__already_expired;
  bool application_user_access_token__in_application_user_access_token_black_list;
} ApplicationUser__Authorization___DeauthorizeFromOneDevice___Precedent;

typedef struct C_UnifiedReport_C_Void__ApplicationUser__Authorization___DeauthorizeFromOneDevice___Precedent {
  struct C_Data_C_Void target;
  struct ApplicationUser__Authorization___DeauthorizeFromOneDevice___Precedent precedent;
  bool is_target;
} C_UnifiedReport_C_Void__ApplicationUser__Authorization___DeauthorizeFromOneDevice___Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__ApplicationUser__Authorization___DeauthorizeFromOneDevice___Precedent {
  struct C_UnifiedReport_C_Void__ApplicationUser__Authorization___DeauthorizeFromOneDevice___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_C_Void__ApplicationUser__Authorization___DeauthorizeFromOneDevice___Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__ApplicationUser__Authorization___DeauthorizeFromOneDevice___Precedent ApplicationUser__Authorization___DeauthorizeFromOneDevice___C_Result;

typedef struct ApplicationUser__Authorization___RefreshAccessToken___Incoming {
  struct C_String application_user_access_token_encrypted;
  struct C_String application_user_access_refresh_token_encrypted;
} ApplicationUser__Authorization___RefreshAccessToken___Incoming;

typedef struct ApplicationUser__Authorization___RefreshAccessToken___Outcoming {
  struct C_String application_user_access_token_encrypted;
  struct C_String application_user_access_refresh_token_encrypted;
} ApplicationUser__Authorization___RefreshAccessToken___Outcoming;

typedef struct C_Data_ApplicationUser__Authorization___RefreshAccessToken___Outcoming {
  struct ApplicationUser__Authorization___RefreshAccessToken___Outcoming filled;
  bool is_filled;
} C_Data_ApplicationUser__Authorization___RefreshAccessToken___Outcoming;

typedef struct ApplicationUser__Authorization___RefreshAccessToken___Precedent {
  bool application_user_access_refresh_token__not_found;
  bool application_user_access_refresh_token__already_expired;
} ApplicationUser__Authorization___RefreshAccessToken___Precedent;

typedef struct C_UnifiedReport_ApplicationUser__Authorization___RefreshAccessToken___Outcoming__ApplicationUser__Authorization___RefreshAccessToken___Precedent {
  struct C_Data_ApplicationUser__Authorization___RefreshAccessToken___Outcoming target;
  struct ApplicationUser__Authorization___RefreshAccessToken___Precedent precedent;
  bool is_target;
} C_UnifiedReport_ApplicationUser__Authorization___RefreshAccessToken___Outcoming__ApplicationUser__Authorization___RefreshAccessToken___Precedent;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___RefreshAccessToken___Outcoming__ApplicationUser__Authorization___RefreshAccessToken___Precedent {
  struct C_UnifiedReport_ApplicationUser__Authorization___RefreshAccessToken___Outcoming__ApplicationUser__Authorization___RefreshAccessToken___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_ApplicationUser__Authorization___RefreshAccessToken___Outcoming__ApplicationUser__Authorization___RefreshAccessToken___Precedent;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___RefreshAccessToken___Outcoming__ApplicationUser__Authorization___RefreshAccessToken___Precedent ApplicationUser__Authorization___RefreshAccessToken___C_Result;

typedef struct ApplicationUser__Authorization___RegisterByFirstStep___Incoming {
  struct C_String application_user__email;
  struct C_String application_user_device__id;
} ApplicationUser__Authorization___RegisterByFirstStep___Incoming;

typedef struct ApplicationUser__Authorization___RegisterByFirstStep___Outcoming {
  bool verification_message_sent;
  long application_user_registration_token__can_be_resent_from;
  short application_user_registration_token__wrong_enter_tries_quantity;
  short application_user_registration_token__wrong_enter_tries_quantity_limit;
} ApplicationUser__Authorization___RegisterByFirstStep___Outcoming;

typedef struct C_Data_ApplicationUser__Authorization___RegisterByFirstStep___Outcoming {
  struct ApplicationUser__Authorization___RegisterByFirstStep___Outcoming filled;
  bool is_filled;
} C_Data_ApplicationUser__Authorization___RegisterByFirstStep___Outcoming;

typedef struct ApplicationUser__Authorization___RegisterByFirstStep___Precedent {
  bool application_user__email_already_exist;
} ApplicationUser__Authorization___RegisterByFirstStep___Precedent;

typedef struct C_UnifiedReport_ApplicationUser__Authorization___RegisterByFirstStep___Outcoming__ApplicationUser__Authorization___RegisterByFirstStep___Precedent {
  struct C_Data_ApplicationUser__Authorization___RegisterByFirstStep___Outcoming target;
  struct ApplicationUser__Authorization___RegisterByFirstStep___Precedent precedent;
  bool is_target;
} C_UnifiedReport_ApplicationUser__Authorization___RegisterByFirstStep___Outcoming__ApplicationUser__Authorization___RegisterByFirstStep___Precedent;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___RegisterByFirstStep___Outcoming__ApplicationUser__Authorization___RegisterByFirstStep___Precedent {
  struct C_UnifiedReport_ApplicationUser__Authorization___RegisterByFirstStep___Outcoming__ApplicationUser__Authorization___RegisterByFirstStep___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_ApplicationUser__Authorization___RegisterByFirstStep___Outcoming__ApplicationUser__Authorization___RegisterByFirstStep___Precedent;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___RegisterByFirstStep___Outcoming__ApplicationUser__Authorization___RegisterByFirstStep___Precedent ApplicationUser__Authorization___RegisterByFirstStep___C_Result;

typedef struct ApplicationUser__Authorization___RegisterBySecondStep___Incoming {
  struct C_String application_user__email;
  struct C_String application_user_device__id;
  struct C_String application_user_registration_token__value;
} ApplicationUser__Authorization___RegisterBySecondStep___Incoming;

typedef struct ApplicationUserRegistrationToken_WrongValue {
  bool is_exist;
  short application_user_registration_token__wrong_enter_tries_quantity;
} ApplicationUserRegistrationToken_WrongValue;

typedef struct ApplicationUser__Authorization___RegisterBySecondStep___Precedent {
  bool application_user_registration_token__not_found;
  bool application_user_registration_token__already_expired;
  bool application_user_registration_token__already_approved;
  struct ApplicationUserRegistrationToken_WrongValue application_user_registration_token__wrong_value;
} ApplicationUser__Authorization___RegisterBySecondStep___Precedent;

typedef struct C_UnifiedReport_C_Void__ApplicationUser__Authorization___RegisterBySecondStep___Precedent {
  struct C_Data_C_Void target;
  struct ApplicationUser__Authorization___RegisterBySecondStep___Precedent precedent;
  bool is_target;
} C_UnifiedReport_C_Void__ApplicationUser__Authorization___RegisterBySecondStep___Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__ApplicationUser__Authorization___RegisterBySecondStep___Precedent {
  struct C_UnifiedReport_C_Void__ApplicationUser__Authorization___RegisterBySecondStep___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_C_Void__ApplicationUser__Authorization___RegisterBySecondStep___Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__ApplicationUser__Authorization___RegisterBySecondStep___Precedent ApplicationUser__Authorization___RegisterBySecondStep___C_Result;

typedef struct ApplicationUser__Authorization___RegisterByLastStep___Incoming {
  struct C_String application_user_device__id;
  struct C_String application_user__nickname;
  struct C_String application_user__password;
  struct C_String application_user__email;
  struct C_String application_user_registration_token__value;
} ApplicationUser__Authorization___RegisterByLastStep___Incoming;

typedef struct ApplicationUser__Authorization___RegisterByLastStep___Outcoming {
  struct C_String application_user_access_token_encrypted;
  struct C_String application_user_access_refresh_token_encrypted;
} ApplicationUser__Authorization___RegisterByLastStep___Outcoming;

typedef struct C_Data_ApplicationUser__Authorization___RegisterByLastStep___Outcoming {
  struct ApplicationUser__Authorization___RegisterByLastStep___Outcoming filled;
  bool is_filled;
} C_Data_ApplicationUser__Authorization___RegisterByLastStep___Outcoming;

typedef struct ApplicationUser__Authorization___RegisterByLastStep___Precedent {
  bool application_user__nickname_already_exist;
  bool application_user__email_already_exist;
  bool application_user_registration_token__not_found;
  bool application_user_registration_token__already_expired;
  bool application_user_registration_token__is_not_approved;
  bool application_user_registration_token__wrong_value;
} ApplicationUser__Authorization___RegisterByLastStep___Precedent;

typedef struct C_UnifiedReport_ApplicationUser__Authorization___RegisterByLastStep___Outcoming__ApplicationUser__Authorization___RegisterByLastStep___Precedent {
  struct C_Data_ApplicationUser__Authorization___RegisterByLastStep___Outcoming target;
  struct ApplicationUser__Authorization___RegisterByLastStep___Precedent precedent;
  bool is_target;
} C_UnifiedReport_ApplicationUser__Authorization___RegisterByLastStep___Outcoming__ApplicationUser__Authorization___RegisterByLastStep___Precedent;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___RegisterByLastStep___Outcoming__ApplicationUser__Authorization___RegisterByLastStep___Precedent {
  struct C_UnifiedReport_ApplicationUser__Authorization___RegisterByLastStep___Outcoming__ApplicationUser__Authorization___RegisterByLastStep___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_ApplicationUser__Authorization___RegisterByLastStep___Outcoming__ApplicationUser__Authorization___RegisterByLastStep___Precedent;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___RegisterByLastStep___Outcoming__ApplicationUser__Authorization___RegisterByLastStep___Precedent ApplicationUser__Authorization___RegisterByLastStep___C_Result;

typedef struct ApplicationUser__Authorization___ResetPasswordByFirstStep___Incoming {
  struct C_String application_user__email;
  struct C_String application_user_device__id;
} ApplicationUser__Authorization___ResetPasswordByFirstStep___Incoming;

typedef struct ApplicationUser__Authorization___ResetPasswordByFirstStep___Outcoming {
  long application_user__id;
  bool verification_message_sent;
  long application_user_reset_password_token__can_be_resent_from;
  short application_user_reset_password_token__wrong_enter_tries_quantity;
  short application_user_reset_password_token__wrong_enter_tries_quantity_limit;
} ApplicationUser__Authorization___ResetPasswordByFirstStep___Outcoming;

typedef struct C_Data_ApplicationUser__Authorization___ResetPasswordByFirstStep___Outcoming {
  struct ApplicationUser__Authorization___ResetPasswordByFirstStep___Outcoming filled;
  bool is_filled;
} C_Data_ApplicationUser__Authorization___ResetPasswordByFirstStep___Outcoming;

typedef struct ApplicationUser__Authorization___ResetPasswordByFirstStep___Precedent {
  bool application_user__not_found;
} ApplicationUser__Authorization___ResetPasswordByFirstStep___Precedent;

typedef struct C_UnifiedReport_ApplicationUser__Authorization___ResetPasswordByFirstStep___Outcoming__ApplicationUser__Authorization___ResetPasswordByFirstStep___Precedent {
  struct C_Data_ApplicationUser__Authorization___ResetPasswordByFirstStep___Outcoming target;
  struct ApplicationUser__Authorization___ResetPasswordByFirstStep___Precedent precedent;
  bool is_target;
} C_UnifiedReport_ApplicationUser__Authorization___ResetPasswordByFirstStep___Outcoming__ApplicationUser__Authorization___ResetPasswordByFirstStep___Precedent;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___ResetPasswordByFirstStep___Outcoming__ApplicationUser__Authorization___ResetPasswordByFirstStep___Precedent {
  struct C_UnifiedReport_ApplicationUser__Authorization___ResetPasswordByFirstStep___Outcoming__ApplicationUser__Authorization___ResetPasswordByFirstStep___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_ApplicationUser__Authorization___ResetPasswordByFirstStep___Outcoming__ApplicationUser__Authorization___ResetPasswordByFirstStep___Precedent;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___ResetPasswordByFirstStep___Outcoming__ApplicationUser__Authorization___ResetPasswordByFirstStep___Precedent ApplicationUser__Authorization___ResetPasswordByFirstStep___C_Result;

typedef struct ApplicationUser__Authorization___ResetPasswordBySecondStep___Incoming {
  long application_user__id;
  struct C_String application_user_device__id;
  struct C_String application_user_reset_password_token__value;
} ApplicationUser__Authorization___ResetPasswordBySecondStep___Incoming;

typedef struct ApplicationUserResetPasswordToken_WrongValue {
  bool is_exist;
  short application_user_reset_password_token__wrong_enter_tries_quantity;
} ApplicationUserResetPasswordToken_WrongValue;

typedef struct ApplicationUser__Authorization___ResetPasswordBySecondStep___Precedent {
  bool application_user_reset_password_token__not_found;
  bool application_user_reset_password_token__already_expired;
  bool application_user_reset_password_token__already_approved;
  struct ApplicationUserResetPasswordToken_WrongValue application_user_reset_password_token__wrong_value;
} ApplicationUser__Authorization___ResetPasswordBySecondStep___Precedent;

typedef struct C_UnifiedReport_C_Void__ApplicationUser__Authorization___ResetPasswordBySecondStep___Precedent {
  struct C_Data_C_Void target;
  struct ApplicationUser__Authorization___ResetPasswordBySecondStep___Precedent precedent;
  bool is_target;
} C_UnifiedReport_C_Void__ApplicationUser__Authorization___ResetPasswordBySecondStep___Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__ApplicationUser__Authorization___ResetPasswordBySecondStep___Precedent {
  struct C_UnifiedReport_C_Void__ApplicationUser__Authorization___ResetPasswordBySecondStep___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_C_Void__ApplicationUser__Authorization___ResetPasswordBySecondStep___Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__ApplicationUser__Authorization___ResetPasswordBySecondStep___Precedent ApplicationUser__Authorization___ResetPasswordBySecondStep___C_Result;

typedef struct ApplicationUser__Authorization___ResetPasswordByLastStep___Incoming {
  long application_user__id;
  struct C_String application_user_device__id;
  struct C_String application_user__password;
  struct C_String application_user_reset_password_token__value;
} ApplicationUser__Authorization___ResetPasswordByLastStep___Incoming;

typedef struct ApplicationUser__Authorization___ResetPasswordByLastStep___Precedent {
  bool application_user__not_found;
  bool application_user_reset_password_token__not_found;
  bool application_user_reset_password_token__already_expired;
  bool application_user_reset_password_token__is_not_approved;
  bool application_user_reset_password_token__wrong_value;
} ApplicationUser__Authorization___ResetPasswordByLastStep___Precedent;

typedef struct C_UnifiedReport_C_Void__ApplicationUser__Authorization___ResetPasswordByLastStep___Precedent {
  struct C_Data_C_Void target;
  struct ApplicationUser__Authorization___ResetPasswordByLastStep___Precedent precedent;
  bool is_target;
} C_UnifiedReport_C_Void__ApplicationUser__Authorization___ResetPasswordByLastStep___Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__ApplicationUser__Authorization___ResetPasswordByLastStep___Precedent {
  struct C_UnifiedReport_C_Void__ApplicationUser__Authorization___ResetPasswordByLastStep___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_C_Void__ApplicationUser__Authorization___ResetPasswordByLastStep___Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__ApplicationUser__Authorization___ResetPasswordByLastStep___Precedent ApplicationUser__Authorization___ResetPasswordByLastStep___C_Result;

typedef struct ApplicationUser__Authorization___SendEmailForRegister___Incoming {
  struct C_String application_user__email;
  struct C_String application_user_device__id;
} ApplicationUser__Authorization___SendEmailForRegister___Incoming;

typedef struct ApplicationUser__Authorization___SendEmailForRegister___Outcoming {
  long application_user_registration_token__can_be_resent_from;
} ApplicationUser__Authorization___SendEmailForRegister___Outcoming;

typedef struct C_Data_ApplicationUser__Authorization___SendEmailForRegister___Outcoming {
  struct ApplicationUser__Authorization___SendEmailForRegister___Outcoming filled;
  bool is_filled;
} C_Data_ApplicationUser__Authorization___SendEmailForRegister___Outcoming;

typedef struct ApplicationUser__Authorization___SendEmailForRegister___Precedent {
  bool application_user_registration_token__not_found;
  bool application_user_registration_token__already_expired;
  bool application_user_registration_token__already_approved;
  bool application_user_registration_token__time_to_resend_has_not_come;
} ApplicationUser__Authorization___SendEmailForRegister___Precedent;

typedef struct C_UnifiedReport_ApplicationUser__Authorization___SendEmailForRegister___Outcoming__ApplicationUser__Authorization___SendEmailForRegister___Precedent {
  struct C_Data_ApplicationUser__Authorization___SendEmailForRegister___Outcoming target;
  struct ApplicationUser__Authorization___SendEmailForRegister___Precedent precedent;
  bool is_target;
} C_UnifiedReport_ApplicationUser__Authorization___SendEmailForRegister___Outcoming__ApplicationUser__Authorization___SendEmailForRegister___Precedent;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___SendEmailForRegister___Outcoming__ApplicationUser__Authorization___SendEmailForRegister___Precedent {
  struct C_UnifiedReport_ApplicationUser__Authorization___SendEmailForRegister___Outcoming__ApplicationUser__Authorization___SendEmailForRegister___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_ApplicationUser__Authorization___SendEmailForRegister___Outcoming__ApplicationUser__Authorization___SendEmailForRegister___Precedent;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___SendEmailForRegister___Outcoming__ApplicationUser__Authorization___SendEmailForRegister___Precedent ApplicationUser__Authorization___SendEmailForRegister___C_Result;

typedef struct ApplicationUser__Authorization___SendEmailForAuthorize___Incoming {
  struct C_String application_user_device__id;
  long application_user__id;
} ApplicationUser__Authorization___SendEmailForAuthorize___Incoming;

typedef struct ApplicationUser__Authorization___SendEmailForAuthorize___Outcoming {
  long application_user_authorization_token__can_be_resent_from;
} ApplicationUser__Authorization___SendEmailForAuthorize___Outcoming;

typedef struct C_Data_ApplicationUser__Authorization___SendEmailForAuthorize___Outcoming {
  struct ApplicationUser__Authorization___SendEmailForAuthorize___Outcoming filled;
  bool is_filled;
} C_Data_ApplicationUser__Authorization___SendEmailForAuthorize___Outcoming;

typedef struct ApplicationUser__Authorization___SendEmailForAuthorize___Precedent {
  bool application_user__not_found;
  bool application_user_authorization_token__not_found;
  bool application_user_authorization_token__already_expired;
  bool application_user_authorization_token__time_to_resend_has_not_come;
} ApplicationUser__Authorization___SendEmailForAuthorize___Precedent;

typedef struct C_UnifiedReport_ApplicationUser__Authorization___SendEmailForAuthorize___Outcoming__ApplicationUser__Authorization___SendEmailForAuthorize___Precedent {
  struct C_Data_ApplicationUser__Authorization___SendEmailForAuthorize___Outcoming target;
  struct ApplicationUser__Authorization___SendEmailForAuthorize___Precedent precedent;
  bool is_target;
} C_UnifiedReport_ApplicationUser__Authorization___SendEmailForAuthorize___Outcoming__ApplicationUser__Authorization___SendEmailForAuthorize___Precedent;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___SendEmailForAuthorize___Outcoming__ApplicationUser__Authorization___SendEmailForAuthorize___Precedent {
  struct C_UnifiedReport_ApplicationUser__Authorization___SendEmailForAuthorize___Outcoming__ApplicationUser__Authorization___SendEmailForAuthorize___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_ApplicationUser__Authorization___SendEmailForAuthorize___Outcoming__ApplicationUser__Authorization___SendEmailForAuthorize___Precedent;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___SendEmailForAuthorize___Outcoming__ApplicationUser__Authorization___SendEmailForAuthorize___Precedent ApplicationUser__Authorization___SendEmailForAuthorize___C_Result;

typedef struct ApplicationUser__Authorization___SendEmailForResetPassword___Incoming {
  long application_user__id;
  struct C_String application_user_device__id;
} ApplicationUser__Authorization___SendEmailForResetPassword___Incoming;

typedef struct ApplicationUser__Authorization___SendEmailForResetPassword___Outcoming {
  long application_user_resep_password_token_can_be_resent_from;
} ApplicationUser__Authorization___SendEmailForResetPassword___Outcoming;

typedef struct C_Data_ApplicationUser__Authorization___SendEmailForResetPassword___Outcoming {
  struct ApplicationUser__Authorization___SendEmailForResetPassword___Outcoming filled;
  bool is_filled;
} C_Data_ApplicationUser__Authorization___SendEmailForResetPassword___Outcoming;

typedef struct ApplicationUser__Authorization___SendEmailForResetPassword___Precedent {
  bool application_user__not_found;
  bool application_user_reset_password_token__not_found;
  bool application_user_reset_password_token__already_expired;
  bool application_user_reset_password_token__already_approved;
  bool application_user_reset_password_token__time_to_resend_has_not_come;
} ApplicationUser__Authorization___SendEmailForResetPassword___Precedent;

typedef struct C_UnifiedReport_ApplicationUser__Authorization___SendEmailForResetPassword___Outcoming__ApplicationUser__Authorization___SendEmailForResetPassword___Precedent {
  struct C_Data_ApplicationUser__Authorization___SendEmailForResetPassword___Outcoming target;
  struct ApplicationUser__Authorization___SendEmailForResetPassword___Precedent precedent;
  bool is_target;
} C_UnifiedReport_ApplicationUser__Authorization___SendEmailForResetPassword___Outcoming__ApplicationUser__Authorization___SendEmailForResetPassword___Precedent;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___SendEmailForResetPassword___Outcoming__ApplicationUser__Authorization___SendEmailForResetPassword___Precedent {
  struct C_UnifiedReport_ApplicationUser__Authorization___SendEmailForResetPassword___Outcoming__ApplicationUser__Authorization___SendEmailForResetPassword___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_ApplicationUser__Authorization___SendEmailForResetPassword___Outcoming__ApplicationUser__Authorization___SendEmailForResetPassword___Precedent;

typedef struct C_Result_C_UnifiedReport_ApplicationUser__Authorization___SendEmailForResetPassword___Outcoming__ApplicationUser__Authorization___SendEmailForResetPassword___Precedent ApplicationUser__Authorization___SendEmailForResetPassword___C_Result;

typedef struct C_Option_C_String {
  struct C_String data;
  bool is_data;
} C_Option_C_String;

typedef struct Channel__Base___GetManyByNameInSubscriptions___Incoming {
  struct C_String application_user_access_token_encrypted;
  struct C_String channel__name;
  struct C_Option_C_String requery___channel__name;
  short limit;
} Channel__Base___GetManyByNameInSubscriptions___Incoming;

typedef struct Channel1 {
  long channel__id;
  struct C_String channel__name;
  struct C_String channel__linked_name;
  short channel__access_modifier;
  short channel__visability_modifier;
  struct C_Option_C_String channel__cover_image_path;
  struct C_Option_C_String channel__background_image_path;
} Channel1;

typedef struct Common1 {
  struct Channel1 channel;
  bool is_application_user_subscribed;
} Common1;

typedef struct C_Vector_Common1 {
  struct Common1 *pointer;
  size_t length;
} C_Vector_Common1;

typedef struct Channel__Base___GetManyByNameInSubscriptions___Outcoming {
  struct C_Vector_Common1 common_registry;
} Channel__Base___GetManyByNameInSubscriptions___Outcoming;

typedef struct C_Data_Channel__Base___GetManyByNameInSubscriptions___Outcoming {
  struct Channel__Base___GetManyByNameInSubscriptions___Outcoming filled;
  bool is_filled;
} C_Data_Channel__Base___GetManyByNameInSubscriptions___Outcoming;

typedef struct Channel__Base___GetManyByNameInSubscriptions___Precedent {
  bool application_user_access_token__already_expired;
  bool application_user_access_token__in_application_user_access_token_black_list;
} Channel__Base___GetManyByNameInSubscriptions___Precedent;

typedef struct C_UnifiedReport_Channel__Base___GetManyByNameInSubscriptions___Outcoming__Channel__Base___GetManyByNameInSubscriptions___Precedent {
  struct C_Data_Channel__Base___GetManyByNameInSubscriptions___Outcoming target;
  struct Channel__Base___GetManyByNameInSubscriptions___Precedent precedent;
  bool is_target;
} C_UnifiedReport_Channel__Base___GetManyByNameInSubscriptions___Outcoming__Channel__Base___GetManyByNameInSubscriptions___Precedent;

typedef struct C_Result_C_UnifiedReport_Channel__Base___GetManyByNameInSubscriptions___Outcoming__Channel__Base___GetManyByNameInSubscriptions___Precedent {
  struct C_UnifiedReport_Channel__Base___GetManyByNameInSubscriptions___Outcoming__Channel__Base___GetManyByNameInSubscriptions___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_Channel__Base___GetManyByNameInSubscriptions___Outcoming__Channel__Base___GetManyByNameInSubscriptions___Precedent;

typedef struct C_Result_C_UnifiedReport_Channel__Base___GetManyByNameInSubscriptions___Outcoming__Channel__Base___GetManyByNameInSubscriptions___Precedent Channel__Base___GetManyByNameInSubscriptions___C_Result;

typedef struct C_Option_c_long {
  long data;
  bool is_data;
} C_Option_c_long;

typedef struct Channel__Base___GetManyBySubscription___Incoming {
  struct C_String application_user_access_token_encrypted;
  struct C_Option_c_long requery___channel__id;
  short limit;
} Channel__Base___GetManyBySubscription___Incoming;

typedef struct Channel__Base___GetManyBySubscription___Outcoming {
  struct C_Vector_Common1 common_registry;
} Channel__Base___GetManyBySubscription___Outcoming;

typedef struct C_Data_Channel__Base___GetManyBySubscription___Outcoming {
  struct Channel__Base___GetManyBySubscription___Outcoming filled;
  bool is_filled;
} C_Data_Channel__Base___GetManyBySubscription___Outcoming;

typedef struct Channel__Base___GetManyBySubscription___Precedent {
  bool application_user_access_token__already_expired;
  bool application_user_access_token__in_application_user_access_token_black_list;
} Channel__Base___GetManyBySubscription___Precedent;

typedef struct C_UnifiedReport_Channel__Base___GetManyBySubscription___Outcoming__Channel__Base___GetManyBySubscription___Precedent {
  struct C_Data_Channel__Base___GetManyBySubscription___Outcoming target;
  struct Channel__Base___GetManyBySubscription___Precedent precedent;
  bool is_target;
} C_UnifiedReport_Channel__Base___GetManyBySubscription___Outcoming__Channel__Base___GetManyBySubscription___Precedent;

typedef struct C_Result_C_UnifiedReport_Channel__Base___GetManyBySubscription___Outcoming__Channel__Base___GetManyBySubscription___Precedent {
  struct C_UnifiedReport_Channel__Base___GetManyBySubscription___Outcoming__Channel__Base___GetManyBySubscription___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_Channel__Base___GetManyBySubscription___Outcoming__Channel__Base___GetManyBySubscription___Precedent;

typedef struct C_Result_C_UnifiedReport_Channel__Base___GetManyBySubscription___Outcoming__Channel__Base___GetManyBySubscription___Precedent Channel__Base___GetManyBySubscription___C_Result;

typedef struct Channel__Base___GetManyPublicByName___Incoming {
  struct C_String application_user_access_token_encrypted;
  struct C_String channel__name;
  struct C_Option_C_String requery___channel__name;
  short limit;
} Channel__Base___GetManyPublicByName___Incoming;

typedef struct Channel__Base___GetManyPublicByName___Outcoming {
  struct C_Vector_Common1 common_registry;
} Channel__Base___GetManyPublicByName___Outcoming;

typedef struct C_Data_Channel__Base___GetManyPublicByName___Outcoming {
  struct Channel__Base___GetManyPublicByName___Outcoming filled;
  bool is_filled;
} C_Data_Channel__Base___GetManyPublicByName___Outcoming;

typedef struct Channel__Base___GetManyPublicByName___Precedent {
  bool application_user_access_token__already_expired;
  bool application_user_access_token__in_application_user_access_token_black_list;
} Channel__Base___GetManyPublicByName___Precedent;

typedef struct C_UnifiedReport_Channel__Base___GetManyPublicByName___Outcoming__Channel__Base___GetManyPublicByName___Precedent {
  struct C_Data_Channel__Base___GetManyPublicByName___Outcoming target;
  struct Channel__Base___GetManyPublicByName___Precedent precedent;
  bool is_target;
} C_UnifiedReport_Channel__Base___GetManyPublicByName___Outcoming__Channel__Base___GetManyPublicByName___Precedent;

typedef struct C_Result_C_UnifiedReport_Channel__Base___GetManyPublicByName___Outcoming__Channel__Base___GetManyPublicByName___Precedent {
  struct C_UnifiedReport_Channel__Base___GetManyPublicByName___Outcoming__Channel__Base___GetManyPublicByName___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_Channel__Base___GetManyPublicByName___Outcoming__Channel__Base___GetManyPublicByName___Precedent;

typedef struct C_Result_C_UnifiedReport_Channel__Base___GetManyPublicByName___Outcoming__Channel__Base___GetManyPublicByName___Precedent Channel__Base___GetManyPublicByName___C_Result;

typedef struct Channel__Base___GetOneById___Incoming {
  struct C_String application_user_access_token_encrypted;
  long channel__id;
} Channel__Base___GetOneById___Incoming;

typedef struct C_Vector_c_short {
  short *pointer;
  size_t length;
} C_Vector_c_short;

typedef struct Channel2 {
  long channel__owner;
  struct C_String channel__name;
  struct C_String channel__linked_name;
  struct C_Option_C_String channel__description;
  short channel__access_modifier;
  short channel__visability_modifier;
  struct C_Vector_c_short channel__orientation;
  struct C_Option_C_String channel__cover_image_path;
  struct C_Option_C_String channel__background_image_path;
  long channel__subscribers_quantity;
  long channel__marks_quantity;
  long channel__viewing_quantity;
} Channel2;

typedef struct ChannelInnerLink1 {
  long channel_inner_link__to;
} ChannelInnerLink1;

typedef struct C_Vector_ChannelInnerLink1 {
  struct ChannelInnerLink1 *pointer;
  size_t length;
} C_Vector_ChannelInnerLink1;

typedef struct ChannelOuterLink1 {
  struct C_String channel_outer_link__alias;
  struct C_String channel_outer_link__address;
} ChannelOuterLink1;

typedef struct C_Vector_ChannelOuterLink1 {
  struct ChannelOuterLink1 *pointer;
  size_t length;
} C_Vector_ChannelOuterLink1;

typedef struct Channel__Base___GetOneById___Outcoming {
  struct Channel2 channel;
  struct C_Vector_ChannelInnerLink1 channel_inner_link_registry;
  struct C_Vector_ChannelOuterLink1 channel_outer_link_registry;
} Channel__Base___GetOneById___Outcoming;

typedef struct C_Data_Channel__Base___GetOneById___Outcoming {
  struct Channel__Base___GetOneById___Outcoming filled;
  bool is_filled;
} C_Data_Channel__Base___GetOneById___Outcoming;

typedef struct Channel__Base___GetOneById___Precedent {
  bool application_user_access_token__already_expired;
  bool application_user_access_token__in_application_user_access_token_black_list;
  bool channel__not_found;
  bool channel__is_close;
} Channel__Base___GetOneById___Precedent;

typedef struct C_UnifiedReport_Channel__Base___GetOneById___Outcoming__Channel__Base___GetOneById___Precedent {
  struct C_Data_Channel__Base___GetOneById___Outcoming target;
  struct Channel__Base___GetOneById___Precedent precedent;
  bool is_target;
} C_UnifiedReport_Channel__Base___GetOneById___Outcoming__Channel__Base___GetOneById___Precedent;

typedef struct C_Result_C_UnifiedReport_Channel__Base___GetOneById___Outcoming__Channel__Base___GetOneById___Precedent {
  struct C_UnifiedReport_Channel__Base___GetOneById___Outcoming__Channel__Base___GetOneById___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_Channel__Base___GetOneById___Outcoming__Channel__Base___GetOneById___Precedent;

typedef struct C_Result_C_UnifiedReport_Channel__Base___GetOneById___Outcoming__Channel__Base___GetOneById___Precedent Channel__Base___GetOneById___C_Result;

typedef struct ChannelSubscription__Base___Create___Incoming {
  struct C_String application_user_access_token_encrypted;
  long channel__id;
} ChannelSubscription__Base___Create___Incoming;

typedef struct ChannelSubscription__Base___Create___Precedent {
  bool application_user_access_token__already_expired;
  bool application_user_access_token__in_application_user_access_token_black_list;
  bool channel__not_found;
  bool channel__is_close;
  bool application_user__is_channel__owner;
} ChannelSubscription__Base___Create___Precedent;

typedef struct C_UnifiedReport_C_Void__ChannelSubscription__Base___Create___Precedent {
  struct C_Data_C_Void target;
  struct ChannelSubscription__Base___Create___Precedent precedent;
  bool is_target;
} C_UnifiedReport_C_Void__ChannelSubscription__Base___Create___Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__ChannelSubscription__Base___Create___Precedent {
  struct C_UnifiedReport_C_Void__ChannelSubscription__Base___Create___Precedent data;
  bool is_data;
} C_Result_C_UnifiedReport_C_Void__ChannelSubscription__Base___Create___Precedent;

typedef struct C_Result_C_UnifiedReport_C_Void__ChannelSubscription__Base___Create___Precedent ChannelSubscription__Base___Create___C_Result;

struct C_Result_C_Vector_c_uchar *application_user___authorization____authorize_by_first_step____serialize(struct ApplicationUser__Authorization___AuthorizeByFirstStep___Incoming *incoming);

void application_user___authorization____authorize_by_first_step____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

ApplicationUser__Authorization___AuthorizeByFirstStep___C_Result *application_user___authorization____authorize_by_first_step____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void application_user___authorization____authorize_by_first_step____deserialize____deallocate(ApplicationUser__Authorization___AuthorizeByFirstStep___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *application_user___authorization____authorize_by_last_step____serialize(struct ApplicationUser__Authorization___AuthorizeByLastStep___Incoming *incoming);

void application_user___authorization____authorize_by_last_step____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

ApplicationUser__Authorization___AuthorizeByLastStep___C_Result *application_user___authorization____authorize_by_last_step____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void application_user___authorization____authorize_by_last_step____deserialize____deallocate(ApplicationUser__Authorization___AuthorizeByLastStep___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *application_user___authorization____check_email_for_existing____serialize(struct ApplicationUser__Authorization___CheckEmailForExisting___Incoming *incoming);

void application_user___authorization____check_email_for_existing____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

ApplicationUser__Authorization___CheckEmailForExisting___C_Result *application_user___authorization____check_email_for_existing____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void application_user___authorization____check_email_for_existing____deserialize____deallocate(ApplicationUser__Authorization___CheckEmailForExisting___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *application_user___authorization____check_nickname_for_existing____serialize(struct ApplicationUser__Authorization___CheckNicknameForExisting___Incoming *incoming);

void application_user___authorization____check_nickname_for_existing____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

ApplicationUser__Authorization___CheckNicknameForExisting___C_Result *application_user___authorization____check_nickname_for_existing____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void application_user___authorization____check_nickname_for_existing____deserialize____deallocate(ApplicationUser__Authorization___CheckNicknameForExisting___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *application_user___authorization____deauthorize_from_all_devices____serialize(struct ApplicationUser__Authorization___DeauthorizeFromAllDevices___Incoming *incoming);

void application_user___authorization____deauthorize_from_all_devices____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

ApplicationUser__Authorization___DeauthorizeFromAllDevices___C_Result *application_user___authorization____deauthorize_from_all_devices____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void application_user___authorization____deauthorize_from_all_devices____deserialize____deallocate(ApplicationUser__Authorization___DeauthorizeFromAllDevices___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *application_user___authorization____deauthorize_from_one_device____serialize(struct ApplicationUser__Authorization___DeauthorizeFromOneDevice___Incoming *incoming);

void application_user___authorization____deauthorize_from_one_device____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

ApplicationUser__Authorization___DeauthorizeFromOneDevice___C_Result *application_user___authorization____deauthorize_from_one_device____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void application_user___authorization____deauthorize_from_one_device____deserialize____deallocate(ApplicationUser__Authorization___DeauthorizeFromOneDevice___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *application_user___authorization____refresh_access_token____serialize(struct ApplicationUser__Authorization___RefreshAccessToken___Incoming *incoming);

void application_user___authorization____refresh_access_token____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

ApplicationUser__Authorization___RefreshAccessToken___C_Result *application_user___authorization____refresh_access_token____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void application_user___authorization____refresh_access_token____deserialize____deallocate(ApplicationUser__Authorization___RefreshAccessToken___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *application_user___authorization____register_by_first_step____serialize(struct ApplicationUser__Authorization___RegisterByFirstStep___Incoming *incoming);

void application_user___authorization____register_by_first_step____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

ApplicationUser__Authorization___RegisterByFirstStep___C_Result *application_user___authorization____register_by_first_step____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void application_user___authorization____register_by_first_step____deserialize____deallocate(ApplicationUser__Authorization___RegisterByFirstStep___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *application_user___authorization____register_by_second_step____serialize(struct ApplicationUser__Authorization___RegisterBySecondStep___Incoming *incoming);

void application_user___authorization____register_by_second_step____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

ApplicationUser__Authorization___RegisterBySecondStep___C_Result *application_user___authorization____register_by_second_step____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void application_user___authorization____register_by_second_step____deserialize____deallocate(ApplicationUser__Authorization___RegisterBySecondStep___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *application_user___authorization____register_by_last_step____serialize(struct ApplicationUser__Authorization___RegisterByLastStep___Incoming *incoming);

void application_user___authorization____register_by_last_step____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

ApplicationUser__Authorization___RegisterByLastStep___C_Result *application_user___authorization____register_by_last_step____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void application_user___authorization____register_by_last_step____deserialize____deallocate(ApplicationUser__Authorization___RegisterByLastStep___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *application_user___authorization____reset_password_by_first_step____serialize(struct ApplicationUser__Authorization___ResetPasswordByFirstStep___Incoming *incoming);

void application_user___authorization____reset_password_by_first_step____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

ApplicationUser__Authorization___ResetPasswordByFirstStep___C_Result *application_user___authorization____reset_password_by_first_step____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void application_user___authorization____reset_password_by_first_step____deserialize____deallocate(ApplicationUser__Authorization___ResetPasswordByFirstStep___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *application_user___authorization____reset_password_by_second_step____serialize(struct ApplicationUser__Authorization___ResetPasswordBySecondStep___Incoming *incoming);

void application_user___authorization____reset_password_by_second_step____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

ApplicationUser__Authorization___ResetPasswordBySecondStep___C_Result *application_user___authorization____reset_password_by_second_step____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void application_user___authorization____reset_password_by_second_step____deserialize____deallocate(ApplicationUser__Authorization___ResetPasswordBySecondStep___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *application_user___authorization____reset_password_by_last_step____serialize(struct ApplicationUser__Authorization___ResetPasswordByLastStep___Incoming *incoming);

void application_user___authorization____reset_password_by_last_step____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

ApplicationUser__Authorization___ResetPasswordByLastStep___C_Result *application_user___authorization____reset_password_by_last_step____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void application_user___authorization____reset_password_by_last_step____deserialize____deallocate(ApplicationUser__Authorization___ResetPasswordByLastStep___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *application_user___authorization____send_email_for_register____serialize(struct ApplicationUser__Authorization___SendEmailForRegister___Incoming *incoming);

void application_user___authorization____send_email_for_register____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

ApplicationUser__Authorization___SendEmailForRegister___C_Result *application_user___authorization____send_email_for_register____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void application_user___authorization____send_email_for_register____deserialize____deallocate(ApplicationUser__Authorization___SendEmailForRegister___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *application_user___authorization____send_email_for_authorize____serialize(struct ApplicationUser__Authorization___SendEmailForAuthorize___Incoming *incoming);

void application_user___authorization____send_email_for_authorize____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

ApplicationUser__Authorization___SendEmailForAuthorize___C_Result *application_user___authorization____send_email_for_authorize____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void application_user___authorization____send_email_for_authorize____deserialize____deallocate(ApplicationUser__Authorization___SendEmailForAuthorize___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *application_user___authorization____send_email_for_reset_password____serialize(struct ApplicationUser__Authorization___SendEmailForResetPassword___Incoming *incoming);

void application_user___authorization____send_email_for_reset_password____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

ApplicationUser__Authorization___SendEmailForResetPassword___C_Result *application_user___authorization____send_email_for_reset_password____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void application_user___authorization____send_email_for_reset_password____deserialize____deallocate(ApplicationUser__Authorization___SendEmailForResetPassword___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *channel___base____get_many_by_name_in_subscriptions____serialize(struct Channel__Base___GetManyByNameInSubscriptions___Incoming *incoming);

void channel___base____get_many_by_name_in_subscriptions____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

Channel__Base___GetManyByNameInSubscriptions___C_Result *channel___base____get_many_by_name_in_subscriptions____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void channel___base____get_many_by_name_in_subscriptions____deserialize____deallocate(Channel__Base___GetManyByNameInSubscriptions___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *channel___base____get_many_by_subscription____serialize(struct Channel__Base___GetManyBySubscription___Incoming *incoming);

void channel___base____get_many_by_subscription____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

Channel__Base___GetManyBySubscription___C_Result *channel___base____get_many_by_subscription____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void channel___base____get_many_by_subscription____deserialize____deallocate(Channel__Base___GetManyBySubscription___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *channel___base____get_many_public_by_name____serialize(struct Channel__Base___GetManyPublicByName___Incoming *incoming);

void channel___base____get_many_public_by_name____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

Channel__Base___GetManyPublicByName___C_Result *channel___base____get_many_public_by_name____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void channel___base____get_many_public_by_name____deserialize____deallocate(Channel__Base___GetManyPublicByName___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *channel___base____get_one_by_id____serialize(struct Channel__Base___GetOneById___Incoming *incoming);

void channel___base____get_one_by_id____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

Channel__Base___GetOneById___C_Result *channel___base____get_one_by_id____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void channel___base____get_one_by_id____deserialize____deallocate(Channel__Base___GetOneById___C_Result *c_result);

struct C_Result_C_Vector_c_uchar *channel_subscription___base____create____serialize(struct ChannelSubscription__Base___Create___Incoming *incoming);

void channel_subscription___base____create____serialize____deallocate(struct C_Result_C_Vector_c_uchar *c_result);

ChannelSubscription__Base___Create___C_Result *channel_subscription___base____create____deserialize(struct C_Vector_c_uchar *vector_of_bytes);

void channel_subscription___base____create____deserialize____deallocate(ChannelSubscription__Base___Create___C_Result *c_result);
